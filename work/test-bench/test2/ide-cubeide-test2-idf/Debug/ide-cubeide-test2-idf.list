
ide-cubeide-test2-idf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08005230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000374  2000007c  080052ac  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  200003f0  080052ac  000203f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00042b24  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000837e  00000000  00000000  00062bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c70  00000000  00000000  0006af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e80  00000000  00000000  0006bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002dfc1  00000000  00000000  0006ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022597  00000000  00000000  0009aa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00100b4d  00000000  00000000  000bcf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bdae5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ebc  00000000  00000000  001bdb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0000be46  00000000  00000000  001c09f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001cc83c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001cc908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c74 	.word	0x08004c74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08004c74 	.word	0x08004c74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005c8:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	2400      	movs	r4, #0
 80005cc:	940b      	str	r4, [sp, #44]	; 0x2c
 80005ce:	940c      	str	r4, [sp, #48]	; 0x30
 80005d0:	940d      	str	r4, [sp, #52]	; 0x34
 80005d2:	940e      	str	r4, [sp, #56]	; 0x38
 80005d4:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d6:	4bac      	ldr	r3, [pc, #688]	; (8000888 <MX_GPIO_Init+0x2c4>)
 80005d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005da:	f042 0210 	orr.w	r2, r2, #16
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
 80005e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e2:	f002 0210 	and.w	r2, r2, #16
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
 80005f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80005f8:	9201      	str	r2, [sp, #4]
 80005fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fe:	f042 0202 	orr.w	r2, r2, #2
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	f002 0202 	and.w	r2, r2, #2
 800060a:	9202      	str	r2, [sp, #8]
 800060c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000610:	f042 0208 	orr.w	r2, r2, #8
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	f002 0208 	and.w	r2, r2, #8
 800061c:	9203      	str	r2, [sp, #12]
 800061e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000622:	f042 0204 	orr.w	r2, r2, #4
 8000626:	631a      	str	r2, [r3, #48]	; 0x30
 8000628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062a:	f002 0204 	and.w	r2, r2, #4
 800062e:	9204      	str	r2, [sp, #16]
 8000630:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000634:	f042 0201 	orr.w	r2, r2, #1
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
 800063a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063c:	f002 0201 	and.w	r2, r2, #1
 8000640:	9205      	str	r2, [sp, #20]
 8000642:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
 800064c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000652:	9206      	str	r2, [sp, #24]
 8000654:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
 800065e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000660:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000664:	9207      	str	r2, [sp, #28]
 8000666:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
 8000670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000672:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000676:	9208      	str	r2, [sp, #32]
 8000678:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067c:	f042 0220 	orr.w	r2, r2, #32
 8000680:	631a      	str	r2, [r3, #48]	; 0x30
 8000682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000684:	f002 0220 	and.w	r2, r2, #32
 8000688:	9209      	str	r2, [sp, #36]	; 0x24
 800068a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	930a      	str	r3, [sp, #40]	; 0x28
 800069c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 800069e:	4622      	mov	r2, r4
 80006a0:	f244 0110 	movw	r1, #16400	; 0x4010
 80006a4:	4879      	ldr	r0, [pc, #484]	; (800088c <MX_GPIO_Init+0x2c8>)
 80006a6:	f000 fdd3 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006aa:	4622      	mov	r2, r4
 80006ac:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80006b0:	4877      	ldr	r0, [pc, #476]	; (8000890 <MX_GPIO_Init+0x2cc>)
 80006b2:	f000 fdcd 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006b6:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 80008ac <MX_GPIO_Init+0x2e8>
 80006ba:	2201      	movs	r2, #1
 80006bc:	2120      	movs	r1, #32
 80006be:	4658      	mov	r0, fp
 80006c0:	f000 fdc6 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BUTTON1_Pin|BUTTON0_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006c4:	4622      	mov	r2, r4
 80006c6:	f241 010c 	movw	r1, #4108	; 0x100c
 80006ca:	4872      	ldr	r0, [pc, #456]	; (8000894 <MX_GPIO_Init+0x2d0>)
 80006cc:	f000 fdc0 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006d0:	4622      	mov	r2, r4
 80006d2:	2108      	movs	r1, #8
 80006d4:	4870      	ldr	r0, [pc, #448]	; (8000898 <MX_GPIO_Init+0x2d4>)
 80006d6:	f000 fdbb 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006da:	4622      	mov	r2, r4
 80006dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80006e0:	486e      	ldr	r0, [pc, #440]	; (800089c <MX_GPIO_Init+0x2d8>)
 80006e2:	f000 fdb5 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUTTON2_Pin|BUTTON3_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006e6:	4622      	mov	r2, r4
 80006e8:	21c8      	movs	r1, #200	; 0xc8
 80006ea:	486d      	ldr	r0, [pc, #436]	; (80008a0 <MX_GPIO_Init+0x2dc>)
 80006ec:	f000 fdb0 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006f0:	2310      	movs	r3, #16
 80006f2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2502      	movs	r5, #2
 80006f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006fc:	230e      	movs	r3, #14
 80006fe:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000700:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008b0 <MX_GPIO_Init+0x2ec>
 8000704:	a90b      	add	r1, sp, #44	; 0x2c
 8000706:	4648      	mov	r0, r9
 8000708:	f000 fca6 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800070c:	2308      	movs	r3, #8
 800070e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000714:	a90b      	add	r1, sp, #44	; 0x2c
 8000716:	4648      	mov	r0, r9
 8000718:	f000 fc9e 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800071c:	2304      	movs	r3, #4
 800071e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2603      	movs	r6, #3
 8000726:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000728:	2309      	movs	r3, #9
 800072a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800072c:	a90b      	add	r1, sp, #44	; 0x2c
 800072e:	4648      	mov	r0, r9
 8000730:	f000 fc92 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000734:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000738:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	a90b      	add	r1, sp, #44	; 0x2c
 8000746:	4856      	ldr	r0, [pc, #344]	; (80008a0 <MX_GPIO_Init+0x2dc>)
 8000748:	f000 fc86 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800074c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000750:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000758:	f04f 080c 	mov.w	r8, #12
 800075c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000760:	a90b      	add	r1, sp, #44	; 0x2c
 8000762:	4648      	mov	r0, r9
 8000764:	f000 fc78 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800076c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076e:	2312      	movs	r3, #18
 8000770:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000776:	2304      	movs	r3, #4
 8000778:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	a90b      	add	r1, sp, #44	; 0x2c
 800077c:	4843      	ldr	r0, [pc, #268]	; (800088c <MX_GPIO_Init+0x2c8>)
 800077e:	f000 fc6b 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000782:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000786:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800078e:	f04f 0a0a 	mov.w	sl, #10
 8000792:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	a90b      	add	r1, sp, #44	; 0x2c
 8000798:	483c      	ldr	r0, [pc, #240]	; (800088c <MX_GPIO_Init+0x2c8>)
 800079a:	f000 fc5d 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800079e:	2310      	movs	r3, #16
 80007a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2701      	movs	r7, #1
 80007a4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80007aa:	a90b      	add	r1, sp, #44	; 0x2c
 80007ac:	4837      	ldr	r0, [pc, #220]	; (800088c <MX_GPIO_Init+0x2c8>)
 80007ae:	f000 fc53 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007bc:	2308      	movs	r3, #8
 80007be:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007c0:	a90b      	add	r1, sp, #44	; 0x2c
 80007c2:	4658      	mov	r0, fp
 80007c4:	f000 fc48 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80007c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007cc:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007d4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	a90b      	add	r1, sp, #44	; 0x2c
 80007da:	4832      	ldr	r0, [pc, #200]	; (80008a4 <MX_GPIO_Init+0x2e0>)
 80007dc:	f000 fc3c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 80007e0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80007e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	a90b      	add	r1, sp, #44	; 0x2c
 80007ee:	4828      	ldr	r0, [pc, #160]	; (8000890 <MX_GPIO_Init+0x2cc>)
 80007f0:	f000 fc32 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007f4:	2360      	movs	r3, #96	; 0x60
 80007f6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007fe:	230d      	movs	r3, #13
 8000800:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000802:	a90b      	add	r1, sp, #44	; 0x2c
 8000804:	4648      	mov	r0, r9
 8000806:	f000 fc27 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800080a:	2340      	movs	r3, #64	; 0x40
 800080c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000814:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000818:	a90b      	add	r1, sp, #44	; 0x2c
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_GPIO_Init+0x2c8>)
 800081c:	f000 fc1c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000820:	f248 1333 	movw	r3, #33075	; 0x8133
 8000824:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800082c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000830:	a90b      	add	r1, sp, #44	; 0x2c
 8000832:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0x2dc>)
 8000834:	f000 fc10 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000838:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800083c:	930b      	str	r3, [sp, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000844:	230e      	movs	r3, #14
 8000846:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000848:	a90b      	add	r1, sp, #44	; 0x2c
 800084a:	4817      	ldr	r0, [pc, #92]	; (80008a8 <MX_GPIO_Init+0x2e4>)
 800084c:	f000 fc04 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000850:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8000854:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800085c:	a90b      	add	r1, sp, #44	; 0x2c
 800085e:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MX_GPIO_Init+0x2e4>)
 8000860:	f000 fbfa 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000868:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800086c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000870:	a90b      	add	r1, sp, #44	; 0x2c
 8000872:	4658      	mov	r0, fp
 8000874:	f000 fbf0 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000878:	f24c 7303 	movw	r3, #50947	; 0xc703
 800087c:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	960e      	str	r6, [sp, #56]	; 0x38
 8000884:	e016      	b.n	80008b4 <MX_GPIO_Init+0x2f0>
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020400 	.word	0x40020400
 8000890:	40020000 	.word	0x40020000
 8000894:	40022000 	.word	0x40022000
 8000898:	40022800 	.word	0x40022800
 800089c:	40021c00 	.word	0x40021c00
 80008a0:	40021800 	.word	0x40021800
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40022400 	.word	0x40022400
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	a90b      	add	r1, sp, #44	; 0x2c
 80008ba:	4658      	mov	r0, fp
 80008bc:	f000 fbcc 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008c4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008cc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	a90b      	add	r1, sp, #44	; 0x2c
 80008d2:	48a3      	ldr	r0, [pc, #652]	; (8000b60 <MX_GPIO_Init+0x59c>)
 80008d4:	f000 fbc0 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008d8:	23f0      	movs	r3, #240	; 0xf0
 80008da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008e2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008e6:	a90b      	add	r1, sp, #44	; 0x2c
 80008e8:	489e      	ldr	r0, [pc, #632]	; (8000b64 <MX_GPIO_Init+0x5a0>)
 80008ea:	f000 fbb5 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008ee:	23f7      	movs	r3, #247	; 0xf7
 80008f0:	930b      	str	r3, [sp, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008f8:	230e      	movs	r3, #14
 80008fa:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008fc:	a90b      	add	r1, sp, #44	; 0x2c
 80008fe:	489a      	ldr	r0, [pc, #616]	; (8000b68 <MX_GPIO_Init+0x5a4>)
 8000900:	f000 fbaa 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000904:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800090e:	2309      	movs	r3, #9
 8000910:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000912:	a90b      	add	r1, sp, #44	; 0x2c
 8000914:	4895      	ldr	r0, [pc, #596]	; (8000b6c <MX_GPIO_Init+0x5a8>)
 8000916:	f000 fb9f 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000926:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800092a:	a90b      	add	r1, sp, #44	; 0x2c
 800092c:	488f      	ldr	r0, [pc, #572]	; (8000b6c <MX_GPIO_Init+0x5a8>)
 800092e:	f000 fb93 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093c:	a90b      	add	r1, sp, #44	; 0x2c
 800093e:	4658      	mov	r0, fp
 8000940:	f000 fb8a 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000944:	2308      	movs	r3, #8
 8000946:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800094e:	230d      	movs	r3, #13
 8000950:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000952:	a90b      	add	r1, sp, #44	; 0x2c
 8000954:	4658      	mov	r0, fp
 8000956:	f000 fb7f 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin|LCD_DISP_Pin;
 800095a:	f241 030c 	movw	r3, #4108	; 0x100c
 800095e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000966:	a90b      	add	r1, sp, #44	; 0x2c
 8000968:	487e      	ldr	r0, [pc, #504]	; (8000b64 <MX_GPIO_Init+0x5a0>)
 800096a:	f000 fb75 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800096e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000972:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000978:	a90b      	add	r1, sp, #44	; 0x2c
 800097a:	487d      	ldr	r0, [pc, #500]	; (8000b70 <MX_GPIO_Init+0x5ac>)
 800097c:	f000 fb6c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000980:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000984:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800098c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000990:	a90b      	add	r1, sp, #44	; 0x2c
 8000992:	4878      	ldr	r0, [pc, #480]	; (8000b74 <MX_GPIO_Init+0x5b0>)
 8000994:	f000 fb60 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000998:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800099c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009a4:	230e      	movs	r3, #14
 80009a6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009a8:	a90b      	add	r1, sp, #44	; 0x2c
 80009aa:	486e      	ldr	r0, [pc, #440]	; (8000b64 <MX_GPIO_Init+0x5a0>)
 80009ac:	f000 fb54 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80009b0:	2308      	movs	r3, #8
 80009b2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80009ba:	a90b      	add	r1, sp, #44	; 0x2c
 80009bc:	486a      	ldr	r0, [pc, #424]	; (8000b68 <MX_GPIO_Init+0x5a4>)
 80009be:	f000 fb4b 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80009c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009ce:	230d      	movs	r3, #13
 80009d0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80009d2:	a90b      	add	r1, sp, #44	; 0x2c
 80009d4:	4865      	ldr	r0, [pc, #404]	; (8000b6c <MX_GPIO_Init+0x5a8>)
 80009d6:	f000 fb3f 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009da:	2310      	movs	r3, #16
 80009dc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	a90b      	add	r1, sp, #44	; 0x2c
 80009e4:	4658      	mov	r0, fp
 80009e6:	f000 fb37 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80009ea:	2304      	movs	r3, #4
 80009ec:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009f4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80009f8:	a90b      	add	r1, sp, #44	; 0x2c
 80009fa:	4658      	mov	r0, fp
 80009fc:	f000 fb2c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000a00:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a04:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a0a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a0c:	485a      	ldr	r0, [pc, #360]	; (8000b78 <MX_GPIO_Init+0x5b4>)
 8000a0e:	f000 fb23 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000a12:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1a:	f04f 0905 	mov.w	r9, #5
 8000a1e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000a22:	a90b      	add	r1, sp, #44	; 0x2c
 8000a24:	484f      	ldr	r0, [pc, #316]	; (8000b64 <MX_GPIO_Init+0x5a0>)
 8000a26:	f000 fb17 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 8000a2a:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a2e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a36:	a90b      	add	r1, sp, #44	; 0x2c
 8000a38:	484f      	ldr	r0, [pc, #316]	; (8000b78 <MX_GPIO_Init+0x5b4>)
 8000a3a:	f000 fb0d 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000a3e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000a42:	930b      	str	r3, [sp, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a4a:	230d      	movs	r3, #13
 8000a4c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a4e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a50:	4849      	ldr	r0, [pc, #292]	; (8000b78 <MX_GPIO_Init+0x5b4>)
 8000a52:	f000 fb01 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000a56:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000a5e:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000a60:	a90b      	add	r1, sp, #44	; 0x2c
 8000a62:	4840      	ldr	r0, [pc, #256]	; (8000b64 <MX_GPIO_Init+0x5a0>)
 8000a64:	f000 faf8 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a72:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a76:	a90b      	add	r1, sp, #44	; 0x2c
 8000a78:	483a      	ldr	r0, [pc, #232]	; (8000b64 <MX_GPIO_Init+0x5a0>)
 8000a7a:	f000 faed 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000a7e:	23c0      	movs	r3, #192	; 0xc0
 8000a80:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	a90b      	add	r1, sp, #44	; 0x2c
 8000a8e:	4838      	ldr	r0, [pc, #224]	; (8000b70 <MX_GPIO_Init+0x5ac>)
 8000a90:	f000 fae2 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000a94:	2310      	movs	r3, #16
 8000a96:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a9e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	a90b      	add	r1, sp, #44	; 0x2c
 8000aa4:	4834      	ldr	r0, [pc, #208]	; (8000b78 <MX_GPIO_Init+0x5b4>)
 8000aa6:	f000 fad7 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000aaa:	2328      	movs	r3, #40	; 0x28
 8000aac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab8:	a90b      	add	r1, sp, #44	; 0x2c
 8000aba:	482f      	ldr	r0, [pc, #188]	; (8000b78 <MX_GPIO_Init+0x5b4>)
 8000abc:	f000 facc 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin|EXT_RST_Pin;
 8000ac0:	23c8      	movs	r3, #200	; 0xc8
 8000ac2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aca:	a90b      	add	r1, sp, #44	; 0x2c
 8000acc:	4827      	ldr	r0, [pc, #156]	; (8000b6c <MX_GPIO_Init+0x5a8>)
 8000ace:	f000 fac3 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ad2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ad6:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad8:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000adc:	a90b      	add	r1, sp, #44	; 0x2c
 8000ade:	4825      	ldr	r0, [pc, #148]	; (8000b74 <MX_GPIO_Init+0x5b0>)
 8000ae0:	f000 faba 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aee:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000af2:	a90b      	add	r1, sp, #44	; 0x2c
 8000af4:	481e      	ldr	r0, [pc, #120]	; (8000b70 <MX_GPIO_Init+0x5ac>)
 8000af6:	f000 faaf 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000afa:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b04:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	a90b      	add	r1, sp, #44	; 0x2c
 8000b0a:	4819      	ldr	r0, [pc, #100]	; (8000b70 <MX_GPIO_Init+0x5ac>)
 8000b0c:	f000 faa4 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b10:	2332      	movs	r3, #50	; 0x32
 8000b12:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1e:	a90b      	add	r1, sp, #44	; 0x2c
 8000b20:	4813      	ldr	r0, [pc, #76]	; (8000b70 <MX_GPIO_Init+0x5ac>)
 8000b22:	f000 fa99 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b26:	2304      	movs	r3, #4
 8000b28:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b30:	2309      	movs	r3, #9
 8000b32:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	a90b      	add	r1, sp, #44	; 0x2c
 8000b36:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_GPIO_Init+0x5b8>)
 8000b38:	f000 fa8e 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000b3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b40:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b48:	2309      	movs	r3, #9
 8000b4a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4c:	a90b      	add	r1, sp, #44	; 0x2c
 8000b4e:	4658      	mov	r0, fp
 8000b50:	f000 fa82 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000b54:	2304      	movs	r3, #4
 8000b56:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	940d      	str	r4, [sp, #52]	; 0x34
 8000b5c:	e010      	b.n	8000b80 <MX_GPIO_Init+0x5bc>
 8000b5e:	bf00      	nop
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40022000 	.word	0x40022000
 8000b68:	40022800 	.word	0x40022800
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40021400 	.word	0x40021400
 8000b78:	40021c00 	.word	0x40021c00
 8000b7c:	40020400 	.word	0x40020400
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000b80:	a90b      	add	r1, sp, #44	; 0x2c
 8000b82:	4828      	ldr	r0, [pc, #160]	; (8000c24 <MX_GPIO_Init+0x660>)
 8000b84:	f000 fa68 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b88:	2386      	movs	r3, #134	; 0x86
 8000b8a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b92:	230b      	movs	r3, #11
 8000b94:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	a90b      	add	r1, sp, #44	; 0x2c
 8000b98:	4823      	ldr	r0, [pc, #140]	; (8000c28 <MX_GPIO_Init+0x664>)
 8000b9a:	f000 fa5d 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000b9e:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba0:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <MX_GPIO_Init+0x664>)
 8000ba8:	f000 fa56 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000bac:	2350      	movs	r3, #80	; 0x50
 8000bae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bb6:	230d      	movs	r3, #13
 8000bb8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	a90b      	add	r1, sp, #44	; 0x2c
 8000bbc:	481a      	ldr	r0, [pc, #104]	; (8000c28 <MX_GPIO_Init+0x664>)
 8000bbe:	f000 fa4b 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000bc2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bc6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc8:	2312      	movs	r3, #18
 8000bca:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd4:	a90b      	add	r1, sp, #44	; 0x2c
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <MX_GPIO_Init+0x668>)
 8000bd8:	f000 fa3e 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000bdc:	2328      	movs	r3, #40	; 0x28
 8000bde:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000be6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	a90b      	add	r1, sp, #44	; 0x2c
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_GPIO_Init+0x664>)
 8000bee:	f000 fa33 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 8000bf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	a90b      	add	r1, sp, #44	; 0x2c
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_GPIO_Init+0x66c>)
 8000c02:	f000 fa29 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MOSI_PWM_D11_Pin;
 8000c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c12:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_MOSI_PWM_D11_GPIO_Port, &GPIO_InitStruct);
 8000c16:	a90b      	add	r1, sp, #44	; 0x2c
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_GPIO_Init+0x66c>)
 8000c1a:	f000 fa1d 	bl	8001058 <HAL_GPIO_Init>

}
 8000c1e:	b011      	add	sp, #68	; 0x44
 8000c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c24:	40021800 	.word	0x40021800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40021c00 	.word	0x40021c00
 8000c30:	40020400 	.word	0x40020400

08000c34 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <Error_Handler+0x2>

08000c38 <MX_USART1_UART_Init>:
{
 8000c38:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <MX_USART1_UART_Init+0x30>)
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART1_UART_Init+0x34>)
 8000c3e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000c40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c44:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	2300      	movs	r3, #0
 8000c48:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4e:	220c      	movs	r2, #12
 8000c50:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c58:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5a:	f001 fcf8 	bl	800264e <HAL_UART_Init>
 8000c5e:	b900      	cbnz	r0, 8000c62 <MX_USART1_UART_Init+0x2a>
}
 8000c60:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c62:	f7ff ffe7 	bl	8000c34 <Error_Handler>
 8000c66:	bf00      	nop
 8000c68:	20000098 	.word	0x20000098
 8000c6c:	40011000 	.word	0x40011000

08000c70 <SystemClock_Config>:
{
 8000c70:	b500      	push	{lr}
 8000c72:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c74:	2230      	movs	r2, #48	; 0x30
 8000c76:	2100      	movs	r1, #0
 8000c78:	a808      	add	r0, sp, #32
 8000c7a:	f002 fdd5 	bl	8003828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	9304      	str	r3, [sp, #16]
 8000c84:	9305      	str	r3, [sp, #20]
 8000c86:	9306      	str	r3, [sp, #24]
 8000c88:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <SystemClock_Config+0xa0>)
 8000c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <SystemClock_Config+0xa4>)
 8000ca0:	6813      	ldr	r3, [r2, #0]
 8000ca2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cbe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cc8:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cca:	2219      	movs	r2, #25
 8000ccc:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cce:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000cd2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd8:	a808      	add	r0, sp, #32
 8000cda:	f000 fabf 	bl	800125c <HAL_RCC_OscConfig>
 8000cde:	b998      	cbnz	r0, 8000d08 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	a803      	add	r0, sp, #12
 8000cfc:	f000 fd1c 	bl	8001738 <HAL_RCC_ClockConfig>
 8000d00:	b920      	cbnz	r0, 8000d0c <SystemClock_Config+0x9c>
}
 8000d02:	b015      	add	sp, #84	; 0x54
 8000d04:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d08:	f7ff ff94 	bl	8000c34 <Error_Handler>
    Error_Handler();
 8000d0c:	f7ff ff92 	bl	8000c34 <Error_Handler>
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <main>:
{
 8000d18:	b508      	push	{r3, lr}
  HAL_Init();
 8000d1a:	f000 f8d3 	bl	8000ec4 <HAL_Init>
  SystemClock_Config();
 8000d1e:	f7ff ffa7 	bl	8000c70 <SystemClock_Config>
  MX_GPIO_Init();
 8000d22:	f7ff fc4f 	bl	80005c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d26:	f7ff ff87 	bl	8000c38 <MX_USART1_UART_Init>
  XF_initialize(20);
 8000d2a:	2014      	movs	r0, #20
 8000d2c:	f002 fc6e 	bl	800360c <XF_initialize>
  Factory_initialize();
 8000d30:	f001 fdba 	bl	80028a8 <Factory_initialize>
  Factory_build();
 8000d34:	f001 fdd2 	bl	80028dc <Factory_build>
    XF_execOnce();
 8000d38:	f002 fc7c 	bl	8003634 <XF_execOnce>
  while (1)
 8000d3c:	e7fc      	b.n	8000d38 <main+0x20>
	...

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_MspInit+0x2c>)
 8000d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d52:	9200      	str	r2, [sp, #0]
 8000d54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d5c:	645a      	str	r2, [r3, #68]	; 0x44
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	b002      	add	sp, #8
 8000d6a:	4770      	bx	lr
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	b0aa      	sub	sp, #168	; 0xa8
 8000d74:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	2100      	movs	r1, #0
 8000d78:	9125      	str	r1, [sp, #148]	; 0x94
 8000d7a:	9126      	str	r1, [sp, #152]	; 0x98
 8000d7c:	9127      	str	r1, [sp, #156]	; 0x9c
 8000d7e:	9128      	str	r1, [sp, #160]	; 0xa0
 8000d80:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d82:	2284      	movs	r2, #132	; 0x84
 8000d84:	a804      	add	r0, sp, #16
 8000d86:	f002 fd4f 	bl	8003828 <memset>
  if(huart->Instance==USART1)
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_UART_MspInit+0xa4>)
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d92:	b02a      	add	sp, #168	; 0xa8
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9a:	a804      	add	r0, sp, #16
 8000d9c:	f000 fda8 	bl	80018f0 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d134      	bne.n	8000e0e <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_UART_MspInit+0xa8>)
 8000da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000da8:	f042 0210 	orr.w	r2, r2, #16
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
 8000dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000db0:	f002 0210 	and.w	r2, r2, #16
 8000db4:	9201      	str	r2, [sp, #4]
 8000db6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dba:	f042 0202 	orr.w	r2, r2, #2
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc2:	f002 0202 	and.w	r2, r2, #2
 8000dc6:	9202      	str	r2, [sp, #8]
 8000dc8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dcc:	f042 0201 	orr.w	r2, r2, #1
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	9303      	str	r3, [sp, #12]
 8000dda:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2602      	movs	r6, #2
 8000de2:	9626      	str	r6, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2400      	movs	r4, #0
 8000de6:	9427      	str	r4, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	9428      	str	r4, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dea:	2507      	movs	r5, #7
 8000dec:	9529      	str	r5, [sp, #164]	; 0xa4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dee:	a925      	add	r1, sp, #148	; 0x94
 8000df0:	480a      	ldr	r0, [pc, #40]	; (8000e1c <HAL_UART_MspInit+0xac>)
 8000df2:	f000 f931 	bl	8001058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfa:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	9626      	str	r6, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	9427      	str	r4, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	9428      	str	r4, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e02:	9529      	str	r5, [sp, #164]	; 0xa4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e04:	a925      	add	r1, sp, #148	; 0x94
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <HAL_UART_MspInit+0xb0>)
 8000e08:	f000 f926 	bl	8001058 <HAL_GPIO_Init>
}
 8000e0c:	e7c1      	b.n	8000d92 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000e0e:	f7ff ff11 	bl	8000c34 <Error_Handler>
 8000e12:	e7c7      	b.n	8000da4 <HAL_UART_MspInit+0x34>
 8000e14:	40011000 	.word	0x40011000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020000 	.word	0x40020000

08000e24 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler>

08000e26 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler>

08000e28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler>

08000e2a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler>

08000e2c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler>

08000e2e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f851 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeMX). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 8000e3a:	f002 f9d0 	bl	80031de <XF_isRunning>
 8000e3e:	b900      	cbnz	r0, 8000e42 <SysTick_Handler+0xe>
  {
      XF_tick();
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bd10      	pop	{r4, pc}
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000e42:	f000 f857 	bl	8000ef4 <HAL_GetTick>
 8000e46:	4604      	mov	r4, r0
 8000e48:	f002 f9c2 	bl	80031d0 <XF_tickIntervalInMilliseconds>
 8000e4c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e50:	fb00 4413 	mls	r4, r0, r3, r4
  if (XF_isRunning() &&
 8000e54:	2c00      	cmp	r4, #0
 8000e56:	d1f3      	bne.n	8000e40 <SysTick_Handler+0xc>
      XF_tick();
 8000e58:	f002 f9a6 	bl	80031a8 <XF_tick>
}
 8000e5c:	e7f0      	b.n	8000e40 <SysTick_Handler+0xc>
	...

08000e60 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SystemInit+0x18>)
 8000e62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e66:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e72:	609a      	str	r2, [r3, #8]
#endif
}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_InitTick+0x40>)
 8000e82:	7818      	ldrb	r0, [r3, #0]
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_InitTick+0x44>)
 8000e8e:	6810      	ldr	r0, [r2, #0]
 8000e90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e94:	f000 f87c 	bl	8000f90 <HAL_SYSTICK_Config>
 8000e98:	b968      	cbnz	r0, 8000eb6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	2c0f      	cmp	r4, #15
 8000e9c:	d901      	bls.n	8000ea2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	e00a      	b.n	8000eb8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eaa:	f000 f83b 	bl	8000f24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eae:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_InitTick+0x40>)
 8000eb0:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000eb6:	2001      	movs	r0, #1
}
 8000eb8:	bd10      	pop	{r4, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <HAL_Init>:
{
 8000ec4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f000 f81a 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff ffd5 	bl	8000e7c <HAL_InitTick>
  HAL_MspInit();
 8000ed2:	f7ff ff35 	bl	8000d40 <HAL_MspInit>
}
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	bd08      	pop	{r3, pc}
	...

08000edc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <HAL_IncTick+0x10>)
 8000ede:	6811      	ldr	r1, [r2, #0]
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_IncTick+0x14>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000011c 	.word	0x2000011c
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ef4:	4b01      	ldr	r3, [pc, #4]	; (8000efc <HAL_GetTick+0x8>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000011c 	.word	0x2000011c

08000f00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4906      	ldr	r1, [pc, #24]	; (8000f1c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000f02:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f08:	041b      	lsls	r3, r3, #16
 8000f0a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	0200      	lsls	r0, r0, #8
 8000f0e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f12:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f14:	4a02      	ldr	r2, [pc, #8]	; (8000f20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f16:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000f18:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	05fa0000 	.word	0x05fa0000

08000f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f24:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_NVIC_SetPriority+0x60>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2e:	f1c3 0c07 	rsb	ip, r3, #7
 8000f32:	f1bc 0f04 	cmp.w	ip, #4
 8000f36:	bf28      	it	cs
 8000f38:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3c:	f103 0e04 	add.w	lr, r3, #4
 8000f40:	f1be 0f06 	cmp.w	lr, #6
 8000f44:	d914      	bls.n	8000f70 <HAL_NVIC_SetPriority+0x4c>
 8000f46:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 3eff 	mov.w	lr, #4294967295
 8000f4c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000f50:	ea21 010c 	bic.w	r1, r1, ip
 8000f54:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f56:	fa0e f303 	lsl.w	r3, lr, r3
 8000f5a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f60:	2800      	cmp	r0, #0
 8000f62:	db07      	blt.n	8000f74 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	0109      	lsls	r1, r1, #4
 8000f66:	b2c9      	uxtb	r1, r1
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_NVIC_SetPriority+0x64>)
 8000f6a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f6c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f70:	2300      	movs	r3, #0
 8000f72:	e7e9      	b.n	8000f48 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	f000 000f 	and.w	r0, r0, #15
 8000f78:	0109      	lsls	r1, r1, #4
 8000f7a:	b2c9      	uxtb	r1, r1
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_NVIC_SetPriority+0x68>)
 8000f7e:	5419      	strb	r1, [r3, r0]
 8000f80:	e7f4      	b.n	8000f6c <HAL_NVIC_SetPriority+0x48>
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	e000e400 	.word	0xe000e400
 8000f8c:	e000ed14 	.word	0xe000ed14

08000f90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	3801      	subs	r0, #1
 8000f92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f96:	d20b      	bcs.n	8000fb0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000f9c:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <HAL_SYSTICK_Config+0x24>)
 8000fa0:	21f0      	movs	r1, #240	; 0xf0
 8000fa2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	2207      	movs	r2, #7
 8000fac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fb0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fb8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000fba:	6805      	ldr	r5, [r0, #0]
 8000fbc:	682c      	ldr	r4, [r5, #0]
 8000fbe:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000fc2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000fc4:	6804      	ldr	r4, [r0, #0]
 8000fc6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fc8:	6883      	ldr	r3, [r0, #8]
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d005      	beq.n	8000fda <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000fce:	6803      	ldr	r3, [r0, #0]
 8000fd0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000fd2:	6803      	ldr	r3, [r0, #0]
 8000fd4:	60da      	str	r2, [r3, #12]
  }
}
 8000fd6:	bc30      	pop	{r4, r5}
 8000fd8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000fda:	6803      	ldr	r3, [r0, #0]
 8000fdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000fde:	6803      	ldr	r3, [r0, #0]
 8000fe0:	60d9      	str	r1, [r3, #12]
 8000fe2:	e7f8      	b.n	8000fd6 <DMA_SetConfig+0x1e>

08000fe4 <HAL_DMA_Start_IT>:
{
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000fea:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000fee:	2801      	cmp	r0, #1
 8000ff0:	d030      	beq.n	8001054 <HAL_DMA_Start_IT+0x70>
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000ffc:	b2c0      	uxtb	r0, r0
 8000ffe:	2801      	cmp	r0, #1
 8001000:	d004      	beq.n	800100c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001002:	2300      	movs	r3, #0
 8001004:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001008:	2002      	movs	r0, #2
}
 800100a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	2002      	movs	r0, #2
 800100e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001012:	2000      	movs	r0, #0
 8001014:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff ffce 	bl	8000fb8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800101c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800101e:	233f      	movs	r3, #63	; 0x3f
 8001020:	4093      	lsls	r3, r2
 8001022:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001024:	6822      	ldr	r2, [r4, #0]
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f043 0316 	orr.w	r3, r3, #22
 800102c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800102e:	6822      	ldr	r2, [r4, #0]
 8001030:	6953      	ldr	r3, [r2, #20]
 8001032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001036:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800103a:	b123      	cbz	r3, 8001046 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800103c:	6822      	ldr	r2, [r4, #0]
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001046:	6822      	ldr	r2, [r4, #0]
 8001048:	6813      	ldr	r3, [r2, #0]
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001050:	2000      	movs	r0, #0
 8001052:	e7da      	b.n	800100a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001054:	2002      	movs	r0, #2
 8001056:	e7d8      	b.n	800100a <HAL_DMA_Start_IT+0x26>

08001058 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001058:	2300      	movs	r3, #0
 800105a:	2b0f      	cmp	r3, #15
 800105c:	f200 80ef 	bhi.w	800123e <HAL_GPIO_Init+0x1e6>
{
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	e061      	b.n	800112a <HAL_GPIO_Init+0xd2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001068:	005e      	lsls	r6, r3, #1
 800106a:	2403      	movs	r4, #3
 800106c:	40b4      	lsls	r4, r6
 800106e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001072:	68cc      	ldr	r4, [r1, #12]
 8001074:	40b4      	lsls	r4, r6
 8001076:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001078:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001080:	684c      	ldr	r4, [r1, #4]
 8001082:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800108a:	6042      	str	r2, [r0, #4]
 800108c:	e05b      	b.n	8001146 <HAL_GPIO_Init+0xee>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800108e:	08dc      	lsrs	r4, r3, #3
 8001090:	3408      	adds	r4, #8
 8001092:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001096:	f003 0207 	and.w	r2, r3, #7
 800109a:	0095      	lsls	r5, r2, #2
 800109c:	220f      	movs	r2, #15
 800109e:	40aa      	lsls	r2, r5
 80010a0:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010a4:	690a      	ldr	r2, [r1, #16]
 80010a6:	40aa      	lsls	r2, r5
 80010a8:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 80010ac:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80010b0:	e05d      	b.n	800116e <HAL_GPIO_Init+0x116>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010b2:	2209      	movs	r2, #9
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 80010b6:	2200      	movs	r2, #0
 80010b8:	fa02 f20e 	lsl.w	r2, r2, lr
 80010bc:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 80010be:	3402      	adds	r4, #2
 80010c0:	4d5f      	ldr	r5, [pc, #380]	; (8001240 <HAL_GPIO_Init+0x1e8>)
 80010c2:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4a5f      	ldr	r2, [pc, #380]	; (8001244 <HAL_GPIO_Init+0x1ec>)
 80010c8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	ea6f 020c 	mvn.w	r2, ip
 80010ce:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d2:	684e      	ldr	r6, [r1, #4]
 80010d4:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80010d8:	d001      	beq.n	80010de <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80010da:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80010de:	4c59      	ldr	r4, [pc, #356]	; (8001244 <HAL_GPIO_Init+0x1ec>)
 80010e0:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80010e2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e8:	684e      	ldr	r6, [r1, #4]
 80010ea:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80010ee:	d001      	beq.n	80010f4 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80010f0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80010f4:	4c53      	ldr	r4, [pc, #332]	; (8001244 <HAL_GPIO_Init+0x1ec>)
 80010f6:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80010f8:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fe:	684e      	ldr	r6, [r1, #4]
 8001100:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001104:	d001      	beq.n	800110a <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8001106:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800110a:	4c4e      	ldr	r4, [pc, #312]	; (8001244 <HAL_GPIO_Init+0x1ec>)
 800110c:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110e:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001110:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001112:	684d      	ldr	r5, [r1, #4]
 8001114:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001118:	d001      	beq.n	800111e <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 800111a:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800111e:	4c49      	ldr	r4, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x1ec>)
 8001120:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001122:	3301      	adds	r3, #1
 8001124:	2b0f      	cmp	r3, #15
 8001126:	f200 8088 	bhi.w	800123a <HAL_GPIO_Init+0x1e2>
    ioposition = ((uint32_t)0x01) << position;
 800112a:	2201      	movs	r2, #1
 800112c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	680c      	ldr	r4, [r1, #0]
 8001130:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001134:	ea32 0404 	bics.w	r4, r2, r4
 8001138:	d1f3      	bne.n	8001122 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113a:	684c      	ldr	r4, [r1, #4]
 800113c:	f004 0403 	and.w	r4, r4, #3
 8001140:	3c01      	subs	r4, #1
 8001142:	2c01      	cmp	r4, #1
 8001144:	d98f      	bls.n	8001066 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001146:	684a      	ldr	r2, [r1, #4]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	2a03      	cmp	r2, #3
 800114e:	d009      	beq.n	8001164 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->PUPDR;
 8001150:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001152:	005d      	lsls	r5, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	40aa      	lsls	r2, r5
 8001158:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800115c:	688a      	ldr	r2, [r1, #8]
 800115e:	40aa      	lsls	r2, r5
 8001160:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001162:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	684a      	ldr	r2, [r1, #4]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	2a02      	cmp	r2, #2
 800116c:	d08f      	beq.n	800108e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800116e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001170:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f20e 	lsl.w	r2, r2, lr
 800117a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800117e:	684a      	ldr	r2, [r1, #4]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	fa02 f20e 	lsl.w	r2, r2, lr
 8001188:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800118a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118c:	684a      	ldr	r2, [r1, #4]
 800118e:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001192:	d0c6      	beq.n	8001122 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <HAL_GPIO_Init+0x1f0>)
 8001196:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001198:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800119c:	6454      	str	r4, [r2, #68]	; 0x44
 800119e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80011a8:	089c      	lsrs	r4, r3, #2
 80011aa:	1ca5      	adds	r5, r4, #2
 80011ac:	4a24      	ldr	r2, [pc, #144]	; (8001240 <HAL_GPIO_Init+0x1e8>)
 80011ae:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011b2:	f003 0203 	and.w	r2, r3, #3
 80011b6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f20e 	lsl.w	r2, r2, lr
 80011c0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <HAL_GPIO_Init+0x1f4>)
 80011c6:	4290      	cmp	r0, r2
 80011c8:	f43f af75 	beq.w	80010b6 <HAL_GPIO_Init+0x5e>
 80011cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d0:	4290      	cmp	r0, r2
 80011d2:	d022      	beq.n	800121a <HAL_GPIO_Init+0x1c2>
 80011d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d8:	4290      	cmp	r0, r2
 80011da:	d020      	beq.n	800121e <HAL_GPIO_Init+0x1c6>
 80011dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e0:	4290      	cmp	r0, r2
 80011e2:	d01e      	beq.n	8001222 <HAL_GPIO_Init+0x1ca>
 80011e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e8:	4290      	cmp	r0, r2
 80011ea:	d01c      	beq.n	8001226 <HAL_GPIO_Init+0x1ce>
 80011ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f0:	4290      	cmp	r0, r2
 80011f2:	d01a      	beq.n	800122a <HAL_GPIO_Init+0x1d2>
 80011f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f8:	4290      	cmp	r0, r2
 80011fa:	d018      	beq.n	800122e <HAL_GPIO_Init+0x1d6>
 80011fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001200:	4290      	cmp	r0, r2
 8001202:	d016      	beq.n	8001232 <HAL_GPIO_Init+0x1da>
 8001204:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001208:	4290      	cmp	r0, r2
 800120a:	d014      	beq.n	8001236 <HAL_GPIO_Init+0x1de>
 800120c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001210:	4290      	cmp	r0, r2
 8001212:	f43f af4e 	beq.w	80010b2 <HAL_GPIO_Init+0x5a>
 8001216:	220a      	movs	r2, #10
 8001218:	e74e      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 800121a:	2201      	movs	r2, #1
 800121c:	e74c      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 800121e:	2202      	movs	r2, #2
 8001220:	e74a      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 8001222:	2203      	movs	r2, #3
 8001224:	e748      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 8001226:	2204      	movs	r2, #4
 8001228:	e746      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 800122a:	2205      	movs	r2, #5
 800122c:	e744      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 800122e:	2206      	movs	r2, #6
 8001230:	e742      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 8001232:	2207      	movs	r2, #7
 8001234:	e740      	b.n	80010b8 <HAL_GPIO_Init+0x60>
 8001236:	2208      	movs	r2, #8
 8001238:	e73e      	b.n	80010b8 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 800123a:	b002      	add	sp, #8
 800123c:	bd70      	pop	{r4, r5, r6, pc}
 800123e:	4770      	bx	lr
 8001240:	40013800 	.word	0x40013800
 8001244:	40013c00 	.word	0x40013c00
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	b10a      	cbz	r2, 8001256 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	6181      	str	r1, [r0, #24]
 8001254:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001256:	0409      	lsls	r1, r1, #16
 8001258:	6181      	str	r1, [r0, #24]
  }
}
 800125a:	4770      	bx	lr

0800125c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800125c:	2800      	cmp	r0, #0
 800125e:	f000 8201 	beq.w	8001664 <HAL_RCC_OscConfig+0x408>
{
 8001262:	b570      	push	{r4, r5, r6, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001268:	6803      	ldr	r3, [r0, #0]
 800126a:	f013 0f01 	tst.w	r3, #1
 800126e:	d029      	beq.n	80012c4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001270:	4b96      	ldr	r3, [pc, #600]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d01a      	beq.n	80012b2 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127c:	4b93      	ldr	r3, [pc, #588]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d00f      	beq.n	80012a8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001288:	6863      	ldr	r3, [r4, #4]
 800128a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128e:	d040      	beq.n	8001312 <HAL_RCC_OscConfig+0xb6>
 8001290:	2b00      	cmp	r3, #0
 8001292:	d155      	bne.n	8001340 <HAL_RCC_OscConfig+0xe4>
 8001294:	4b8d      	ldr	r3, [pc, #564]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e039      	b.n	800131c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a8:	4b88      	ldr	r3, [pc, #544]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012b0:	d0ea      	beq.n	8001288 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4b86      	ldr	r3, [pc, #536]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012ba:	d003      	beq.n	80012c4 <HAL_RCC_OscConfig+0x68>
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 81d2 	beq.w	8001668 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	f013 0f02 	tst.w	r3, #2
 80012ca:	d076      	beq.n	80013ba <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012cc:	4b7f      	ldr	r3, [pc, #508]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f013 0f0c 	tst.w	r3, #12
 80012d4:	d060      	beq.n	8001398 <HAL_RCC_OscConfig+0x13c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d6:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d055      	beq.n	800138e <HAL_RCC_OscConfig+0x132>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012e2:	68e3      	ldr	r3, [r4, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 808b 	beq.w	8001400 <HAL_RCC_OscConfig+0x1a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ea:	4a78      	ldr	r2, [pc, #480]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fdfe 	bl	8000ef4 <HAL_GetTick>
 80012f8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fa:	4b74      	ldr	r3, [pc, #464]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f013 0f02 	tst.w	r3, #2
 8001302:	d174      	bne.n	80013ee <HAL_RCC_OscConfig+0x192>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff fdf6 	bl	8000ef4 <HAL_GetTick>
 8001308:	1b40      	subs	r0, r0, r5
 800130a:	2802      	cmp	r0, #2
 800130c:	d9f5      	bls.n	80012fa <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800130e:	2003      	movs	r0, #3
 8001310:	e1af      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001312:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001314:	6813      	ldr	r3, [r2, #0]
 8001316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800131c:	6863      	ldr	r3, [r4, #4]
 800131e:	b333      	cbz	r3, 800136e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001320:	f7ff fde8 	bl	8000ef4 <HAL_GetTick>
 8001324:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b69      	ldr	r3, [pc, #420]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800132e:	d1c9      	bne.n	80012c4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fde0 	bl	8000ef4 <HAL_GetTick>
 8001334:	1b40      	subs	r0, r0, r5
 8001336:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800133a:	d9f4      	bls.n	8001326 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800133c:	2003      	movs	r0, #3
 800133e:	e198      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d009      	beq.n	800135a <HAL_RCC_OscConfig+0xfe>
 8001346:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e7e0      	b.n	800131c <HAL_RCC_OscConfig+0xc0>
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e7d6      	b.n	800131c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 800136e:	f7ff fdc1 	bl	8000ef4 <HAL_GetTick>
 8001372:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001374:	4b55      	ldr	r3, [pc, #340]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800137c:	d0a2      	beq.n	80012c4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137e:	f7ff fdb9 	bl	8000ef4 <HAL_GetTick>
 8001382:	1b40      	subs	r0, r0, r5
 8001384:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001388:	d9f4      	bls.n	8001374 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 800138a:	2003      	movs	r0, #3
 800138c:	e171      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b4f      	ldr	r3, [pc, #316]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001396:	d1a4      	bne.n	80012e2 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f013 0f02 	tst.w	r3, #2
 80013a0:	d003      	beq.n	80013aa <HAL_RCC_OscConfig+0x14e>
 80013a2:	68e3      	ldr	r3, [r4, #12]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	f040 8161 	bne.w	800166c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013b2:	6921      	ldr	r1, [r4, #16]
 80013b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013b8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f013 0f08 	tst.w	r3, #8
 80013c0:	d046      	beq.n	8001450 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013c2:	6963      	ldr	r3, [r4, #20]
 80013c4:	b383      	cbz	r3, 8001428 <HAL_RCC_OscConfig+0x1cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4a41      	ldr	r2, [pc, #260]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80013c8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fd90 	bl	8000ef4 <HAL_GetTick>
 80013d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80013d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013da:	f013 0f02 	tst.w	r3, #2
 80013de:	d137      	bne.n	8001450 <HAL_RCC_OscConfig+0x1f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fd88 	bl	8000ef4 <HAL_GetTick>
 80013e4:	1b40      	subs	r0, r0, r5
 80013e6:	2802      	cmp	r0, #2
 80013e8:	d9f5      	bls.n	80013d6 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80013ea:	2003      	movs	r0, #3
 80013ec:	e141      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4a37      	ldr	r2, [pc, #220]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80013f0:	6813      	ldr	r3, [r2, #0]
 80013f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013f6:	6921      	ldr	r1, [r4, #16]
 80013f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e7dc      	b.n	80013ba <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8001400:	4a32      	ldr	r2, [pc, #200]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800140a:	f7ff fd73 	bl	8000ef4 <HAL_GetTick>
 800140e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f013 0f02 	tst.w	r3, #2
 8001418:	d0cf      	beq.n	80013ba <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fd6b 	bl	8000ef4 <HAL_GetTick>
 800141e:	1b40      	subs	r0, r0, r5
 8001420:	2802      	cmp	r0, #2
 8001422:	d9f5      	bls.n	8001410 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
 8001426:	e124      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4a28      	ldr	r2, [pc, #160]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 800142a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fd5f 	bl	8000ef4 <HAL_GetTick>
 8001436:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 800143a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143c:	f013 0f02 	tst.w	r3, #2
 8001440:	d006      	beq.n	8001450 <HAL_RCC_OscConfig+0x1f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fd57 	bl	8000ef4 <HAL_GetTick>
 8001446:	1b40      	subs	r0, r0, r5
 8001448:	2802      	cmp	r0, #2
 800144a:	d9f5      	bls.n	8001438 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 800144c:	2003      	movs	r0, #3
 800144e:	e110      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	f013 0f04 	tst.w	r3, #4
 8001456:	d07d      	beq.n	8001554 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001460:	d11e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001466:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001476:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x274>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001480:	d010      	beq.n	80014a4 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001482:	68a3      	ldr	r3, [r4, #8]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d025      	beq.n	80014d4 <HAL_RCC_OscConfig+0x278>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d13b      	bne.n	8001504 <HAL_RCC_OscConfig+0x2a8>
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 800148e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	671a      	str	r2, [r3, #112]	; 0x70
 8001496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001498:	f022 0204 	bic.w	r2, r2, #4
 800149c:	671a      	str	r2, [r3, #112]	; 0x70
 800149e:	e01e      	b.n	80014de <HAL_RCC_OscConfig+0x282>
  FlagStatus pwrclkchanged = RESET;
 80014a0:	2500      	movs	r5, #0
 80014a2:	e7e9      	b.n	8001478 <HAL_RCC_OscConfig+0x21c>
      PWR->CR1 |= PWR_CR1_DBP;
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_RCC_OscConfig+0x274>)
 80014a6:	6813      	ldr	r3, [r2, #0]
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014ae:	f7ff fd21 	bl	8000ef4 <HAL_GetTick>
 80014b2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x274>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014bc:	d1e1      	bne.n	8001482 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fd19 	bl	8000ef4 <HAL_GetTick>
 80014c2:	1b80      	subs	r0, r0, r6
 80014c4:	2864      	cmp	r0, #100	; 0x64
 80014c6:	d9f5      	bls.n	80014b4 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80014c8:	2003      	movs	r0, #3
 80014ca:	e0d2      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 80014d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014de:	68a3      	ldr	r3, [r4, #8]
 80014e0:	b333      	cbz	r3, 8001530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e2:	f7ff fd07 	bl	8000ef4 <HAL_GetTick>
 80014e6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	4b69      	ldr	r3, [pc, #420]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	f013 0f02 	tst.w	r3, #2
 80014f0:	d12f      	bne.n	8001552 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fcff 	bl	8000ef4 <HAL_GetTick>
 80014f6:	1b80      	subs	r0, r0, r6
 80014f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d9f3      	bls.n	80014e8 <HAL_RCC_OscConfig+0x28c>
        {
          return HAL_TIMEOUT;
 8001500:	2003      	movs	r0, #3
 8001502:	e0b6      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	2b05      	cmp	r3, #5
 8001506:	d009      	beq.n	800151c <HAL_RCC_OscConfig+0x2c0>
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 800150a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	671a      	str	r2, [r3, #112]	; 0x70
 8001512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001514:	f022 0204 	bic.w	r2, r2, #4
 8001518:	671a      	str	r2, [r3, #112]	; 0x70
 800151a:	e7e0      	b.n	80014de <HAL_RCC_OscConfig+0x282>
 800151c:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 800151e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001520:	f042 0204 	orr.w	r2, r2, #4
 8001524:	671a      	str	r2, [r3, #112]	; 0x70
 8001526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	671a      	str	r2, [r3, #112]	; 0x70
 800152e:	e7d6      	b.n	80014de <HAL_RCC_OscConfig+0x282>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fce0 	bl	8000ef4 <HAL_GetTick>
 8001534:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001536:	4b56      	ldr	r3, [pc, #344]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	f013 0f02 	tst.w	r3, #2
 800153e:	d008      	beq.n	8001552 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fcd8 	bl	8000ef4 <HAL_GetTick>
 8001544:	1b80      	subs	r0, r0, r6
 8001546:	f241 3388 	movw	r3, #5000	; 0x1388
 800154a:	4298      	cmp	r0, r3
 800154c:	d9f3      	bls.n	8001536 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800154e:	2003      	movs	r0, #3
 8001550:	e08f      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001552:	b9fd      	cbnz	r5, 8001594 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001554:	69a3      	ldr	r3, [r4, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 808a 	beq.w	8001670 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155c:	4a4c      	ldr	r2, [pc, #304]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 800155e:	6892      	ldr	r2, [r2, #8]
 8001560:	f002 020c 	and.w	r2, r2, #12
 8001564:	2a08      	cmp	r2, #8
 8001566:	d058      	beq.n	800161a <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	2b02      	cmp	r3, #2
 800156a:	d019      	beq.n	80015a0 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4a48      	ldr	r2, [pc, #288]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff fcbd 	bl	8000ef4 <HAL_GetTick>
 800157a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157c:	4b44      	ldr	r3, [pc, #272]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001584:	d047      	beq.n	8001616 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fcb5 	bl	8000ef4 <HAL_GetTick>
 800158a:	1b00      	subs	r0, r0, r4
 800158c:	2802      	cmp	r0, #2
 800158e:	d9f5      	bls.n	800157c <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8001590:	2003      	movs	r0, #3
 8001592:	e06e      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4a3e      	ldr	r2, [pc, #248]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 8001596:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	e7d9      	b.n	8001554 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80015a0:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015aa:	f7ff fca3 	bl	8000ef4 <HAL_GetTick>
 80015ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015b8:	d006      	beq.n	80015c8 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fc9b 	bl	8000ef4 <HAL_GetTick>
 80015be:	1b40      	subs	r0, r0, r5
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d9f5      	bls.n	80015b0 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 80015c4:	2003      	movs	r0, #3
 80015c6:	e054      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c8:	69e3      	ldr	r3, [r4, #28]
 80015ca:	6a22      	ldr	r2, [r4, #32]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015d6:	0852      	lsrs	r2, r2, #1
 80015d8:	3a01      	subs	r2, #1
 80015da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 80015ea:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc7e 	bl	8000ef4 <HAL_GetTick>
 80015f8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fc76 	bl	8000ef4 <HAL_GetTick>
 8001608:	1b00      	subs	r0, r0, r4
 800160a:	2802      	cmp	r0, #2
 800160c:	d9f5      	bls.n	80015fa <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800160e:	2003      	movs	r0, #3
 8001610:	e02f      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001612:	2000      	movs	r0, #0
 8001614:	e02d      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 8001616:	2000      	movs	r0, #0
 8001618:	e02b      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
      pll_config = RCC->PLLCFGR;
 800161a:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x434>)
 800161c:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800161e:	2b01      	cmp	r3, #1
 8001620:	d029      	beq.n	8001676 <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001626:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001628:	428b      	cmp	r3, r1
 800162a:	d126      	bne.n	800167a <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800162c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8001630:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	428b      	cmp	r3, r1
 8001634:	d123      	bne.n	800167e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001636:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800163c:	4013      	ands	r3, r2
 800163e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001642:	d11e      	bne.n	8001682 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001644:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001648:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800164e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001652:	d118      	bne.n	8001686 <HAL_RCC_OscConfig+0x42a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001654:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001658:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800165a:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 800165e:	d114      	bne.n	800168a <HAL_RCC_OscConfig+0x42e>
  return HAL_OK;
 8001660:	2000      	movs	r0, #0
 8001662:	e006      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001664:	2001      	movs	r0, #1
}
 8001666:	4770      	bx	lr
        return HAL_ERROR;
 8001668:	2001      	movs	r0, #1
 800166a:	e002      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001670:	2000      	movs	r0, #0
}
 8001672:	b002      	add	sp, #8
 8001674:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001676:	2001      	movs	r0, #1
 8001678:	e7fb      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 800167a:	2001      	movs	r0, #1
 800167c:	e7f9      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 800167e:	2001      	movs	r0, #1
 8001680:	e7f7      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 8001682:	2001      	movs	r0, #1
 8001684:	e7f5      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 8001686:	2001      	movs	r0, #1
 8001688:	e7f3      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 800168a:	2001      	movs	r0, #1
 800168c:	e7f1      	b.n	8001672 <HAL_RCC_OscConfig+0x416>
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001694:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_GetSysClockFreq+0x98>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d03f      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x8e>
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d13f      	bne.n	8001726 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_GetSysClockFreq+0x98>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80016b4:	d012      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_GetSysClockFreq+0x98>)
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016c0:	2300      	movs	r3, #0
 80016c2:	fba1 0100 	umull	r0, r1, r1, r0
 80016c6:	f7fe fdfb 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_RCC_GetSysClockFreq+0x98>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016d2:	3301      	adds	r3, #1
 80016d4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80016d6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80016da:	e025      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_RCC_GetSysClockFreq+0x98>)
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80016e4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80016e8:	ebb1 000c 	subs.w	r0, r1, ip
 80016ec:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80016f0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80016f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016f8:	0181      	lsls	r1, r0, #6
 80016fa:	1a09      	subs	r1, r1, r0
 80016fc:	eb63 030e 	sbc.w	r3, r3, lr
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001706:	00c9      	lsls	r1, r1, #3
 8001708:	eb11 0c0c 	adds.w	ip, r1, ip
 800170c:	f143 0300 	adc.w	r3, r3, #0
 8001710:	0299      	lsls	r1, r3, #10
 8001712:	2300      	movs	r3, #0
 8001714:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001718:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800171c:	f7fe fdd0 	bl	80002c0 <__aeabi_uldivmod>
 8001720:	e7d3      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001724:	e000      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001728:	bd08      	pop	{r3, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	017d7840 	.word	0x017d7840
 8001734:	00f42400 	.word	0x00f42400

08001738 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001738:	2800      	cmp	r0, #0
 800173a:	f000 80a0 	beq.w	800187e <HAL_RCC_ClockConfig+0x146>
{
 800173e:	b570      	push	{r4, r5, r6, lr}
 8001740:	460d      	mov	r5, r1
 8001742:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b52      	ldr	r3, [pc, #328]	; (8001890 <HAL_RCC_ClockConfig+0x158>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	428b      	cmp	r3, r1
 800174e:	d20b      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <HAL_RCC_ClockConfig+0x158>)
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f023 030f 	bic.w	r3, r3, #15
 8001758:	430b      	orrs	r3, r1
 800175a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	428b      	cmp	r3, r1
 8001764:	f040 808d 	bne.w	8001882 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	f013 0f02 	tst.w	r3, #2
 800176e:	d017      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	f013 0f04 	tst.w	r3, #4
 8001774:	d004      	beq.n	8001780 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001776:	4a47      	ldr	r2, [pc, #284]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 8001778:	6893      	ldr	r3, [r2, #8]
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	f013 0f08 	tst.w	r3, #8
 8001786:	d004      	beq.n	8001792 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4a42      	ldr	r2, [pc, #264]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 800178a:	6893      	ldr	r3, [r2, #8]
 800178c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001790:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001792:	4a40      	ldr	r2, [pc, #256]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 8001794:	6893      	ldr	r3, [r2, #8]
 8001796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800179a:	68a1      	ldr	r1, [r4, #8]
 800179c:	430b      	orrs	r3, r1
 800179e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	f013 0f01 	tst.w	r3, #1
 80017a6:	d031      	beq.n	800180c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a8:	6863      	ldr	r3, [r4, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d020      	beq.n	80017f0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d025      	beq.n	80017fe <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4a38      	ldr	r2, [pc, #224]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	f012 0f02 	tst.w	r2, #2
 80017ba:	d064      	beq.n	8001886 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017bc:	4935      	ldr	r1, [pc, #212]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 80017be:	688a      	ldr	r2, [r1, #8]
 80017c0:	f022 0203 	bic.w	r2, r2, #3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80017c8:	f7ff fb94 	bl	8000ef4 <HAL_GetTick>
 80017cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	6862      	ldr	r2, [r4, #4]
 80017d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017dc:	d016      	beq.n	800180c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7ff fb89 	bl	8000ef4 <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80017e8:	4298      	cmp	r0, r3
 80017ea:	d9f0      	bls.n	80017ce <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80017ec:	2003      	movs	r0, #3
 80017ee:	e045      	b.n	800187c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	4a28      	ldr	r2, [pc, #160]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017f8:	d1e0      	bne.n	80017bc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	e03e      	b.n	800187c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001806:	d1d9      	bne.n	80017bc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	e037      	b.n	800187c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_ClockConfig+0x158>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	42ab      	cmp	r3, r5
 8001816:	d90a      	bls.n	800182e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_RCC_ClockConfig+0x158>)
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	f023 030f 	bic.w	r3, r3, #15
 8001820:	432b      	orrs	r3, r5
 8001822:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	42ab      	cmp	r3, r5
 800182c:	d12d      	bne.n	800188a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	f013 0f04 	tst.w	r3, #4
 8001834:	d006      	beq.n	8001844 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 8001838:	6893      	ldr	r3, [r2, #8]
 800183a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800183e:	68e1      	ldr	r1, [r4, #12]
 8001840:	430b      	orrs	r3, r1
 8001842:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	f013 0f08 	tst.w	r3, #8
 800184a:	d007      	beq.n	800185c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800184c:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 800184e:	6893      	ldr	r3, [r2, #8]
 8001850:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001854:	6921      	ldr	r1, [r4, #16]
 8001856:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800185a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185c:	f7ff ff1a 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_RCC_ClockConfig+0x160>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	40d8      	lsrs	r0, r3
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_ClockConfig+0x164>)
 8001870:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x168>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f7ff fb01 	bl	8000e7c <HAL_InitTick>
  return HAL_OK;
 800187a:	2000      	movs	r0, #0
}
 800187c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
}
 8001880:	4770      	bx	lr
      return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	e7fa      	b.n	800187c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e7f8      	b.n	800187c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800188a:	2001      	movs	r0, #1
 800188c:	e7f6      	b.n	800187c <HAL_RCC_ClockConfig+0x144>
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00
 8001894:	40023800 	.word	0x40023800
 8001898:	08004c8c 	.word	0x08004c8c
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008

080018a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018a4:	4b01      	ldr	r3, [pc, #4]	; (80018ac <HAL_RCC_GetHCLKFreq+0x8>)
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000

080018b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018b2:	f7ff fff7 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018c2:	40d8      	lsrs	r0, r3
 80018c4:	bd08      	pop	{r3, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08004c9c 	.word	0x08004c9c

080018d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d2:	f7ff ffe7 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018de:	4a03      	ldr	r2, [pc, #12]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018e2:	40d8      	lsrs	r0, r3
 80018e4:	bd08      	pop	{r3, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08004c9c 	.word	0x08004c9c

080018f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80018f6:	6806      	ldr	r6, [r0, #0]
 80018f8:	f016 0601 	ands.w	r6, r6, #1
 80018fc:	d00d      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80018fe:	4ba7      	ldr	r3, [pc, #668]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001910:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8139 	beq.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 8001918:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800191a:	6825      	ldr	r5, [r4, #0]
 800191c:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8001920:	d011      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001922:	4a9e      	ldr	r2, [pc, #632]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001924:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001928:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800192c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800192e:	430b      	orrs	r3, r1
 8001930:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001934:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800193a:	f000 8128 	beq.w	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8127 	beq.w	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 8001944:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800194c:	d00f      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800194e:	4a93      	ldr	r2, [pc, #588]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001950:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001954:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001958:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800195a:	430b      	orrs	r3, r1
 800195c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001966:	f000 8116 	beq.w	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800196a:	b903      	cbnz	r3, 800196e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 800196c:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001974:	d000      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8001976:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001978:	f013 0f20 	tst.w	r3, #32
 800197c:	f040 8110 	bne.w	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f013 0f10 	tst.w	r3, #16
 8001986:	d00c      	beq.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001988:	4b84      	ldr	r3, [pc, #528]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800198a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800198e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001996:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800199a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800199c:	430a      	orrs	r2, r1
 800199e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80019a8:	d008      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019aa:	4a7c      	ldr	r2, [pc, #496]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80019b6:	430b      	orrs	r3, r1
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80019c2:	d008      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80019c4:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019ca:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80019ce:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80019d0:	430b      	orrs	r3, r1
 80019d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019dc:	d008      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80019de:	4a6f      	ldr	r2, [pc, #444]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80019e8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80019ea:	430b      	orrs	r3, r1
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019f6:	d008      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019f8:	4a68      	ldr	r2, [pc, #416]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a02:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001a04:	430b      	orrs	r3, r1
 8001a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a10:	d008      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a12:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a18:	f023 0303 	bic.w	r3, r3, #3
 8001a1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a2c:	4a5b      	ldr	r2, [pc, #364]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a32:	f023 030c 	bic.w	r3, r3, #12
 8001a36:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a44:	d008      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a46:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a50:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001a52:	430b      	orrs	r3, r1
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a6a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a78:	d008      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a7a:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a84:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001a86:	430b      	orrs	r3, r1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a94:	4a41      	ldr	r2, [pc, #260]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a9a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001aae:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001ab0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ab4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001aba:	430b      	orrs	r3, r1
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001ac6:	d008      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ac8:	4a34      	ldr	r2, [pc, #208]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001aca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ad2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ae0:	d008      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ae2:	4a2e      	ldr	r2, [pc, #184]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001ae4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001aec:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001aee:	430b      	orrs	r3, r1
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001afe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b02:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001b06:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001b0e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b14:	f000 80aa 	beq.w	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	f013 0f08 	tst.w	r3, #8
 8001b1e:	d000      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8001b20:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001b22:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001b26:	d008      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001b2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b2e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001b32:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001b34:	430b      	orrs	r3, r1
 8001b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001b40:	d009      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001b44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001b50:	430b      	orrs	r3, r1
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b56:	b926      	cbnz	r6, 8001b62 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b5e:	f000 8105 	beq.w	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b62:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001b64:	6813      	ldr	r3, [r2, #0]
 8001b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f9c2 	bl	8000ef4 <HAL_GetTick>
 8001b70:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b7a:	d079      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b7c:	f7ff f9ba 	bl	8000ef4 <HAL_GetTick>
 8001b80:	1b80      	subs	r0, r0, r6
 8001b82:	2864      	cmp	r0, #100	; 0x64
 8001b84:	d9f5      	bls.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b86:	2003      	movs	r0, #3
 8001b88:	e0f3      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 8001b8a:	2601      	movs	r6, #1
 8001b8c:	e6c5      	b.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001b8e:	2601      	movs	r6, #1
 8001b90:	e6d5      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8001b92:	2501      	movs	r5, #1
 8001b94:	e6d7      	b.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8001b96:	2601      	movs	r6, #1
 8001b98:	e6e7      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001bb4:	4a7b      	ldr	r2, [pc, #492]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8001bb6:	6813      	ldr	r3, [r2, #0]
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001bbe:	f7ff f999 	bl	8000ef4 <HAL_GetTick>
 8001bc2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bc4:	4b77      	ldr	r3, [pc, #476]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bce:	f7ff f991 	bl	8000ef4 <HAL_GetTick>
 8001bd2:	1bc0      	subs	r0, r0, r7
 8001bd4:	2864      	cmp	r0, #100	; 0x64
 8001bd6:	d9f5      	bls.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 8001bd8:	2003      	movs	r0, #3
 8001bda:	e0ca      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bdc:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001be4:	d015      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8001be6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001be8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d010      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bf8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001bfa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001bfe:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c02:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001c06:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c08:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	f013 0f01 	tst.w	r3, #1
 8001c10:	d112      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c14:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c18:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c1c:	d01d      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8001c1e:	4a60      	ldr	r2, [pc, #384]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001c20:	6893      	ldr	r3, [r2, #8]
 8001c22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c26:	6093      	str	r3, [r2, #8]
 8001c28:	495d      	ldr	r1, [pc, #372]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001c2a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001c2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c2e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001c32:	4313      	orrs	r3, r2
 8001c34:	670b      	str	r3, [r1, #112]	; 0x70
 8001c36:	e6a3      	b.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8001c38:	f7ff f95c 	bl	8000ef4 <HAL_GetTick>
 8001c3c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3e:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	f013 0f02 	tst.w	r3, #2
 8001c46:	d1e4      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff f954 	bl	8000ef4 <HAL_GetTick>
 8001c4c:	1bc0      	subs	r0, r0, r7
 8001c4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c52:	4298      	cmp	r0, r3
 8001c54:	d9f3      	bls.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 8001c56:	2003      	movs	r0, #3
 8001c58:	e08b      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c5a:	4851      	ldr	r0, [pc, #324]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001c5c:	6882      	ldr	r2, [r0, #8]
 8001c5e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001c62:	4951      	ldr	r1, [pc, #324]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8001c64:	4019      	ands	r1, r3
 8001c66:	430a      	orrs	r2, r1
 8001c68:	6082      	str	r2, [r0, #8]
 8001c6a:	e7dd      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 8001c6c:	2501      	movs	r5, #1
 8001c6e:	e753      	b.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	f013 0f01 	tst.w	r3, #1
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8001c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c7a:	b98b      	cbnz	r3, 8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001c7e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c82:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c86:	6860      	ldr	r0, [r4, #4]
 8001c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c90:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001c94:	430b      	orrs	r3, r1
 8001c96:	68a1      	ldr	r1, [r4, #8]
 8001c98:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001c9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001ca6:	d003      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8001ca8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001caa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001cae:	d006      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8001cb0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001cb4:	d01e      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cbc:	d11a      	bne.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cbe:	4a38      	ldr	r2, [pc, #224]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001cc0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cc4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001cc8:	6860      	ldr	r0, [r4, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cd2:	68e0      	ldr	r0, [r4, #12]
 8001cd4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001cd8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ce2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ce6:	f023 031f 	bic.w	r3, r3, #31
 8001cea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cec:	3901      	subs	r1, #1
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001cfa:	d011      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001cfe:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d02:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d06:	6866      	ldr	r6, [r4, #4]
 8001d08:	6923      	ldr	r3, [r4, #16]
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001d10:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001d14:	4303      	orrs	r3, r0
 8001d16:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d26:	d00d      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d28:	6862      	ldr	r2, [r4, #4]
 8001d2a:	6923      	ldr	r3, [r4, #16]
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d32:	68e2      	ldr	r2, [r4, #12]
 8001d34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d38:	68a2      	ldr	r2, [r4, #8]
 8001d3a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001d40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d44:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d4e:	f7ff f8d1 	bl	8000ef4 <HAL_GetTick>
 8001d52:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d5e:	f7ff f8c9 	bl	8000ef4 <HAL_GetTick>
 8001d62:	1b80      	subs	r0, r0, r6
 8001d64:	2864      	cmp	r0, #100	; 0x64
 8001d66:	d9f5      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d68:	2003      	movs	r0, #3
 8001d6a:	e002      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001d6c:	2d01      	cmp	r5, #1
 8001d6e:	d002      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d70:	2000      	movs	r0, #0
}
 8001d72:	b003      	add	sp, #12
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001d78:	6813      	ldr	r3, [r2, #0]
 8001d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d80:	f7ff f8b8 	bl	8000ef4 <HAL_GetTick>
 8001d84:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001d8e:	d00d      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d90:	f7ff f8b0 	bl	8000ef4 <HAL_GetTick>
 8001d94:	1b40      	subs	r0, r0, r5
 8001d96:	2864      	cmp	r0, #100	; 0x64
 8001d98:	d9f5      	bls.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	e7e9      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000
 8001da8:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001db2:	d001      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8001db4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001db6:	b122      	cbz	r2, 8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001db8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001dbc:	d01d      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dc0:	b9db      	cbnz	r3, 8001dfa <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001dc2:	4a35      	ldr	r2, [pc, #212]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001dc4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001dc8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001dcc:	6960      	ldr	r0, [r4, #20]
 8001dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dd6:	69a0      	ldr	r0, [r4, #24]
 8001dd8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001ddc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001de0:	430b      	orrs	r3, r1
 8001de2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001de6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001dea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001dee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001df0:	3901      	subs	r1, #1
 8001df2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001df6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001e00:	d003      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001e02:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e08:	d031      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	f013 0f08 	tst.w	r3, #8
 8001e10:	d019      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e12:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001e14:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e1c:	6960      	ldr	r0, [r4, #20]
 8001e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e22:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e26:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	69e1      	ldr	r1, [r4, #28]
 8001e2e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001e32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e40:	430b      	orrs	r3, r1
 8001e42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001e46:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001e48:	6813      	ldr	r3, [r2, #0]
 8001e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e50:	f7ff f850 	bl	8000ef4 <HAL_GetTick>
 8001e54:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001e5e:	d119      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e60:	f7ff f848 	bl	8000ef4 <HAL_GetTick>
 8001e64:	1b00      	subs	r0, r0, r4
 8001e66:	2864      	cmp	r0, #100	; 0x64
 8001e68:	d9f5      	bls.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	e781      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001e70:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e74:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e78:	6965      	ldr	r5, [r4, #20]
 8001e7a:	6a23      	ldr	r3, [r4, #32]
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001e82:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001e86:	4303      	orrs	r3, r0
 8001e88:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e92:	e7ba      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 8001e94:	2000      	movs	r0, #0
 8001e96:	e76c      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8001e98:	40023800 	.word	0x40023800

08001e9c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e9c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9e:	e852 3f00 	ldrex	r3, [r2]
 8001ea2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea6:	e842 3100 	strex	r1, r3, [r2]
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	d1f6      	bne.n	8001e9c <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	6783      	str	r3, [r0, #120]	; 0x78
}
 8001eb2:	4770      	bx	lr

08001eb4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001eb4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb6:	e852 3f00 	ldrex	r3, [r2]
 8001eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ebe:	e842 3100 	strex	r1, r3, [r2]
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d1f6      	bne.n	8001eb4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec8:	f102 0308 	add.w	r3, r2, #8
 8001ecc:	e853 3f00 	ldrex	r3, [r3]
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	e842 3100 	strex	r1, r3, [r2]
 8001eda:	2900      	cmp	r1, #0
 8001edc:	d1f3      	bne.n	8001ec6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ede:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d005      	beq.n	8001ef0 <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001eec:	6643      	str	r3, [r0, #100]	; 0x64
}
 8001eee:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ef0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef2:	e852 3f00 	ldrex	r3, [r2]
 8001ef6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efa:	e842 3100 	strex	r1, r3, [r2]
 8001efe:	2900      	cmp	r1, #0
 8001f00:	d1f6      	bne.n	8001ef0 <UART_EndRxTransfer+0x3c>
 8001f02:	e7ef      	b.n	8001ee4 <UART_EndRxTransfer+0x30>

08001f04 <HAL_UART_Transmit_DMA>:
{
 8001f04:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001f06:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8001f08:	2a20      	cmp	r2, #32
 8001f0a:	d148      	bne.n	8001f9e <HAL_UART_Transmit_DMA+0x9a>
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf18      	it	ne
 8001f14:	2900      	cmpne	r1, #0
 8001f16:	d044      	beq.n	8001fa2 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 8001f18:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 8001f1c:	2a01      	cmp	r2, #1
 8001f1e:	d042      	beq.n	8001fa6 <HAL_UART_Transmit_DMA+0xa2>
 8001f20:	2201      	movs	r2, #1
 8001f22:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    huart->pTxBuffPtr  = pData;
 8001f26:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001f28:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8001f2c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	2200      	movs	r2, #0
 8001f32:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f36:	2221      	movs	r2, #33	; 0x21
 8001f38:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8001f3a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001f3c:	b1da      	cbz	r2, 8001f76 <HAL_UART_Transmit_DMA+0x72>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f3e:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_UART_Transmit_DMA+0xa8>)
 8001f40:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001f42:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001f44:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_UART_Transmit_DMA+0xac>)
 8001f46:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001f48:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001f4a:	491a      	ldr	r1, [pc, #104]	; (8001fb4 <HAL_UART_Transmit_DMA+0xb0>)
 8001f4c:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 8001f4e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001f50:	2100      	movs	r1, #0
 8001f52:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001f54:	6802      	ldr	r2, [r0, #0]
 8001f56:	3228      	adds	r2, #40	; 0x28
 8001f58:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001f5a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001f5c:	f7ff f842 	bl	8000fe4 <HAL_DMA_Start_IT>
 8001f60:	b148      	cbz	r0, 8001f76 <HAL_UART_Transmit_DMA+0x72>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001f62:	2310      	movs	r3, #16
 8001f64:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	67a3      	str	r3, [r4, #120]	; 0x78
        return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
 8001f74:	e012      	b.n	8001f9c <HAL_UART_Transmit_DMA+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f82:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f84:	f102 0308 	add.w	r3, r2, #8
 8001f88:	e853 3f00 	ldrex	r3, [r3]
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f90:	3208      	adds	r2, #8
 8001f92:	e842 3100 	strex	r1, r3, [r2]
 8001f96:	2900      	cmp	r1, #0
 8001f98:	d1f3      	bne.n	8001f82 <HAL_UART_Transmit_DMA+0x7e>
    return HAL_OK;
 8001f9a:	2000      	movs	r0, #0
}
 8001f9c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001f9e:	2002      	movs	r0, #2
}
 8001fa0:	4770      	bx	lr
      return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	e7fa      	b.n	8001f9c <HAL_UART_Transmit_DMA+0x98>
    __HAL_LOCK(huart);
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	e7f8      	b.n	8001f9c <HAL_UART_Transmit_DMA+0x98>
 8001faa:	bf00      	nop
 8001fac:	08001fbb 	.word	0x08001fbb
 8001fb0:	08002003 	.word	0x08002003
 8001fb4:	0800200f 	.word	0x0800200f

08001fb8 <HAL_UART_TxCpltCallback>:
}
 8001fb8:	4770      	bx	lr

08001fba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001fba:	b508      	push	{r3, lr}
 8001fbc:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001fbe:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc6:	d018      	beq.n	8001ffa <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001fce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd0:	f102 0308 	add.w	r3, r2, #8
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fdc:	3208      	adds	r2, #8
 8001fde:	e842 3100 	strex	r1, r3, [r2]
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f3      	bne.n	8001fce <UART_DMATransmitCplt+0x14>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fe6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe8:	e852 3f00 	ldrex	r3, [r2]
 8001fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff0:	e842 3100 	strex	r1, r3, [r2]
 8001ff4:	2900      	cmp	r1, #0
 8001ff6:	d1f6      	bne.n	8001fe6 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001ff8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001ffa:	f7ff ffdd 	bl	8001fb8 <HAL_UART_TxCpltCallback>
}
 8001ffe:	e7fb      	b.n	8001ff8 <UART_DMATransmitCplt+0x3e>

08002000 <HAL_UART_TxHalfCpltCallback>:
}
 8002000:	4770      	bx	lr

08002002 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002002:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002004:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002006:	f7ff fffb 	bl	8002000 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800200a:	bd08      	pop	{r3, pc}

0800200c <HAL_UART_ErrorCallback>:
}
 800200c:	4770      	bx	lr

0800200e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800200e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002010:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002012:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002014:	6fe5      	ldr	r5, [r4, #124]	; 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800201e:	d001      	beq.n	8002024 <UART_DMAError+0x16>
 8002020:	2a21      	cmp	r2, #33	; 0x21
 8002022:	d010      	beq.n	8002046 <UART_DMAError+0x38>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f013 0f40 	tst.w	r3, #64	; 0x40
 800202c:	d001      	beq.n	8002032 <UART_DMAError+0x24>
 800202e:	2d22      	cmp	r5, #34	; 0x22
 8002030:	d010      	beq.n	8002054 <UART_DMAError+0x46>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002032:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff ffe4 	bl	800200c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002044:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff ff25 	bl	8001e9c <UART_EndTxTransfer>
 8002052:	e7e7      	b.n	8002024 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff ff2a 	bl	8001eb4 <UART_EndRxTransfer>
 8002060:	e7e7      	b.n	8002032 <UART_DMAError+0x24>
	...

08002064 <UART_SetConfig>:
{
 8002064:	b510      	push	{r4, lr}
 8002066:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002068:	6883      	ldr	r3, [r0, #8]
 800206a:	6902      	ldr	r2, [r0, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	6942      	ldr	r2, [r0, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	69c2      	ldr	r2, [r0, #28]
 8002074:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002076:	6801      	ldr	r1, [r0, #0]
 8002078:	6808      	ldr	r0, [r1, #0]
 800207a:	4a93      	ldr	r2, [pc, #588]	; (80022c8 <UART_SetConfig+0x264>)
 800207c:	4002      	ands	r2, r0
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002082:	6822      	ldr	r2, [r4, #0]
 8002084:	6853      	ldr	r3, [r2, #4]
 8002086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800208a:	68e1      	ldr	r1, [r4, #12]
 800208c:	430b      	orrs	r3, r1
 800208e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002090:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8002092:	6a23      	ldr	r3, [r4, #32]
 8002094:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002096:	6821      	ldr	r1, [r4, #0]
 8002098:	688b      	ldr	r3, [r1, #8]
 800209a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	4a89      	ldr	r2, [pc, #548]	; (80022cc <UART_SetConfig+0x268>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <UART_SetConfig+0x7a>
 80020aa:	4a89      	ldr	r2, [pc, #548]	; (80022d0 <UART_SetConfig+0x26c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d029      	beq.n	8002104 <UART_SetConfig+0xa0>
 80020b0:	4a88      	ldr	r2, [pc, #544]	; (80022d4 <UART_SetConfig+0x270>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d03e      	beq.n	8002134 <UART_SetConfig+0xd0>
 80020b6:	4a88      	ldr	r2, [pc, #544]	; (80022d8 <UART_SetConfig+0x274>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d062      	beq.n	8002182 <UART_SetConfig+0x11e>
 80020bc:	4a87      	ldr	r2, [pc, #540]	; (80022dc <UART_SetConfig+0x278>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d071      	beq.n	80021a6 <UART_SetConfig+0x142>
 80020c2:	4a87      	ldr	r2, [pc, #540]	; (80022e0 <UART_SetConfig+0x27c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	f000 8083 	beq.w	80021d0 <UART_SetConfig+0x16c>
 80020ca:	4a86      	ldr	r2, [pc, #536]	; (80022e4 <UART_SetConfig+0x280>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f000 8094 	beq.w	80021fa <UART_SetConfig+0x196>
 80020d2:	4a85      	ldr	r2, [pc, #532]	; (80022e8 <UART_SetConfig+0x284>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	f000 80a5 	beq.w	8002224 <UART_SetConfig+0x1c0>
 80020da:	2310      	movs	r3, #16
 80020dc:	e03a      	b.n	8002154 <UART_SetConfig+0xf0>
 80020de:	4b83      	ldr	r3, [pc, #524]	; (80022ec <UART_SetConfig+0x288>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d809      	bhi.n	8002100 <UART_SetConfig+0x9c>
 80020ec:	e8df f003 	tbb	[pc, r3]
 80020f0:	06ae0402 	.word	0x06ae0402
 80020f4:	2301      	movs	r3, #1
 80020f6:	e02d      	b.n	8002154 <UART_SetConfig+0xf0>
 80020f8:	2304      	movs	r3, #4
 80020fa:	e02b      	b.n	8002154 <UART_SetConfig+0xf0>
 80020fc:	2308      	movs	r3, #8
 80020fe:	e029      	b.n	8002154 <UART_SetConfig+0xf0>
 8002100:	2310      	movs	r3, #16
 8002102:	e027      	b.n	8002154 <UART_SetConfig+0xf0>
 8002104:	4b79      	ldr	r3, [pc, #484]	; (80022ec <UART_SetConfig+0x288>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d80e      	bhi.n	8002130 <UART_SetConfig+0xcc>
 8002112:	e8df f003 	tbb	[pc, r3]
 8002116:	0d07      	.short	0x0d07
 8002118:	0d090d0d 	.word	0x0d090d0d
 800211c:	0d9d0d0d 	.word	0x0d9d0d0d
 8002120:	0d0d      	.short	0x0d0d
 8002122:	0b          	.byte	0x0b
 8002123:	00          	.byte	0x00
 8002124:	2300      	movs	r3, #0
 8002126:	e015      	b.n	8002154 <UART_SetConfig+0xf0>
 8002128:	2304      	movs	r3, #4
 800212a:	e013      	b.n	8002154 <UART_SetConfig+0xf0>
 800212c:	2308      	movs	r3, #8
 800212e:	e011      	b.n	8002154 <UART_SetConfig+0xf0>
 8002130:	2310      	movs	r3, #16
 8002132:	e00f      	b.n	8002154 <UART_SetConfig+0xf0>
 8002134:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <UART_SetConfig+0x288>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800213e:	2b20      	cmp	r3, #32
 8002140:	f000 8088 	beq.w	8002254 <UART_SetConfig+0x1f0>
 8002144:	d819      	bhi.n	800217a <UART_SetConfig+0x116>
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8086 	beq.w	8002258 <UART_SetConfig+0x1f4>
 800214c:	2b10      	cmp	r3, #16
 800214e:	f040 8085 	bne.w	800225c <UART_SetConfig+0x1f8>
 8002152:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002154:	69e0      	ldr	r0, [r4, #28]
 8002156:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800215a:	f000 80ab 	beq.w	80022b4 <UART_SetConfig+0x250>
    switch (clocksource)
 800215e:	2b08      	cmp	r3, #8
 8002160:	f200 810c 	bhi.w	800237c <UART_SetConfig+0x318>
 8002164:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002168:	00fb00e8 	.word	0x00fb00e8
 800216c:	010a00e6 	.word	0x010a00e6
 8002170:	010a00fe 	.word	0x010a00fe
 8002174:	010a010a 	.word	0x010a010a
 8002178:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 800217a:	2b30      	cmp	r3, #48	; 0x30
 800217c:	d170      	bne.n	8002260 <UART_SetConfig+0x1fc>
 800217e:	2308      	movs	r3, #8
 8002180:	e7e8      	b.n	8002154 <UART_SetConfig+0xf0>
 8002182:	4b5a      	ldr	r3, [pc, #360]	; (80022ec <UART_SetConfig+0x288>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800218c:	2b80      	cmp	r3, #128	; 0x80
 800218e:	d069      	beq.n	8002264 <UART_SetConfig+0x200>
 8002190:	d805      	bhi.n	800219e <UART_SetConfig+0x13a>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d068      	beq.n	8002268 <UART_SetConfig+0x204>
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d168      	bne.n	800226c <UART_SetConfig+0x208>
 800219a:	2304      	movs	r3, #4
 800219c:	e7da      	b.n	8002154 <UART_SetConfig+0xf0>
 800219e:	2bc0      	cmp	r3, #192	; 0xc0
 80021a0:	d166      	bne.n	8002270 <UART_SetConfig+0x20c>
 80021a2:	2308      	movs	r3, #8
 80021a4:	e7d6      	b.n	8002154 <UART_SetConfig+0xf0>
 80021a6:	4b51      	ldr	r3, [pc, #324]	; (80022ec <UART_SetConfig+0x288>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b4:	d05e      	beq.n	8002274 <UART_SetConfig+0x210>
 80021b6:	d806      	bhi.n	80021c6 <UART_SetConfig+0x162>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d05d      	beq.n	8002278 <UART_SetConfig+0x214>
 80021bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c0:	d15c      	bne.n	800227c <UART_SetConfig+0x218>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e7c6      	b.n	8002154 <UART_SetConfig+0xf0>
 80021c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ca:	d159      	bne.n	8002280 <UART_SetConfig+0x21c>
 80021cc:	2308      	movs	r3, #8
 80021ce:	e7c1      	b.n	8002154 <UART_SetConfig+0xf0>
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <UART_SetConfig+0x288>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021de:	d051      	beq.n	8002284 <UART_SetConfig+0x220>
 80021e0:	d806      	bhi.n	80021f0 <UART_SetConfig+0x18c>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d050      	beq.n	8002288 <UART_SetConfig+0x224>
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ea:	d14f      	bne.n	800228c <UART_SetConfig+0x228>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e7b1      	b.n	8002154 <UART_SetConfig+0xf0>
 80021f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021f4:	d14c      	bne.n	8002290 <UART_SetConfig+0x22c>
 80021f6:	2308      	movs	r3, #8
 80021f8:	e7ac      	b.n	8002154 <UART_SetConfig+0xf0>
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <UART_SetConfig+0x288>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002208:	d044      	beq.n	8002294 <UART_SetConfig+0x230>
 800220a:	d806      	bhi.n	800221a <UART_SetConfig+0x1b6>
 800220c:	2b00      	cmp	r3, #0
 800220e:	d043      	beq.n	8002298 <UART_SetConfig+0x234>
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002214:	d142      	bne.n	800229c <UART_SetConfig+0x238>
 8002216:	2304      	movs	r3, #4
 8002218:	e79c      	b.n	8002154 <UART_SetConfig+0xf0>
 800221a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800221e:	d13f      	bne.n	80022a0 <UART_SetConfig+0x23c>
 8002220:	2308      	movs	r3, #8
 8002222:	e797      	b.n	8002154 <UART_SetConfig+0xf0>
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <UART_SetConfig+0x288>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800222e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002232:	d037      	beq.n	80022a4 <UART_SetConfig+0x240>
 8002234:	d805      	bhi.n	8002242 <UART_SetConfig+0x1de>
 8002236:	b3bb      	cbz	r3, 80022a8 <UART_SetConfig+0x244>
 8002238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800223c:	d136      	bne.n	80022ac <UART_SetConfig+0x248>
 800223e:	2304      	movs	r3, #4
 8002240:	e788      	b.n	8002154 <UART_SetConfig+0xf0>
 8002242:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002246:	d133      	bne.n	80022b0 <UART_SetConfig+0x24c>
 8002248:	2308      	movs	r3, #8
 800224a:	e783      	b.n	8002154 <UART_SetConfig+0xf0>
 800224c:	2302      	movs	r3, #2
 800224e:	e781      	b.n	8002154 <UART_SetConfig+0xf0>
 8002250:	2302      	movs	r3, #2
 8002252:	e77f      	b.n	8002154 <UART_SetConfig+0xf0>
 8002254:	2302      	movs	r3, #2
 8002256:	e77d      	b.n	8002154 <UART_SetConfig+0xf0>
 8002258:	2300      	movs	r3, #0
 800225a:	e77b      	b.n	8002154 <UART_SetConfig+0xf0>
 800225c:	2310      	movs	r3, #16
 800225e:	e779      	b.n	8002154 <UART_SetConfig+0xf0>
 8002260:	2310      	movs	r3, #16
 8002262:	e777      	b.n	8002154 <UART_SetConfig+0xf0>
 8002264:	2302      	movs	r3, #2
 8002266:	e775      	b.n	8002154 <UART_SetConfig+0xf0>
 8002268:	2300      	movs	r3, #0
 800226a:	e773      	b.n	8002154 <UART_SetConfig+0xf0>
 800226c:	2310      	movs	r3, #16
 800226e:	e771      	b.n	8002154 <UART_SetConfig+0xf0>
 8002270:	2310      	movs	r3, #16
 8002272:	e76f      	b.n	8002154 <UART_SetConfig+0xf0>
 8002274:	2302      	movs	r3, #2
 8002276:	e76d      	b.n	8002154 <UART_SetConfig+0xf0>
 8002278:	2300      	movs	r3, #0
 800227a:	e76b      	b.n	8002154 <UART_SetConfig+0xf0>
 800227c:	2310      	movs	r3, #16
 800227e:	e769      	b.n	8002154 <UART_SetConfig+0xf0>
 8002280:	2310      	movs	r3, #16
 8002282:	e767      	b.n	8002154 <UART_SetConfig+0xf0>
 8002284:	2302      	movs	r3, #2
 8002286:	e765      	b.n	8002154 <UART_SetConfig+0xf0>
 8002288:	2301      	movs	r3, #1
 800228a:	e763      	b.n	8002154 <UART_SetConfig+0xf0>
 800228c:	2310      	movs	r3, #16
 800228e:	e761      	b.n	8002154 <UART_SetConfig+0xf0>
 8002290:	2310      	movs	r3, #16
 8002292:	e75f      	b.n	8002154 <UART_SetConfig+0xf0>
 8002294:	2302      	movs	r3, #2
 8002296:	e75d      	b.n	8002154 <UART_SetConfig+0xf0>
 8002298:	2300      	movs	r3, #0
 800229a:	e75b      	b.n	8002154 <UART_SetConfig+0xf0>
 800229c:	2310      	movs	r3, #16
 800229e:	e759      	b.n	8002154 <UART_SetConfig+0xf0>
 80022a0:	2310      	movs	r3, #16
 80022a2:	e757      	b.n	8002154 <UART_SetConfig+0xf0>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e755      	b.n	8002154 <UART_SetConfig+0xf0>
 80022a8:	2300      	movs	r3, #0
 80022aa:	e753      	b.n	8002154 <UART_SetConfig+0xf0>
 80022ac:	2310      	movs	r3, #16
 80022ae:	e751      	b.n	8002154 <UART_SetConfig+0xf0>
 80022b0:	2310      	movs	r3, #16
 80022b2:	e74f      	b.n	8002154 <UART_SetConfig+0xf0>
    switch (clocksource)
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d85b      	bhi.n	8002370 <UART_SetConfig+0x30c>
 80022b8:	e8df f003 	tbb	[pc, r3]
 80022bc:	5a3a341a 	.word	0x5a3a341a
 80022c0:	5a5a5a37 	.word	0x5a5a5a37
 80022c4:	1e          	.byte	0x1e
 80022c5:	00          	.byte	0x00
 80022c6:	bf00      	nop
 80022c8:	efff69f3 	.word	0xefff69f3
 80022cc:	40011000 	.word	0x40011000
 80022d0:	40004400 	.word	0x40004400
 80022d4:	40004800 	.word	0x40004800
 80022d8:	40004c00 	.word	0x40004c00
 80022dc:	40005000 	.word	0x40005000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	40007800 	.word	0x40007800
 80022e8:	40007c00 	.word	0x40007c00
 80022ec:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 80022f0:	f7ff fade 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d03d      	beq.n	8002374 <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022f8:	6862      	ldr	r2, [r4, #4]
 80022fa:	0853      	lsrs	r3, r2, #1
 80022fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002300:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002304:	f1a0 0210 	sub.w	r2, r0, #16
 8002308:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800230c:	429a      	cmp	r2, r3
 800230e:	d833      	bhi.n	8002378 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002310:	b283      	uxth	r3, r0
 8002312:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002316:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800231a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	60d8      	str	r0, [r3, #12]
 8002320:	2000      	movs	r0, #0
 8002322:	e030      	b.n	8002386 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002324:	f7ff fad4 	bl	80018d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002328:	e7e4      	b.n	80022f4 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 800232a:	f7ff f9b3 	bl	8001694 <HAL_RCC_GetSysClockFreq>
        break;
 800232e:	e7e1      	b.n	80022f4 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 8002330:	4817      	ldr	r0, [pc, #92]	; (8002390 <UART_SetConfig+0x32c>)
 8002332:	e7e1      	b.n	80022f8 <UART_SetConfig+0x294>
    switch (clocksource)
 8002334:	4816      	ldr	r0, [pc, #88]	; (8002390 <UART_SetConfig+0x32c>)
 8002336:	e002      	b.n	800233e <UART_SetConfig+0x2da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002338:	f7ff faba 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800233c:	b300      	cbz	r0, 8002380 <UART_SetConfig+0x31c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002344:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002348:	f1a0 0210 	sub.w	r2, r0, #16
 800234c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002350:	429a      	cmp	r2, r3
 8002352:	d817      	bhi.n	8002384 <UART_SetConfig+0x320>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	b280      	uxth	r0, r0
 8002358:	60d8      	str	r0, [r3, #12]
 800235a:	2000      	movs	r0, #0
 800235c:	e013      	b.n	8002386 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 800235e:	f7ff fab7 	bl	80018d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002362:	e7eb      	b.n	800233c <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002364:	f7ff f996 	bl	8001694 <HAL_RCC_GetSysClockFreq>
        break;
 8002368:	e7e8      	b.n	800233c <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 800236a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800236e:	e7e6      	b.n	800233e <UART_SetConfig+0x2da>
    switch (clocksource)
 8002370:	2001      	movs	r0, #1
 8002372:	e008      	b.n	8002386 <UART_SetConfig+0x322>
 8002374:	2000      	movs	r0, #0
 8002376:	e006      	b.n	8002386 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8002378:	2001      	movs	r0, #1
 800237a:	e004      	b.n	8002386 <UART_SetConfig+0x322>
    switch (clocksource)
 800237c:	2001      	movs	r0, #1
 800237e:	e002      	b.n	8002386 <UART_SetConfig+0x322>
 8002380:	2000      	movs	r0, #0
 8002382:	e000      	b.n	8002386 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8002384:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800238a:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800238c:	bd10      	pop	{r4, pc}
 800238e:	bf00      	nop
 8002390:	00f42400 	.word	0x00f42400

08002394 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002396:	f013 0f01 	tst.w	r3, #1
 800239a:	d006      	beq.n	80023aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800239c:	6802      	ldr	r2, [r0, #0]
 800239e:	6853      	ldr	r3, [r2, #4]
 80023a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023a4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80023a6:	430b      	orrs	r3, r1
 80023a8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023ac:	f013 0f02 	tst.w	r3, #2
 80023b0:	d006      	beq.n	80023c0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023b2:	6802      	ldr	r2, [r0, #0]
 80023b4:	6853      	ldr	r3, [r2, #4]
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80023bc:	430b      	orrs	r3, r1
 80023be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023c2:	f013 0f04 	tst.w	r3, #4
 80023c6:	d006      	beq.n	80023d6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c8:	6802      	ldr	r2, [r0, #0]
 80023ca:	6853      	ldr	r3, [r2, #4]
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80023d2:	430b      	orrs	r3, r1
 80023d4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023d8:	f013 0f08 	tst.w	r3, #8
 80023dc:	d006      	beq.n	80023ec <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023de:	6802      	ldr	r2, [r0, #0]
 80023e0:	6853      	ldr	r3, [r2, #4]
 80023e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023e6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023ee:	f013 0f10 	tst.w	r3, #16
 80023f2:	d006      	beq.n	8002402 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023f4:	6802      	ldr	r2, [r0, #0]
 80023f6:	6893      	ldr	r3, [r2, #8]
 80023f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023fc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80023fe:	430b      	orrs	r3, r1
 8002400:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002402:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002404:	f013 0f20 	tst.w	r3, #32
 8002408:	d006      	beq.n	8002418 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800240a:	6802      	ldr	r2, [r0, #0]
 800240c:	6893      	ldr	r3, [r2, #8]
 800240e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002412:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002414:	430b      	orrs	r3, r1
 8002416:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800241a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800241e:	d00a      	beq.n	8002436 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002420:	6802      	ldr	r2, [r0, #0]
 8002422:	6853      	ldr	r3, [r2, #4]
 8002424:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002428:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800242a:	430b      	orrs	r3, r1
 800242c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800242e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002434:	d00b      	beq.n	800244e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002436:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002438:	f013 0f80 	tst.w	r3, #128	; 0x80
 800243c:	d006      	beq.n	800244c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800243e:	6802      	ldr	r2, [r0, #0]
 8002440:	6853      	ldr	r3, [r2, #4]
 8002442:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002446:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002448:	430b      	orrs	r3, r1
 800244a:	6053      	str	r3, [r2, #4]
}
 800244c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800244e:	6802      	ldr	r2, [r0, #0]
 8002450:	6853      	ldr	r3, [r2, #4]
 8002452:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002456:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002458:	430b      	orrs	r3, r1
 800245a:	6053      	str	r3, [r2, #4]
 800245c:	e7eb      	b.n	8002436 <UART_AdvFeatureConfig+0xa2>

0800245e <UART_WaitOnFlagUntilTimeout>:
{
 800245e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002462:	4605      	mov	r5, r0
 8002464:	460f      	mov	r7, r1
 8002466:	4616      	mov	r6, r2
 8002468:	4699      	mov	r9, r3
 800246a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246e:	682c      	ldr	r4, [r5, #0]
 8002470:	69e4      	ldr	r4, [r4, #28]
 8002472:	ea37 0304 	bics.w	r3, r7, r4
 8002476:	bf0c      	ite	eq
 8002478:	f04f 0c01 	moveq.w	ip, #1
 800247c:	f04f 0c00 	movne.w	ip, #0
 8002480:	45b4      	cmp	ip, r6
 8002482:	d153      	bne.n	800252c <UART_WaitOnFlagUntilTimeout+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8002484:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002488:	d0f1      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7fe fd33 	bl	8000ef4 <HAL_GetTick>
 800248e:	eba0 0009 	sub.w	r0, r0, r9
 8002492:	4540      	cmp	r0, r8
 8002494:	d82d      	bhi.n	80024f2 <UART_WaitOnFlagUntilTimeout+0x94>
 8002496:	f1b8 0f00 	cmp.w	r8, #0
 800249a:	d02a      	beq.n	80024f2 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f012 0f04 	tst.w	r2, #4
 80024a4:	d0e3      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80024ac:	d0df      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024b4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	e852 3f00 	ldrex	r3, [r2]
 80024ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024be:	e842 3100 	strex	r1, r3, [r2]
 80024c2:	2900      	cmp	r1, #0
 80024c4:	d1f6      	bne.n	80024b4 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c8:	f102 0308 	add.w	r3, r2, #8
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d4:	3208      	adds	r2, #8
 80024d6:	e842 3100 	strex	r1, r3, [r2]
 80024da:	2900      	cmp	r1, #0
 80024dc:	d1f3      	bne.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80024de:	2320      	movs	r3, #32
 80024e0:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80024e2:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024e4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80024e8:	2300      	movs	r3, #0
 80024ea:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 80024ee:	2003      	movs	r0, #3
 80024f0:	e01d      	b.n	800252e <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024f2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f4:	e852 3f00 	ldrex	r3, [r2]
 80024f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fc:	e842 3100 	strex	r1, r3, [r2]
 8002500:	2900      	cmp	r1, #0
 8002502:	d1f6      	bne.n	80024f2 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002504:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002506:	f102 0308 	add.w	r3, r2, #8
 800250a:	e853 3f00 	ldrex	r3, [r3]
 800250e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002512:	3208      	adds	r2, #8
 8002514:	e842 3100 	strex	r1, r3, [r2]
 8002518:	2900      	cmp	r1, #0
 800251a:	d1f3      	bne.n	8002504 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800251c:	2320      	movs	r3, #32
 800251e:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002520:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002522:	2300      	movs	r3, #0
 8002524:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8002528:	2003      	movs	r0, #3
 800252a:	e000      	b.n	800252e <UART_WaitOnFlagUntilTimeout+0xd0>
  return HAL_OK;
 800252c:	2000      	movs	r0, #0
}
 800252e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002532 <HAL_UART_Transmit>:
{
 8002532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800253a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800253c:	2b20      	cmp	r3, #32
 800253e:	d156      	bne.n	80025ee <HAL_UART_Transmit+0xbc>
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
 8002544:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002546:	2a00      	cmp	r2, #0
 8002548:	bf18      	it	ne
 800254a:	2900      	cmpne	r1, #0
 800254c:	d053      	beq.n	80025f6 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800254e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002552:	2b01      	cmp	r3, #1
 8002554:	d051      	beq.n	80025fa <HAL_UART_Transmit+0xc8>
 8002556:	2301      	movs	r3, #1
 8002558:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002562:	2321      	movs	r3, #33	; 0x21
 8002564:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002566:	f7fe fcc5 	bl	8000ef4 <HAL_GetTick>
 800256a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800256c:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002570:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002574:	68a3      	ldr	r3, [r4, #8]
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257a:	d005      	beq.n	8002588 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 800257c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002580:	2300      	movs	r3, #0
 8002582:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002586:	e012      	b.n	80025ae <HAL_UART_Transmit+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	b113      	cbz	r3, 8002592 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 800258c:	f04f 0800 	mov.w	r8, #0
 8002590:	e7f6      	b.n	8002580 <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 8002592:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002594:	2500      	movs	r5, #0
 8002596:	e7f3      	b.n	8002580 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002598:	f815 2b01 	ldrb.w	r2, [r5], #1
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80025a0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80025a4:	b292      	uxth	r2, r2
 80025a6:	3a01      	subs	r2, #1
 80025a8:	b292      	uxth	r2, r2
 80025aa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025ae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	b183      	cbz	r3, 80025d8 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b6:	9600      	str	r6, [sp, #0]
 80025b8:	463b      	mov	r3, r7
 80025ba:	2200      	movs	r2, #0
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff ff4d 	bl	800245e <UART_WaitOnFlagUntilTimeout>
 80025c4:	b9d8      	cbnz	r0, 80025fe <HAL_UART_Transmit+0xcc>
      if (pdata8bits == NULL)
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	d1e6      	bne.n	8002598 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ca:	f838 3b02 	ldrh.w	r3, [r8], #2
 80025ce:	6822      	ldr	r2, [r4, #0]
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80025d6:	e7e3      	b.n	80025a0 <HAL_UART_Transmit+0x6e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d8:	9600      	str	r6, [sp, #0]
 80025da:	463b      	mov	r3, r7
 80025dc:	2200      	movs	r2, #0
 80025de:	2140      	movs	r1, #64	; 0x40
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff ff3c 	bl	800245e <UART_WaitOnFlagUntilTimeout>
 80025e6:	b960      	cbnz	r0, 8002602 <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 80025e8:	2320      	movs	r3, #32
 80025ea:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80025ec:	e000      	b.n	80025f0 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80025ee:	2002      	movs	r0, #2
}
 80025f0:	b002      	add	sp, #8
 80025f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80025f6:	2001      	movs	r0, #1
 80025f8:	e7fa      	b.n	80025f0 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80025fa:	2002      	movs	r0, #2
 80025fc:	e7f8      	b.n	80025f0 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80025fe:	2003      	movs	r0, #3
 8002600:	e7f6      	b.n	80025f0 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8002602:	2003      	movs	r0, #3
 8002604:	e7f4      	b.n	80025f0 <HAL_UART_Transmit+0xbe>

08002606 <UART_CheckIdleState>:
{
 8002606:	b510      	push	{r4, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002612:	f7fe fc6f 	bl	8000ef4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f013 0f08 	tst.w	r3, #8
 800261e:	d108      	bne.n	8002632 <UART_CheckIdleState+0x2c>
  huart->gState = HAL_UART_STATE_READY;
 8002620:	2320      	movs	r3, #32
 8002622:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002624:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002626:	2000      	movs	r0, #0
 8002628:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800262a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 800262e:	b002      	add	sp, #8
 8002630:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002632:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	4603      	mov	r3, r0
 800263a:	2200      	movs	r2, #0
 800263c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002640:	4620      	mov	r0, r4
 8002642:	f7ff ff0c 	bl	800245e <UART_WaitOnFlagUntilTimeout>
 8002646:	2800      	cmp	r0, #0
 8002648:	d0ea      	beq.n	8002620 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800264a:	2003      	movs	r0, #3
 800264c:	e7ef      	b.n	800262e <UART_CheckIdleState+0x28>

0800264e <HAL_UART_Init>:
  if (huart == NULL)
 800264e:	b368      	cbz	r0, 80026ac <HAL_UART_Init+0x5e>
{
 8002650:	b510      	push	{r4, lr}
 8002652:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002654:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002656:	b303      	cbz	r3, 800269a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002658:	2324      	movs	r3, #36	; 0x24
 800265a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff fcfc 	bl	8002064 <UART_SetConfig>
 800266c:	2801      	cmp	r0, #1
 800266e:	d013      	beq.n	8002698 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002672:	b9bb      	cbnz	r3, 80026a4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002674:	6822      	ldr	r2, [r4, #0]
 8002676:	6853      	ldr	r3, [r2, #4]
 8002678:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800267c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6893      	ldr	r3, [r2, #8]
 8002682:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002686:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff ffb7 	bl	8002606 <UART_CheckIdleState>
}
 8002698:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800269a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800269e:	f7fe fb67 	bl	8000d70 <HAL_UART_MspInit>
 80026a2:	e7d9      	b.n	8002658 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff fe75 	bl	8002394 <UART_AdvFeatureConfig>
 80026aa:	e7e3      	b.n	8002674 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
}
 80026ae:	4770      	bx	lr

080026b0 <_ZN14StateMachine02D1Ev>:
    _currentState = STATE_INITIAL;

    Trace::out("Called constructor of StateMachine02 object '%d' (obj%02d)", id, id);
}

StateMachine02::~StateMachine02()
 80026b0:	b510      	push	{r4, lr}
 80026b2:	4604      	mov	r4, r0
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <_ZN14StateMachine02D1Ev+0x1c>)
 80026b6:	6003      	str	r3, [r0, #0]
{
    Trace::out("obj%02d: Called destructor", id);
 80026b8:	6901      	ldr	r1, [r0, #16]
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <_ZN14StateMachine02D1Ev+0x20>)
 80026bc:	f000 f950 	bl	8002960 <_ZN5Trace3outEPKcz>
StateMachine02::~StateMachine02()
 80026c0:	4620      	mov	r0, r4
 80026c2:	f000 fa91 	bl	8002be8 <_ZN10XFBehaviorD1Ev>
}
 80026c6:	4620      	mov	r0, r4
 80026c8:	bd10      	pop	{r4, pc}
 80026ca:	bf00      	nop
 80026cc:	08004cac 	.word	0x08004cac
 80026d0:	08004dd4 	.word	0x08004dd4

080026d4 <_ZN14StateMachine02D0Ev>:
StateMachine02::~StateMachine02()
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
}
 80026d8:	f7ff ffea 	bl	80026b0 <_ZN14StateMachine02D1Ev>
 80026dc:	2118      	movs	r1, #24
 80026de:	4620      	mov	r0, r4
 80026e0:	f000 ffb2 	bl	8003648 <_ZdlPvj>
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <_ZN14StateMachine0212processEventEv>:

/**
 * Implements state machine behavior.
 */
XFEventStatus StateMachine02::processEvent()
{
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	4604      	mov	r4, r0
    eEventStatus eventStatus = XFEventStatus::Unknown;

    switch (_currentState)
 80026ec:	7b03      	ldrb	r3, [r0, #12]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d867      	bhi.n	80027c4 <_ZN14StateMachine0212processEventEv+0xdc>
 80026f4:	e8df f003 	tbb	[pc, r3]
 80026f8:	59341a02 	.word	0x59341a02
    {
    case STATE_INITIAL:
        {
            if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 80026fc:	f000 fa88 	bl	8002c10 <_ZNK10XFBehavior15getCurrentEventEv>

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 8002700:	7905      	ldrb	r5, [r0, #4]
 8002702:	2d01      	cmp	r5, #1
 8002704:	d002      	beq.n	800270c <_ZN14StateMachine0212processEventEv+0x24>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 8002706:	2500      	movs	r5, #0
    default:
        break;
    }

    return eventStatus;
}
 8002708:	4628      	mov	r0, r5
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    counter = 5;
 800270c:	2305      	movs	r3, #5
 800270e:	6163      	str	r3, [r4, #20]
                GEN(XFDefaultTransition());
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	68df      	ldr	r7, [r3, #12]
 8002714:	2010      	movs	r0, #16
 8002716:	f000 ffa8 	bl	800366a <_Znwj>
 800271a:	4606      	mov	r6, r0
 800271c:	f000 fae6 	bl	8002cec <_ZN19XFDefaultTransitionC1Ev>
 8002720:	4631      	mov	r1, r6
 8002722:	4620      	mov	r0, r4
 8002724:	47b8      	blx	r7
                _currentState = STATE_PRINT_COUNT;
 8002726:	2302      	movs	r3, #2
 8002728:	7323      	strb	r3, [r4, #12]
                eventStatus = XFEventStatus::Consumed;
 800272a:	e7ed      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
            if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition)
 800272c:	f000 fa70 	bl	8002c10 <_ZNK10XFBehavior15getCurrentEventEv>
 8002730:	7903      	ldrb	r3, [r0, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d001      	beq.n	800273a <_ZN14StateMachine0212processEventEv+0x52>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 8002736:	2500      	movs	r5, #0
 8002738:	e7e6      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
                    Trace::out("obj%02d: counter %d", id, counter);
 800273a:	6962      	ldr	r2, [r4, #20]
 800273c:	6921      	ldr	r1, [r4, #16]
 800273e:	4822      	ldr	r0, [pc, #136]	; (80027c8 <_ZN14StateMachine0212processEventEv+0xe0>)
 8002740:	f000 f90e 	bl	8002960 <_ZN5Trace3outEPKcz>
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 8002744:	4620      	mov	r0, r4
 8002746:	f000 fa65 	bl	8002c14 <_ZN10XFBehavior13getDispatcherEv>
 800274a:	6803      	ldr	r3, [r0, #0]
 800274c:	68dd      	ldr	r5, [r3, #12]
 800274e:	4623      	mov	r3, r4
 8002750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002754:	2101      	movs	r1, #1
 8002756:	47a8      	blx	r5
                _currentState = STATE_CONDITION_01;
 8002758:	2303      	movs	r3, #3
 800275a:	7323      	strb	r3, [r4, #12]
                eventStatus = XFEventStatus::Consumed;
 800275c:	2501      	movs	r5, #1
 800275e:	e7d3      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
            if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8002760:	f000 fa56 	bl	8002c10 <_ZNK10XFBehavior15getCurrentEventEv>
 8002764:	7903      	ldrb	r3, [r0, #4]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d001      	beq.n	800276e <_ZN14StateMachine0212processEventEv+0x86>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 800276a:	2500      	movs	r5, #0
 800276c:	e7cc      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
                getCurrentTimeout()->getId() == Timeout_PRINT_COUNT_id)
 800276e:	4620      	mov	r0, r4
 8002770:	f000 fa61 	bl	8002c36 <_ZN10XFBehavior17getCurrentTimeoutEv>
    /** \brief Sets pointer to behavioral class (see #pBehavior_).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 8002774:	6883      	ldr	r3, [r0, #8]
            if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <_ZN14StateMachine0212processEventEv+0x96>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 800277a:	2500      	movs	r5, #0
 800277c:	e7c4      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
                    counter--;
 800277e:	6963      	ldr	r3, [r4, #20]
 8002780:	3b01      	subs	r3, #1
 8002782:	6163      	str	r3, [r4, #20]
                if (counter)
 8002784:	b173      	cbz	r3, 80027a4 <_ZN14StateMachine0212processEventEv+0xbc>
                    _currentState = STATE_PRINT_COUNT;
 8002786:	2302      	movs	r3, #2
 8002788:	7323      	strb	r3, [r4, #12]
                GEN(XFDefaultTransition());
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	68de      	ldr	r6, [r3, #12]
 800278e:	2010      	movs	r0, #16
 8002790:	f000 ff6b 	bl	800366a <_Znwj>
 8002794:	4605      	mov	r5, r0
 8002796:	f000 faa9 	bl	8002cec <_ZN19XFDefaultTransitionC1Ev>
 800279a:	4629      	mov	r1, r5
 800279c:	4620      	mov	r0, r4
 800279e:	47b0      	blx	r6
                eventStatus = XFEventStatus::Consumed;
 80027a0:	2501      	movs	r5, #1
 80027a2:	e7b1      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
                    _currentState = STATE_TERMINATION_01;
 80027a4:	2304      	movs	r3, #4
 80027a6:	7323      	strb	r3, [r4, #12]
 80027a8:	e7ef      	b.n	800278a <_ZN14StateMachine0212processEventEv+0xa2>
            if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition)
 80027aa:	f000 fa31 	bl	8002c10 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 80027ae:	7903      	ldrb	r3, [r0, #4]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d001      	beq.n	80027b8 <_ZN14StateMachine0212processEventEv+0xd0>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 80027b4:	2500      	movs	r5, #0
 80027b6:	e7a7      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
                Trace::out("obj%02d: Terminating State Machine", id);
 80027b8:	6921      	ldr	r1, [r4, #16]
 80027ba:	4804      	ldr	r0, [pc, #16]	; (80027cc <_ZN14StateMachine0212processEventEv+0xe4>)
 80027bc:	f000 f8d0 	bl	8002960 <_ZN5Trace3outEPKcz>
                eventStatus = XFEventStatus::Terminate;
 80027c0:	2508      	movs	r5, #8
 80027c2:	e7a1      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
    switch (_currentState)
 80027c4:	2500      	movs	r5, #0
 80027c6:	e79f      	b.n	8002708 <_ZN14StateMachine0212processEventEv+0x20>
 80027c8:	08004df0 	.word	0x08004df0
 80027cc:	08004e04 	.word	0x08004e04

080027d0 <_ZN14StateMachine02C1Ev>:
StateMachine02::StateMachine02() :
 80027d0:	b510      	push	{r4, lr}
 80027d2:	4604      	mov	r4, r0
    counter(0)
 80027d4:	f000 f9f2 	bl	8002bbc <_ZN10XFBehaviorC1Ev>
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <_ZN14StateMachine02C1Ev+0x2c>)
 80027da:	6023      	str	r3, [r4, #0]
    id(nextId++),
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <_ZN14StateMachine02C1Ev+0x30>)
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	1c4a      	adds	r2, r1, #1
 80027e2:	601a      	str	r2, [r3, #0]
    counter(0)
 80027e4:	6121      	str	r1, [r4, #16]
 80027e6:	2300      	movs	r3, #0
 80027e8:	6163      	str	r3, [r4, #20]
    _currentState = STATE_INITIAL;
 80027ea:	2301      	movs	r3, #1
 80027ec:	7323      	strb	r3, [r4, #12]
    Trace::out("Called constructor of StateMachine02 object '%d' (obj%02d)", id, id);
 80027ee:	460a      	mov	r2, r1
 80027f0:	4804      	ldr	r0, [pc, #16]	; (8002804 <_ZN14StateMachine02C1Ev+0x34>)
 80027f2:	f000 f8b5 	bl	8002960 <_ZN5Trace3outEPKcz>
}
 80027f6:	4620      	mov	r0, r4
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	bf00      	nop
 80027fc:	08004cac 	.word	0x08004cac
 8002800:	2000000c 	.word	0x2000000c
 8002804:	08004e28 	.word	0x08004e28

08002808 <_ZN13TestFactory0213getStaticTaskEv>:
}

// static
StateMachine02 &TestFactory02::getStaticTask()
{
    static StateMachine02 staticTask;
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <_ZN13TestFactory0213getStaticTaskEv+0x38>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f3bf 8f5b 	dmb	ish
 8002810:	f013 0f01 	tst.w	r3, #1
 8002814:	d001      	beq.n	800281a <_ZN13TestFactory0213getStaticTaskEv+0x12>

    return staticTask;
}
 8002816:	480b      	ldr	r0, [pc, #44]	; (8002844 <_ZN13TestFactory0213getStaticTaskEv+0x3c>)
 8002818:	4770      	bx	lr
{
 800281a:	b510      	push	{r4, lr}
    static StateMachine02 staticTask;
 800281c:	4808      	ldr	r0, [pc, #32]	; (8002840 <_ZN13TestFactory0213getStaticTaskEv+0x38>)
 800281e:	f000 ff15 	bl	800364c <__cxa_guard_acquire>
 8002822:	b908      	cbnz	r0, 8002828 <_ZN13TestFactory0213getStaticTaskEv+0x20>
}
 8002824:	4807      	ldr	r0, [pc, #28]	; (8002844 <_ZN13TestFactory0213getStaticTaskEv+0x3c>)
 8002826:	bd10      	pop	{r4, pc}
    static StateMachine02 staticTask;
 8002828:	4c05      	ldr	r4, [pc, #20]	; (8002840 <_ZN13TestFactory0213getStaticTaskEv+0x38>)
 800282a:	1d20      	adds	r0, r4, #4
 800282c:	f7ff ffd0 	bl	80027d0 <_ZN14StateMachine02C1Ev>
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <_ZN13TestFactory0213getStaticTaskEv+0x40>)
 8002832:	f000 ff85 	bl	8003740 <atexit>
 8002836:	4620      	mov	r0, r4
 8002838:	f000 ff14 	bl	8003664 <__cxa_guard_release>
 800283c:	e7f2      	b.n	8002824 <_ZN13TestFactory0213getStaticTaskEv+0x1c>
 800283e:	bf00      	nop
 8002840:	20000120 	.word	0x20000120
 8002844:	20000124 	.word	0x20000124
 8002848:	080028e5 	.word	0x080028e5

0800284c <_ZN13TestFactory0214getDynamicTaskEv>:

// static
StateMachine02 &TestFactory02::getDynamicTask()
{
 800284c:	b510      	push	{r4, lr}
    static StateMachine02 * dynamicTask = nullptr;

    if (!dynamicTask)
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <_ZN13TestFactory0214getDynamicTaskEv+0x30>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	b11b      	cbz	r3, 800285c <_ZN13TestFactory0214getDynamicTaskEv+0x10>
    {
        dynamicTask = new StateMachine02;
    }

    assert(dynamicTask);        // Check heap
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <_ZN13TestFactory0214getDynamicTaskEv+0x30>)
 8002856:	69d8      	ldr	r0, [r3, #28]
 8002858:	b148      	cbz	r0, 800286e <_ZN13TestFactory0214getDynamicTaskEv+0x22>
    return *dynamicTask;
}
 800285a:	bd10      	pop	{r4, pc}
        dynamicTask = new StateMachine02;
 800285c:	2018      	movs	r0, #24
 800285e:	f000 ff04 	bl	800366a <_Znwj>
 8002862:	4604      	mov	r4, r0
 8002864:	f7ff ffb4 	bl	80027d0 <_ZN14StateMachine02C1Ev>
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <_ZN13TestFactory0214getDynamicTaskEv+0x30>)
 800286a:	61dc      	str	r4, [r3, #28]
 800286c:	e7f2      	b.n	8002854 <_ZN13TestFactory0214getDynamicTaskEv+0x8>
    assert(dynamicTask);        // Check heap
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <_ZN13TestFactory0214getDynamicTaskEv+0x34>)
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <_ZN13TestFactory0214getDynamicTaskEv+0x38>)
 8002872:	213c      	movs	r1, #60	; 0x3c
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <_ZN13TestFactory0214getDynamicTaskEv+0x3c>)
 8002876:	f000 ff45 	bl	8003704 <__assert_func>
 800287a:	bf00      	nop
 800287c:	20000120 	.word	0x20000120
 8002880:	08004e64 	.word	0x08004e64
 8002884:	08004e70 	.word	0x08004e70
 8002888:	08004ea8 	.word	0x08004ea8

0800288c <_ZN13TestFactory0210initializeEv>:
{
 800288c:	b508      	push	{r3, lr}
    getStaticTask().setDeleteOnTerminate(false);
 800288e:	f7ff ffbb 	bl	8002808 <_ZN13TestFactory0213getStaticTaskEv>
 8002892:	6803      	ldr	r3, [r0, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2100      	movs	r1, #0
 8002898:	4798      	blx	r3
    getDynamicTask().setDeleteOnTerminate(true);
 800289a:	f7ff ffd7 	bl	800284c <_ZN13TestFactory0214getDynamicTaskEv>
 800289e:	6803      	ldr	r3, [r0, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2101      	movs	r1, #1
 80028a4:	4798      	blx	r3
}
 80028a6:	bd08      	pop	{r3, pc}

080028a8 <Factory_initialize>:
{
 80028a8:	b508      	push	{r3, lr}
    TestFactory02::initialize();
 80028aa:	f7ff ffef 	bl	800288c <_ZN13TestFactory0210initializeEv>
}
 80028ae:	bd08      	pop	{r3, pc}

080028b0 <_ZN13TestFactory025buildEv>:
{
 80028b0:	b508      	push	{r3, lr}
    Trace::out("Starting test2...");
 80028b2:	4808      	ldr	r0, [pc, #32]	; (80028d4 <_ZN13TestFactory025buildEv+0x24>)
 80028b4:	f000 f854 	bl	8002960 <_ZN5Trace3outEPKcz>
    Trace::out("---------------------");
 80028b8:	4807      	ldr	r0, [pc, #28]	; (80028d8 <_ZN13TestFactory025buildEv+0x28>)
 80028ba:	f000 f851 	bl	8002960 <_ZN5Trace3outEPKcz>
    getStaticTask().startBehavior();
 80028be:	f7ff ffa3 	bl	8002808 <_ZN13TestFactory0213getStaticTaskEv>
 80028c2:	6803      	ldr	r3, [r0, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4798      	blx	r3
    getDynamicTask().startBehavior();
 80028c8:	f7ff ffc0 	bl	800284c <_ZN13TestFactory0214getDynamicTaskEv>
 80028cc:	6803      	ldr	r3, [r0, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4798      	blx	r3
}
 80028d2:	bd08      	pop	{r3, pc}
 80028d4:	08004f0c 	.word	0x08004f0c
 80028d8:	08004f20 	.word	0x08004f20

080028dc <Factory_build>:
{
 80028dc:	b508      	push	{r3, lr}
    TestFactory02::build();
 80028de:	f7ff ffe7 	bl	80028b0 <_ZN13TestFactory025buildEv>
}
 80028e2:	bd08      	pop	{r3, pc}

080028e4 <__tcf_0>:
    static StateMachine02 staticTask;
 80028e4:	b508      	push	{r3, lr}
 80028e6:	4802      	ldr	r0, [pc, #8]	; (80028f0 <__tcf_0+0xc>)
 80028e8:	f7ff fee2 	bl	80026b0 <_ZN14StateMachine02D1Ev>
 80028ec:	bd08      	pop	{r3, pc}
 80028ee:	bf00      	nop
 80028f0:	20000124 	.word	0x20000124

080028f4 <_ZL10traceMutexv>:
static XFMutex * mutex = XFMutex::create();

static interface::XFMutex & traceMutex()
{
    return *mutex;
}
 80028f4:	4b01      	ldr	r3, [pc, #4]	; (80028fc <_ZL10traceMutexv+0x8>)
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000140 	.word	0x20000140

08002900 <_ZL14traceMutexLockv>:

static void traceMutexLock()
{
 8002900:	b508      	push	{r3, lr}
    traceMutex().lock();
 8002902:	f7ff fff7 	bl	80028f4 <_ZL10traceMutexv>
 8002906:	6803      	ldr	r3, [r0, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4798      	blx	r3
}
 800290c:	bd08      	pop	{r3, pc}

0800290e <_ZL16traceMutexUnlockv>:

static void traceMutexUnlock()
{
 800290e:	b508      	push	{r3, lr}
    traceMutex().unlock();
 8002910:	f7ff fff0 	bl	80028f4 <_ZL10traceMutexv>
 8002914:	6803      	ldr	r3, [r0, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4798      	blx	r3
}
 800291a:	bd08      	pop	{r3, pc}

0800291c <_ZL17checkStringEndingPcm>:
	traceUart.initialize(TRACE_UART_BAUD_RATE);
}

static int32_t checkStringEnding(char * str, uint32_t len)
{
	if (!len)
 800291c:	b1e9      	cbz	r1, 800295a <_ZL17checkStringEndingPcm+0x3e>
{
 800291e:	b508      	push	{r3, lr}
 8002920:	460b      	mov	r3, r1
	{
		return 0;
	}

	if (str[len-1] != '\n')
 8002922:	1e4a      	subs	r2, r1, #1
 8002924:	5c81      	ldrb	r1, [r0, r2]
 8002926:	290a      	cmp	r1, #10
 8002928:	d00a      	beq.n	8002940 <_ZL17checkStringEndingPcm+0x24>
	{
#if (TRACE_ADD_CRLF_SEQU != 0)
		// Add "\r\n" at the end of the string
		str[len] = '\r';
 800292a:	220d      	movs	r2, #13
 800292c:	54c2      	strb	r2, [r0, r3]
		str[len+1] = '\n';
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	210a      	movs	r1, #10
 8002932:	5481      	strb	r1, [r0, r2]
		str[len+2] = '\0';
 8002934:	3302      	adds	r3, #2
 8002936:	2200      	movs	r2, #0
 8002938:	54c2      	strb	r2, [r0, r3]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 800293a:	f7fd fcb9 	bl	80002b0 <strlen>
}
 800293e:	bd08      	pop	{r3, pc}
		if (len == 1 ||
 8002940:	2b01      	cmp	r3, #1
 8002942:	d005      	beq.n	8002950 <_ZL17checkStringEndingPcm+0x34>
 8002944:	d9f9      	bls.n	800293a <_ZL17checkStringEndingPcm+0x1e>
			(len >= 2 && str[len-2] != '\r'))
 8002946:	18c1      	adds	r1, r0, r3
 8002948:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 800294c:	290d      	cmp	r1, #13
 800294e:	d0f4      	beq.n	800293a <_ZL17checkStringEndingPcm+0x1e>
			memmove(&str[len], &str[len-1], 2);
 8002950:	5a81      	ldrh	r1, [r0, r2]
 8002952:	52c1      	strh	r1, [r0, r3]
			str[len-1] = '\r';
 8002954:	230d      	movs	r3, #13
 8002956:	5483      	strb	r3, [r0, r2]
 8002958:	e7ef      	b.n	800293a <_ZL17checkStringEndingPcm+0x1e>
		return 0;
 800295a:	2000      	movs	r0, #0
}
 800295c:	4770      	bx	lr
	...

08002960 <_ZN5Trace3outEPKcz>:
	traceUart.write(str.data(), str.length());
	traceMutexUnlock();
}

void Trace::out(const char * format, ...)
{
 8002960:	b40f      	push	{r0, r1, r2, r3}
 8002962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002964:	b083      	sub	sp, #12
 8002966:	ad08      	add	r5, sp, #32
 8002968:	f855 7b04 	ldr.w	r7, [r5], #4
	traceMutexLock();
 800296c:	f7ff ffc8 	bl	8002900 <_ZL14traceMutexLockv>
	va_list args;

	// Format string
	va_start(args, format);
 8002970:	9501      	str	r5, [sp, #4]
	vsprintf(strTrace, format, args);
 8002972:	4e0d      	ldr	r6, [pc, #52]	; (80029a8 <_ZN5Trace3outEPKcz+0x48>)
 8002974:	1d34      	adds	r4, r6, #4
 8002976:	462a      	mov	r2, r5
 8002978:	4639      	mov	r1, r7
 800297a:	4620      	mov	r0, r4
 800297c:	f001 fb94 	bl	80040a8 <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 8002980:	4620      	mov	r0, r4
 8002982:	f7fd fc95 	bl	80002b0 <strlen>
 8002986:	4601      	mov	r1, r0
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff ffc7 	bl	800291c <_ZL17checkStringEndingPcm>

	traceUart.write(strTrace);
 800298e:	2200      	movs	r2, #0
 8002990:	4621      	mov	r1, r4
 8002992:	f506 7082 	add.w	r0, r6, #260	; 0x104
 8002996:	f000 f8bd 	bl	8002b14 <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 800299a:	f7ff ffb8 	bl	800290e <_ZL16traceMutexUnlockv>
}
 800299e:	b003      	add	sp, #12
 80029a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80029a4:	b004      	add	sp, #16
 80029a6:	4770      	bx	lr
 80029a8:	20000140 	.word	0x20000140

080029ac <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	4604      	mov	r4, r0
 80029b0:	460d      	mov	r5, r1
 80029b2:	2801      	cmp	r0, #1
 80029b4:	d005      	beq.n	80029c2 <_Z41__static_initialization_and_destruction_0ii+0x16>
static XFMutex * mutex = XFMutex::create();
 80029b6:	b91c      	cbnz	r4, 80029c0 <_Z41__static_initialization_and_destruction_0ii+0x14>
 80029b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029bc:	429d      	cmp	r5, r3
 80029be:	d010      	beq.n	80029e2 <_Z41__static_initialization_and_destruction_0ii+0x36>
}
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c6:	4299      	cmp	r1, r3
 80029c8:	d1f5      	bne.n	80029b6 <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 80029ca:	4e08      	ldr	r6, [pc, #32]	; (80029ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80029cc:	2300      	movs	r3, #0
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80029d0:	4619      	mov	r1, r3
 80029d2:	f506 7082 	add.w	r0, r6, #260	; 0x104
 80029d6:	f000 f851 	bl	8002a7c <_ZN4UartC1EhP20__UART_HandleTypeDefb>
static XFMutex * mutex = XFMutex::create();
 80029da:	f000 fdfb 	bl	80035d4 <_ZN9interface7XFMutex6createEv>
 80029de:	6030      	str	r0, [r6, #0]
 80029e0:	e7e9      	b.n	80029b6 <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 80029e2:	4804      	ldr	r0, [pc, #16]	; (80029f4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80029e4:	f000 f83a 	bl	8002a5c <_ZN4UartD1Ev>
}
 80029e8:	e7ea      	b.n	80029c0 <_Z41__static_initialization_and_destruction_0ii+0x14>
 80029ea:	bf00      	nop
 80029ec:	20000140 	.word	0x20000140
 80029f0:	20000098 	.word	0x20000098
 80029f4:	20000244 	.word	0x20000244

080029f8 <_GLOBAL__sub_I_trace_initialize>:
 80029f8:	b508      	push	{r3, lr}
 80029fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7ff ffd4 	bl	80029ac <_Z41__static_initialization_and_destruction_0ii>
 8002a04:	bd08      	pop	{r3, pc}

08002a06 <_GLOBAL__sub_D_trace_initialize>:
 8002a06:	b508      	push	{r3, lr}
 8002a08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff ffcd 	bl	80029ac <_Z41__static_initialization_and_destruction_0ii>
 8002a12:	bd08      	pop	{r3, pc}

08002a14 <_Z5inISRv>:

int inISR()
{
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <_Z5inISRv+0x8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	200002d4 	.word	0x200002d4

08002a20 <_Z13enterCriticalv>:

void enterCritical()
{
 8002a20:	b508      	push	{r3, lr}
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 8002a22:	f7ff fff7 	bl	8002a14 <_Z5inISRv>
 8002a26:	b938      	cbnz	r0, 8002a38 <_Z13enterCriticalv+0x18>
	{
		if (!bOMEnterCriticalRegionNested)
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <_Z13enterCriticalv+0x1c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	b903      	cbnz	r3, 8002a30 <_Z13enterCriticalv+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2e:	b672      	cpsid	i
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 8002a30:	4a02      	ldr	r2, [pc, #8]	; (8002a3c <_Z13enterCriticalv+0x1c>)
 8002a32:	6853      	ldr	r3, [r2, #4]
 8002a34:	3301      	adds	r3, #1
 8002a36:	6053      	str	r3, [r2, #4]
	}
}
 8002a38:	bd08      	pop	{r3, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200002d4 	.word	0x200002d4

08002a40 <_Z12exitCriticalv>:

void exitCritical()
{
 8002a40:	b508      	push	{r3, lr}
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8002a42:	f7ff ffe7 	bl	8002a14 <_Z5inISRv>
 8002a46:	b930      	cbnz	r0, 8002a56 <_Z12exitCriticalv+0x16>
	{
		bOMEnterCriticalRegionNested--;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <_Z12exitCriticalv+0x18>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	3a01      	subs	r2, #1
 8002a4e:	605a      	str	r2, [r3, #4]

		if (!bOMEnterCriticalRegionNested)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	b903      	cbnz	r3, 8002a56 <_Z12exitCriticalv+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a54:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 8002a56:	bd08      	pop	{r3, pc}
 8002a58:	200002d4 	.word	0x200002d4

08002a5c <_ZN4UartD1Ev>:
            assert(false);  // Error: Instance for specified UART already exists.
        }
    }
}

Uart::~Uart()
 8002a5c:	4b01      	ldr	r3, [pc, #4]	; (8002a64 <_ZN4UartD1Ev+0x8>)
 8002a5e:	6003      	str	r3, [r0, #0]
{

}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	08004cd4 	.word	0x08004cd4

08002a68 <_ZN4UartD0Ev>:
Uart::~Uart()
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
}
 8002a6c:	f7ff fff6 	bl	8002a5c <_ZN4UartD1Ev>
 8002a70:	2190      	movs	r1, #144	; 0x90
 8002a72:	4620      	mov	r0, r4
 8002a74:	f000 fde8 	bl	8003648 <_ZdlPvj>
 8002a78:	4620      	mov	r0, r4
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8002a7c:	b510      	push	{r4, lr}
   _bTxDMA(bTxDMA)
 8002a7e:	4c0f      	ldr	r4, [pc, #60]	; (8002abc <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x40>)
 8002a80:	6004      	str	r4, [r0, #0]
 8002a82:	24ff      	movs	r4, #255	; 0xff
 8002a84:	7104      	strb	r4, [r0, #4]
 8002a86:	2400      	movs	r4, #0
 8002a88:	6084      	str	r4, [r0, #8]
 8002a8a:	7303      	strb	r3, [r0, #12]
	assert(uartNbr < UART_COUNT);
 8002a8c:	2902      	cmp	r1, #2
 8002a8e:	d809      	bhi.n	8002aa4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x28>
        if (!_sUart[uartNbr])
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8002a92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a96:	b95b      	cbnz	r3, 8002ab0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x34>
            _sUart[uartNbr] = this;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8002a9a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
            _uartNbr = uartNbr;
 8002a9e:	7101      	strb	r1, [r0, #4]
            _pUartHandle = uartHandle;
 8002aa0:	6082      	str	r2, [r0, #8]
}
 8002aa2:	bd10      	pop	{r4, pc}
	assert(uartNbr < UART_COUNT);
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x48>)
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8002aa8:	2111      	movs	r1, #17
 8002aaa:	4808      	ldr	r0, [pc, #32]	; (8002acc <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8002aac:	f000 fe2a 	bl	8003704 <__assert_func>
            assert(false);  // Error: Instance for specified UART already exists.
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x54>)
 8002ab2:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8002ab4:	211f      	movs	r1, #31
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8002ab8:	f000 fe24 	bl	8003704 <__assert_func>
 8002abc:	08004cd4 	.word	0x08004cd4
 8002ac0:	200002dc 	.word	0x200002dc
 8002ac4:	08004f38 	.word	0x08004f38
 8002ac8:	08004f50 	.word	0x08004f50
 8002acc:	08004f88 	.word	0x08004f88
 8002ad0:	08004fec 	.word	0x08004fec

08002ad4 <_ZN4Uart13writeUsingDMAEPKhm>:
        writeUsingDMA((const uint8_t *)str, length);
    }
}

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8002ad4:	b570      	push	{r4, r5, r6, lr}
    assert(length <= sizeof(_pTxDmaBuffer));
 8002ad6:	2a80      	cmp	r2, #128	; 0x80
 8002ad8:	d80f      	bhi.n	8002afa <_ZN4Uart13writeUsingDMAEPKhm+0x26>
 8002ada:	4605      	mov	r5, r0
 8002adc:	4614      	mov	r4, r2

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8002ade:	f100 060d 	add.w	r6, r0, #13
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f000 fe78 	bl	80037d8 <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8002ae8:	68a8      	ldr	r0, [r5, #8]
 8002aea:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d1fb      	bne.n	8002ae8 <_ZN4Uart13writeUsingDMAEPKhm+0x14>
    { continue; }

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8002af0:	b2a2      	uxth	r2, r4
 8002af2:	4631      	mov	r1, r6
 8002af4:	f7ff fa06 	bl	8001f04 <HAL_UART_Transmit_DMA>
}
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
    assert(length <= sizeof(_pTxDmaBuffer));
 8002afa:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <_ZN4Uart13writeUsingDMAEPKhm+0x34>)
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <_ZN4Uart13writeUsingDMAEPKhm+0x38>)
 8002afe:	2150      	movs	r1, #80	; 0x50
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <_ZN4Uart13writeUsingDMAEPKhm+0x3c>)
 8002b02:	f000 fdff 	bl	8003704 <__assert_func>
 8002b06:	bf00      	nop
 8002b08:	08004ff4 	.word	0x08004ff4
 8002b0c:	08005014 	.word	0x08005014
 8002b10:	08004f88 	.word	0x08004f88

08002b14 <_ZN4Uart5writeEPKcj>:
{
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4604      	mov	r4, r0
 8002b18:	460d      	mov	r5, r1
	if (!length)
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	b912      	cbnz	r2, 8002b24 <_ZN4Uart5writeEPKcj+0x10>
		length = strlen(str);
 8002b1e:	4608      	mov	r0, r1
 8002b20:	f7fd fbc6 	bl	80002b0 <strlen>
    if (!_bTxDMA)
 8002b24:	7b23      	ldrb	r3, [r4, #12]
 8002b26:	b933      	cbnz	r3, 8002b36 <_ZN4Uart5writeEPKcj+0x22>
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 8002b28:	2332      	movs	r3, #50	; 0x32
 8002b2a:	b282      	uxth	r2, r0
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	68a0      	ldr	r0, [r4, #8]
 8002b30:	f7ff fcff 	bl	8002532 <HAL_UART_Transmit>
}
 8002b34:	bd38      	pop	{r3, r4, r5, pc}
        writeUsingDMA((const uint8_t *)str, length);
 8002b36:	4602      	mov	r2, r0
 8002b38:	4629      	mov	r1, r5
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff ffca 	bl	8002ad4 <_ZN4Uart13writeUsingDMAEPKhm>
}
 8002b40:	e7f8      	b.n	8002b34 <_ZN4Uart5writeEPKcj+0x20>
	...

08002b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b4a:	e003      	b.n	8002b54 <LoopCopyDataInit>

08002b4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b52:	3104      	adds	r1, #4

08002b54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b5c:	d3f6      	bcc.n	8002b4c <CopyDataInit>
  ldr  r2, =_sbss
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b60:	e002      	b.n	8002b68 <LoopFillZerobss>

08002b62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b64:	f842 3b04 	str.w	r3, [r2], #4

08002b68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b6c:	d3f9      	bcc.n	8002b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b6e:	f7fe f977 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b72:	f000 fdfd 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b76:	f7fe f8cf 	bl	8000d18 <main>
  bx  lr    
 8002b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b7c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002b80:	08005230 	.word	0x08005230
  ldr  r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b88:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002b8c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002b90:	200003f0 	.word	0x200003f0

08002b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC_IRQHandler>

08002b96 <_ZNK10XFBehavior17deleteOnTerminateEv>:
}

bool XFBehavior::deleteOnTerminate() const
{
    return this->deleteOnTerminate_;
}
 8002b96:	7900      	ldrb	r0, [r0, #4]
 8002b98:	4770      	bx	lr

08002b9a <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
    this->deleteOnTerminate_ = deleteBehaviour;
 8002b9a:	7101      	strb	r1, [r0, #4]
}
 8002b9c:	4770      	bx	lr

08002b9e <_ZN10XFBehavior13startBehaviorEv>:
{
 8002b9e:	b538      	push	{r3, r4, r5, lr}
 8002ba0:	4604      	mov	r4, r0
    XFInitialEvent* evInit = new XFInitialEvent();
 8002ba2:	2010      	movs	r0, #16
 8002ba4:	f000 fd61 	bl	800366a <_Znwj>
 8002ba8:	4605      	mov	r5, r0
 8002baa:	f000 f8c9 	bl	8002d40 <_ZN14XFInitialEventC1Ev>
    this->pushEvent(evInit);//send an init event
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4798      	blx	r3
}
 8002bb8:	bd38      	pop	{r3, r4, r5, pc}
	...

08002bbc <_ZN10XFBehaviorC1Ev>:

protected:
    virtual TerminateBehavior process(const XFEvent * pEvent) = 0;  	///< Called by the dispatcher to process an event.

protected:
    XFBehavior() = default;
 8002bbc:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <_ZN10XFBehaviorC1Ev+0x10>)
 8002bbe:	6002      	str	r2, [r0, #0]
XFBehavior::XFBehavior()
 8002bc0:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <_ZN10XFBehaviorC1Ev+0x14>)
 8002bc2:	6002      	str	r2, [r0, #0]
    this->deleteOnTerminate_ = false; // false by default
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	7102      	strb	r2, [r0, #4]
}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	08005050 	.word	0x08005050
 8002bd0:	08004ce4 	.word	0x08004ce4

08002bd4 <_ZN10XFBehaviorD0Ev>:
XFBehavior::~XFBehavior()
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	4604      	mov	r4, r0
}
 8002bd8:	f000 f806 	bl	8002be8 <_ZN10XFBehaviorD1Ev>
 8002bdc:	210c      	movs	r1, #12
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 fd32 	bl	8003648 <_ZdlPvj>
 8002be4:	4620      	mov	r0, r4
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <_ZN10XFBehaviorD1Ev>:
XFBehavior::~XFBehavior()
 8002be8:	b510      	push	{r4, lr}
 8002bea:	4604      	mov	r4, r0
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <_ZN10XFBehaviorD1Ev+0x20>)
 8002bee:	6003      	str	r3, [r0, #0]
    if(this->deleteOnTerminate()){
 8002bf0:	f7ff ffd1 	bl	8002b96 <_ZNK10XFBehavior17deleteOnTerminateEv>
 8002bf4:	b918      	cbnz	r0, 8002bfe <_ZN10XFBehaviorD1Ev+0x16>
    virtual ~XFBehavior() = default;
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <_ZN10XFBehaviorD1Ev+0x24>)
 8002bf8:	6023      	str	r3, [r4, #0]
}
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	bd10      	pop	{r4, pc}
        delete this;
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f7ff ffe8 	bl	8002bd4 <_ZN10XFBehaviorD0Ev>
 8002c04:	e7f7      	b.n	8002bf6 <_ZN10XFBehaviorD1Ev+0xe>
 8002c06:	bf00      	nop
 8002c08:	08004ce4 	.word	0x08004ce4
 8002c0c:	08005050 	.word	0x08005050

08002c10 <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent *XFBehavior::getCurrentEvent() const
{
    return this->pCurrentEvent_;
}
 8002c10:	6880      	ldr	r0, [r0, #8]
 8002c12:	4770      	bx	lr

08002c14 <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher *XFBehavior::getDispatcher(){
 8002c14:	b508      	push	{r3, lr}
    return interface::XFDispatcher::getInstance();
 8002c16:	f000 f90d 	bl	8002e34 <_ZN9interface12XFDispatcher11getInstanceEv>
}
 8002c1a:	bd08      	pop	{r3, pc}

08002c1c <_ZN10XFBehavior9pushEventEP7XFEvent>:
void XFBehavior::pushEvent(XFEvent *pEvent){
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	460c      	mov	r4, r1
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }
 8002c20:	68cb      	ldr	r3, [r1, #12]
    if(pEvent->getBehavior()==nullptr){
 8002c22:	b133      	cbz	r3, 8002c32 <_ZN10XFBehavior9pushEventEP7XFEvent+0x16>
    getDispatcher()->pushEvent(pEvent);// push event further
 8002c24:	f7ff fff6 	bl	8002c14 <_ZN10XFBehavior13getDispatcherEv>
 8002c28:	6803      	ldr	r3, [r0, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	4798      	blx	r3
}
 8002c30:	bd10      	pop	{r4, pc}
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }
 8002c32:	60c8      	str	r0, [r1, #12]
 8002c34:	e7f6      	b.n	8002c24 <_ZN10XFBehavior9pushEventEP7XFEvent+0x8>

08002c36 <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout *XFBehavior::getCurrentTimeout()
{
    if(this->pCurrentEvent_->getEventType() == XFEvent::Timeout){
 8002c36:	6880      	ldr	r0, [r0, #8]
    inline XFEventType getEventType() const { return eventType_; }
 8002c38:	7903      	ldrb	r3, [r0, #4]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d000      	beq.n	8002c40 <_ZN10XFBehavior17getCurrentTimeoutEv+0xa>
    return (XFTimeout*)this->pCurrentEvent_;
    }
    return nullptr;
 8002c3e:	2000      	movs	r0, #0
}
 8002c40:	4770      	bx	lr

08002c42 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent *pEvent)
{
    this->pCurrentEvent_= pEvent;
 8002c42:	6081      	str	r1, [r0, #8]
}
 8002c44:	4770      	bx	lr

08002c46 <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent *pEvent)
{
 8002c46:	b570      	push	{r4, r5, r6, lr}
 8002c48:	4604      	mov	r4, r0
 8002c4a:	460e      	mov	r6, r1
    XFBehavior::TerminateBehavior terminateBehavior = false;
    XFEventStatus status;
    this->setCurrentEvent(pEvent);
 8002c4c:	f7ff fff9 	bl	8002c42 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>
    status = this->processEvent();
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4620      	mov	r0, r4
 8002c56:	4798      	blx	r3
	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
	{
        return (this->status_ == eventStatus);
 8002c58:	b2c5      	uxtb	r5, r0
    if(status == XFEventStatus::Consumed && pEvent->deleteAfterConsume()){
 8002c5a:	2d01      	cmp	r5, #1
 8002c5c:	d003      	beq.n	8002c66 <_ZN10XFBehavior7processEPK7XFEvent+0x20>
        delete pEvent;
    }
    if(status == XFEventStatus::Terminate && this->deleteOnTerminate()){
 8002c5e:	2d08      	cmp	r5, #8
 8002c60:	d00e      	beq.n	8002c80 <_ZN10XFBehavior7processEPK7XFEvent+0x3a>
    XFBehavior::TerminateBehavior terminateBehavior = false;
 8002c62:	2000      	movs	r0, #0
        terminateBehavior = true;

    }
    return terminateBehavior;
}
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
    if(status == XFEventStatus::Consumed && pEvent->deleteAfterConsume()){
 8002c66:	6833      	ldr	r3, [r6, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	4798      	blx	r3
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d0f5      	beq.n	8002c5e <_ZN10XFBehavior7processEPK7XFEvent+0x18>
        delete pEvent;
 8002c72:	2e00      	cmp	r6, #0
 8002c74:	d0f3      	beq.n	8002c5e <_ZN10XFBehavior7processEPK7XFEvent+0x18>
 8002c76:	6833      	ldr	r3, [r6, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	4798      	blx	r3
 8002c7e:	e7ee      	b.n	8002c5e <_ZN10XFBehavior7processEPK7XFEvent+0x18>
    if(status == XFEventStatus::Terminate && this->deleteOnTerminate()){
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	4620      	mov	r0, r4
 8002c86:	4798      	blx	r3
 8002c88:	e7ec      	b.n	8002c64 <_ZN10XFBehavior7processEPK7XFEvent+0x1e>
	...

08002c8c <_ZN7XFEventD1Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8002c8c:	4b01      	ldr	r3, [pc, #4]	; (8002c94 <_ZN7XFEventD1Ev+0x8>)
 8002c8e:	6003      	str	r3, [r0, #0]
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	08005074 	.word	0x08005074

08002c98 <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 8002c98:	2000      	movs	r0, #0
 8002c9a:	4770      	bx	lr

08002c9c <_ZN7XFEventD0Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <_ZN7XFEventD0Ev+0x14>)
 8002ca2:	6003      	str	r3, [r0, #0]
 8002ca4:	2110      	movs	r1, #16
 8002ca6:	f000 fccf 	bl	8003648 <_ZdlPvj>
 8002caa:	4620      	mov	r0, r4
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	bf00      	nop
 8002cb0:	08005074 	.word	0x08005074

08002cb4 <_ZNK19XFDefaultTransition18deleteAfterConsumeEv>:
}

bool XFDefaultTransition::deleteAfterConsume() const
{
    return false;
}
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	4770      	bx	lr

08002cb8 <_ZN19XFDefaultTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * another (without a trigger) a default transition must be pushed.
 */
class XFDefaultTransition : public XFEvent
 8002cb8:	4a02      	ldr	r2, [pc, #8]	; (8002cc4 <_ZN19XFDefaultTransitionD1Ev+0xc>)
 8002cba:	6002      	str	r2, [r0, #0]
 8002cbc:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <_ZN19XFDefaultTransitionD1Ev+0x10>)
 8002cbe:	6002      	str	r2, [r0, #0]
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	08004d0c 	.word	0x08004d0c
 8002cc8:	08005074 	.word	0x08005074

08002ccc <_ZN19XFDefaultTransitionD0Ev>:
 8002ccc:	b510      	push	{r4, lr}
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <_ZN19XFDefaultTransitionD0Ev+0x18>)
 8002cd2:	6003      	str	r3, [r0, #0]
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <_ZN19XFDefaultTransitionD0Ev+0x1c>)
 8002cd6:	6003      	str	r3, [r0, #0]
 8002cd8:	2110      	movs	r1, #16
 8002cda:	f000 fcb5 	bl	8003648 <_ZdlPvj>
 8002cde:	4620      	mov	r0, r4
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08004d0c 	.word	0x08004d0c
 8002ce8:	08005074 	.word	0x08005074

08002cec <_ZN19XFDefaultTransitionC1Ev>:
    XFEvent(XFEventType eventType, int id = 0) : eventType_(eventType), id_(id), pBehavior_(nullptr) {}
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <_ZN19XFDefaultTransitionC1Ev+0x14>)
 8002cee:	6002      	str	r2, [r0, #0]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	7102      	strb	r2, [r0, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6082      	str	r2, [r0, #8]
 8002cf8:	60c2      	str	r2, [r0, #12]
XFDefaultTransition::XFDefaultTransition():XFEvent(DefaultTransition)
 8002cfa:	4a02      	ldr	r2, [pc, #8]	; (8002d04 <_ZN19XFDefaultTransitionC1Ev+0x18>)
 8002cfc:	6002      	str	r2, [r0, #0]
}
 8002cfe:	4770      	bx	lr
 8002d00:	08005074 	.word	0x08005074
 8002d04:	08004d0c 	.word	0x08004d0c

08002d08 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:
}

bool XFInitialEvent::deleteAfterConsume() const
{
    return false;
}
 8002d08:	2000      	movs	r0, #0
 8002d0a:	4770      	bx	lr

08002d0c <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8002d0c:	4a02      	ldr	r2, [pc, #8]	; (8002d18 <_ZN14XFInitialEventD1Ev+0xc>)
 8002d0e:	6002      	str	r2, [r0, #0]
    virtual ~XFEvent() {}		///< Class destructor
 8002d10:	4a02      	ldr	r2, [pc, #8]	; (8002d1c <_ZN14XFInitialEventD1Ev+0x10>)
 8002d12:	6002      	str	r2, [r0, #0]
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	08004d20 	.word	0x08004d20
 8002d1c:	08005074 	.word	0x08005074

08002d20 <_ZN14XFInitialEventD0Ev>:
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <_ZN14XFInitialEventD0Ev+0x18>)
 8002d26:	6003      	str	r3, [r0, #0]
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <_ZN14XFInitialEventD0Ev+0x1c>)
 8002d2a:	6003      	str	r3, [r0, #0]
 8002d2c:	2110      	movs	r1, #16
 8002d2e:	f000 fc8b 	bl	8003648 <_ZdlPvj>
 8002d32:	4620      	mov	r0, r4
 8002d34:	bd10      	pop	{r4, pc}
 8002d36:	bf00      	nop
 8002d38:	08004d20 	.word	0x08004d20
 8002d3c:	08005074 	.word	0x08005074

08002d40 <_ZN14XFInitialEventC1Ev>:
    XFEvent(XFEventType eventType, int id = 0) : eventType_(eventType), id_(id), pBehavior_(nullptr) {}
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <_ZN14XFInitialEventC1Ev+0x14>)
 8002d42:	6002      	str	r2, [r0, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	7102      	strb	r2, [r0, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	6082      	str	r2, [r0, #8]
 8002d4c:	60c2      	str	r2, [r0, #12]
    :XFEvent(Initial)
 8002d4e:	4a02      	ldr	r2, [pc, #8]	; (8002d58 <_ZN14XFInitialEventC1Ev+0x18>)
 8002d50:	6002      	str	r2, [r0, #0]
}
 8002d52:	4770      	bx	lr
 8002d54:	08005074 	.word	0x08005074
 8002d58:	08004d20 	.word	0x08004d20

08002d5c <_ZNK9XFTimeout18deleteAfterConsumeEv>:
}

bool XFTimeout::deleteAfterConsume() const
{
    return false;
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	4770      	bx	lr

08002d60 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8002d60:	4a02      	ldr	r2, [pc, #8]	; (8002d6c <_ZN9XFTimeoutD1Ev+0xc>)
 8002d62:	6002      	str	r2, [r0, #0]
    virtual ~XFEvent() {}		///< Class destructor
 8002d64:	4a02      	ldr	r2, [pc, #8]	; (8002d70 <_ZN9XFTimeoutD1Ev+0x10>)
 8002d66:	6002      	str	r2, [r0, #0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	08004d34 	.word	0x08004d34
 8002d70:	08005074 	.word	0x08005074

08002d74 <_ZN9XFTimeoutD0Ev>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	4604      	mov	r4, r0
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <_ZN9XFTimeoutD0Ev+0x18>)
 8002d7a:	6003      	str	r3, [r0, #0]
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <_ZN9XFTimeoutD0Ev+0x1c>)
 8002d7e:	6003      	str	r3, [r0, #0]
 8002d80:	2118      	movs	r1, #24
 8002d82:	f000 fc61 	bl	8003648 <_ZdlPvj>
 8002d86:	4620      	mov	r0, r4
 8002d88:	bd10      	pop	{r4, pc}
 8002d8a:	bf00      	nop
 8002d8c:	08004d34 	.word	0x08004d34
 8002d90:	08005074 	.word	0x08005074

08002d94 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>:
XFTimeout::XFTimeout(int id, int interval, interface::XFBehavior *pBehavior)
 8002d94:	b510      	push	{r4, lr}
    XFEvent(XFEventType eventType, int id = 0) : eventType_(eventType), id_(id), pBehavior_(nullptr) {}
 8002d96:	4c07      	ldr	r4, [pc, #28]	; (8002db4 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE+0x20>)
 8002d98:	6004      	str	r4, [r0, #0]
 8002d9a:	f04f 0e04 	mov.w	lr, #4
 8002d9e:	f880 e004 	strb.w	lr, [r0, #4]
 8002da2:	6081      	str	r1, [r0, #8]
 8002da4:	2100      	movs	r1, #0
 8002da6:	60c1      	str	r1, [r0, #12]
    :XFEvent(Timeout,id),interval_(interval)
 8002da8:	4903      	ldr	r1, [pc, #12]	; (8002db8 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE+0x24>)
 8002daa:	6001      	str	r1, [r0, #0]
 8002dac:	6102      	str	r2, [r0, #16]
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }
 8002dae:	60c3      	str	r3, [r0, #12]
}
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	bf00      	nop
 8002db4:	08005074 	.word	0x08005074
 8002db8:	08004d34 	.word	0x08004d34

08002dbc <_ZN12XFDispatcher7executeEPKv>:
    }
}


int XFDispatcher::execute(const void *param)
{
 8002dbc:	b508      	push	{r3, lr}
 8002dbe:	4604      	mov	r4, r0
    while(true){
        this->executeOnce();
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4798      	blx	r3
    while(true){
 8002dc8:	e7fa      	b.n	8002dc0 <_ZN12XFDispatcher7executeEPKv+0x4>

08002dca <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent>:

}


void XFDispatcher::dispatchEvent(const XFEvent *pEvent) const
{
 8002dca:	b510      	push	{r4, lr}
 8002dcc:	460c      	mov	r4, r1
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }
 8002dce:	68c8      	ldr	r0, [r1, #12]
    XFBehavior::TerminateBehavior terminateBehavior;
    terminateBehavior = pEvent->getBehavior()->process(pEvent); // call the process method
 8002dd0:	6803      	ldr	r3, [r0, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4798      	blx	r3

    if(terminateBehavior){// if we should delete the behavior
 8002dd6:	b120      	cbz	r0, 8002de2 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x18>
 8002dd8:	68e0      	ldr	r0, [r4, #12]
        delete (pEvent->getBehavior());
 8002dda:	b110      	cbz	r0, 8002de2 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x18>
 8002ddc:	6803      	ldr	r3, [r0, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4798      	blx	r3
    }

}
 8002de2:	bd10      	pop	{r4, pc}

08002de4 <_ZN12XFDispatcher15scheduleTimeoutEiiPN9interface10XFBehaviorE>:
{
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	460c      	mov	r4, r1
 8002de8:	4615      	mov	r5, r2
 8002dea:	461e      	mov	r6, r3
    XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId,interval,pBehavior);//add the timeout in timeoutManager, call timeoutManager with getInstance
 8002dec:	f000 f8b8 	bl	8002f60 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002df0:	6803      	ldr	r3, [r0, #0]
 8002df2:	695f      	ldr	r7, [r3, #20]
 8002df4:	4633      	mov	r3, r6
 8002df6:	462a      	mov	r2, r5
 8002df8:	4621      	mov	r1, r4
 8002dfa:	47b8      	blx	r7
}
 8002dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dfe <_ZN12XFDispatcher17unscheduleTimeoutEiPN9interface10XFBehaviorE>:
{
 8002dfe:	b538      	push	{r3, r4, r5, lr}
 8002e00:	460c      	mov	r4, r1
 8002e02:	4615      	mov	r5, r2
   XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId,pBehavior);//call timoutManager with getInstance to remove the timeout
 8002e04:	f000 f8ac 	bl	8002f60 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002e08:	6803      	ldr	r3, [r0, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	4621      	mov	r1, r4
 8002e10:	4798      	blx	r3
}
 8002e12:	bd38      	pop	{r3, r4, r5, pc}

08002e14 <_ZN12XFDispatcherC1Ev>:
XFDispatcher::XFDispatcher()
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4604      	mov	r4, r0
protected:
    /**
     * Constructor is protected because only method createInstance()
     * should be called to create Dispatcher instances
     */
    XFDispatcher() = default;
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <_ZN12XFDispatcherC1Ev+0x18>)
 8002e1a:	6003      	str	r3, [r0, #0]
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <_ZN12XFDispatcherC1Ev+0x1c>)
 8002e1e:	f840 3b04 	str.w	r3, [r0], #4
 8002e22:	f000 fab3 	bl	800338c <_ZN12XFEventQueueC1Ev>
}
 8002e26:	4620      	mov	r0, r4
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	bf00      	nop
 8002e2c:	08005088 	.word	0x08005088
 8002e30:	08004d48 	.word	0x08004d48

08002e34 <_ZN9interface12XFDispatcher11getInstanceEv>:
    static ::XFDispatcher dispatcher;
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f3bf 8f5b 	dmb	ish
 8002e3c:	f013 0f01 	tst.w	r3, #1
 8002e40:	d001      	beq.n	8002e46 <_ZN9interface12XFDispatcher11getInstanceEv+0x12>
}
 8002e42:	480b      	ldr	r0, [pc, #44]	; (8002e70 <_ZN9interface12XFDispatcher11getInstanceEv+0x3c>)
 8002e44:	4770      	bx	lr
{
 8002e46:	b510      	push	{r4, lr}
    static ::XFDispatcher dispatcher;
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002e4a:	f000 fbff 	bl	800364c <__cxa_guard_acquire>
 8002e4e:	b908      	cbnz	r0, 8002e54 <_ZN9interface12XFDispatcher11getInstanceEv+0x20>
}
 8002e50:	4807      	ldr	r0, [pc, #28]	; (8002e70 <_ZN9interface12XFDispatcher11getInstanceEv+0x3c>)
 8002e52:	bd10      	pop	{r4, pc}
    static ::XFDispatcher dispatcher;
 8002e54:	4c05      	ldr	r4, [pc, #20]	; (8002e6c <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002e56:	1d20      	adds	r0, r4, #4
 8002e58:	f7ff ffdc 	bl	8002e14 <_ZN12XFDispatcherC1Ev>
 8002e5c:	4805      	ldr	r0, [pc, #20]	; (8002e74 <_ZN9interface12XFDispatcher11getInstanceEv+0x40>)
 8002e5e:	f000 fc6f 	bl	8003740 <atexit>
 8002e62:	4620      	mov	r0, r4
 8002e64:	f000 fbfe 	bl	8003664 <__cxa_guard_release>
 8002e68:	e7f2      	b.n	8002e50 <_ZN9interface12XFDispatcher11getInstanceEv+0x1c>
 8002e6a:	bf00      	nop
 8002e6c:	200002ec 	.word	0x200002ec
 8002e70:	200002f0 	.word	0x200002f0
 8002e74:	08002e99 	.word	0x08002e99

08002e78 <_ZN12XFDispatcherD1Ev>:
XFDispatcher::~XFDispatcher()
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <_ZN12XFDispatcherD1Ev+0x18>)
 8002e7e:	f840 3b04 	str.w	r3, [r0], #4
 8002e82:	f000 f9e3 	bl	800324c <_ZN12XFEventQueueD1Ev>
    virtual ~XFDispatcher() = default;
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <_ZN12XFDispatcherD1Ev+0x1c>)
 8002e88:	6023      	str	r3, [r4, #0]
}
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	bf00      	nop
 8002e90:	08004d48 	.word	0x08004d48
 8002e94:	08005088 	.word	0x08005088

08002e98 <__tcf_0>:
    static ::XFDispatcher dispatcher;
 8002e98:	b508      	push	{r3, lr}
 8002e9a:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <__tcf_0+0xc>)
 8002e9c:	f7ff ffec 	bl	8002e78 <_ZN12XFDispatcherD1Ev>
 8002ea0:	bd08      	pop	{r3, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200002f0 	.word	0x200002f0

08002ea8 <_ZN12XFDispatcherD0Ev>:
XFDispatcher::~XFDispatcher()
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	4604      	mov	r4, r0
}
 8002eac:	f7ff ffe4 	bl	8002e78 <_ZN12XFDispatcherD1Ev>
 8002eb0:	2138      	movs	r1, #56	; 0x38
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 fbc8 	bl	8003648 <_ZdlPvj>
 8002eb8:	4620      	mov	r0, r4
 8002eba:	bd10      	pop	{r4, pc}

08002ebc <_ZN12XFDispatcher9pushEventEP7XFEvent>:
{
 8002ebc:	b508      	push	{r3, lr}
    this->events_.push(pEvent,false);//push the event in the queue
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	3004      	adds	r0, #4
 8002ec2:	f000 fb41 	bl	8003548 <_ZN12XFEventQueue4pushEPK7XFEventb>
}
 8002ec6:	bd08      	pop	{r3, pc}

08002ec8 <_ZN12XFDispatcher11executeOnceEv>:
{
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4604      	mov	r4, r0
    if(!this->events_.empty()){// if there is an event in the queue   
 8002ecc:	1d05      	adds	r5, r0, #4
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 f98b 	bl	80031ea <_ZNK12XFEventQueue5emptyEv>
 8002ed4:	b100      	cbz	r0, 8002ed8 <_ZN12XFDispatcher11executeOnceEv+0x10>
}
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
        dispatchEvent(this->events_.front());// dispatch the event
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	69de      	ldr	r6, [r3, #28]
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 f98b 	bl	80031f8 <_ZN12XFEventQueue5frontEv>
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	47b0      	blx	r6
        this->events_.pop();// pop the event
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f000 f9f4 	bl	80032d6 <_ZN12XFEventQueue3popEv>
}
 8002eee:	e7f2      	b.n	8002ed6 <_ZN12XFDispatcher11executeOnceEv+0xe>

08002ef0 <_ZN9interface16XFTimeoutManager10initializeEl>:
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
    {
        tickInterval_ = tickInterval;
 8002ef0:	6041      	str	r1, [r0, #4]
    }
 8002ef2:	4770      	bx	lr

08002ef4 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
    {
        return tickInterval_;
    }
 8002ef4:	6840      	ldr	r0, [r0, #4]
 8002ef6:	4770      	bx	lr

08002ef8 <_ZN16XFTimeoutManager15scheduleTimeoutEllPN9interface10XFBehaviorE>:
    startTimeoutManagerTimer(this->tickInterval_);
}

// add a timeout in the list with the target to reach when the event is done
void XFTimeoutManager::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFBehavior *pBehavior)
{
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efc:	4604      	mov	r4, r0
 8002efe:	460f      	mov	r7, r1
 8002f00:	4615      	mov	r5, r2
 8002f02:	4698      	mov	r8, r3
    XFTimeout * timeout = new XFTimeout(timeoutId,interval,pBehavior);// create a new timeout
 8002f04:	2018      	movs	r0, #24
 8002f06:	f000 fbb0 	bl	800366a <_Znwj>
 8002f0a:	4606      	mov	r6, r0
 8002f0c:	4643      	mov	r3, r8
 8002f0e:	462a      	mov	r2, r5
 8002f10:	4639      	mov	r1, r7
 8002f12:	f7ff ff3f 	bl	8002d94 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>
    timeout->setRelTicks(interval/this->getTickInterval());// set the ticks
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	4798      	blx	r3
 8002f1e:	fb95 f5f0 	sdiv	r5, r5, r0
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline int getInterval() const { return interval_; }                                            ///< Returns the timeout interval in milliseconds.
    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
 8002f22:	6175      	str	r5, [r6, #20]
    addTimeout(timeout);//push it in the list
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4631      	mov	r1, r6
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4798      	blx	r3
}
 8002f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002f34 <_ZN16XFTimeoutManagerC1Ev>:
    }

    this->pMutex_->unlock();// unlock mutex
}

XFTimeoutManager::XFTimeoutManager()
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4604      	mov	r4, r0
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
        tickInterval_(0)
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <_ZN16XFTimeoutManagerC1Ev+0x24>)
 8002f3a:	6003      	str	r3, [r0, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6042      	str	r2, [r0, #4]
 8002f40:	4603      	mov	r3, r0
 8002f42:	4906      	ldr	r1, [pc, #24]	; (8002f5c <_ZN16XFTimeoutManagerC1Ev+0x28>)
 8002f44:	f843 1b08 	str.w	r1, [r3], #8
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
      {
	this->_M_next = this->_M_prev = this;
 8002f48:	60c3      	str	r3, [r0, #12]
 8002f4a:	6083      	str	r3, [r0, #8]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8002f4c:	6102      	str	r2, [r0, #16]
{
    this->pMutex_ = interface::XFMutex::create();
 8002f4e:	f000 fb41 	bl	80035d4 <_ZN9interface7XFMutex6createEv>
 8002f52:	6160      	str	r0, [r4, #20]
}
 8002f54:	4620      	mov	r0, r4
 8002f56:	bd10      	pop	{r4, pc}
 8002f58:	080050b0 	.word	0x080050b0
 8002f5c:	08004d70 	.word	0x08004d70

08002f60 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
    static ::XFTimeoutManager timeoutManager;
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f3bf 8f5b 	dmb	ish
 8002f68:	f013 0f01 	tst.w	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x12>
}
 8002f6e:	480b      	ldr	r0, [pc, #44]	; (8002f9c <_ZN9interface16XFTimeoutManager11getInstanceEv+0x3c>)
 8002f70:	4770      	bx	lr
{
 8002f72:	b510      	push	{r4, lr}
    static ::XFTimeoutManager timeoutManager;
 8002f74:	4808      	ldr	r0, [pc, #32]	; (8002f98 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002f76:	f000 fb69 	bl	800364c <__cxa_guard_acquire>
 8002f7a:	b908      	cbnz	r0, 8002f80 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x20>
}
 8002f7c:	4807      	ldr	r0, [pc, #28]	; (8002f9c <_ZN9interface16XFTimeoutManager11getInstanceEv+0x3c>)
 8002f7e:	bd10      	pop	{r4, pc}
    static ::XFTimeoutManager timeoutManager;
 8002f80:	4c05      	ldr	r4, [pc, #20]	; (8002f98 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002f82:	1d20      	adds	r0, r4, #4
 8002f84:	f7ff ffd6 	bl	8002f34 <_ZN16XFTimeoutManagerC1Ev>
 8002f88:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x40>)
 8002f8a:	f000 fbd9 	bl	8003740 <atexit>
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f000 fb68 	bl	8003664 <__cxa_guard_release>
 8002f94:	e7f2      	b.n	8002f7c <_ZN9interface16XFTimeoutManager11getInstanceEv+0x1c>
 8002f96:	bf00      	nop
 8002f98:	20000328 	.word	0x20000328
 8002f9c:	2000032c 	.word	0x2000032c
 8002fa0:	08003185 	.word	0x08003185

08002fa4 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:
    this->pMutex_->unlock();

}

void XFTimeoutManager::returnTimeout(XFTimeout *pTimeout)
{
 8002fa4:	b508      	push	{r3, lr}
 8002fa6:	68c8      	ldr	r0, [r1, #12]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8002fa8:	6803      	ldr	r3, [r0, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4798      	blx	r3
}
 8002fae:	bd08      	pop	{r3, pc}

08002fb0 <_ZNKSt8functionIFvmEEclEm>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002fb0:	b500      	push	{lr}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	9101      	str	r1, [sp, #4]
    bool _M_empty() const { return !_M_manager; }
 8002fb6:	6883      	ldr	r3, [r0, #8]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002fb8:	b12b      	cbz	r3, 8002fc6 <_ZNKSt8functionIFvmEEclEm+0x16>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002fba:	68c3      	ldr	r3, [r0, #12]
 8002fbc:	a901      	add	r1, sp, #4
 8002fbe:	4798      	blx	r3
    }
 8002fc0:	b003      	add	sp, #12
 8002fc2:	f85d fb04 	ldr.w	pc, [sp], #4
	__throw_bad_function_call();
 8002fc6:	f000 fb76 	bl	80036b6 <_ZSt25__throw_bad_function_callv>

08002fca <_ZN16XFTimeoutManager5startESt8functionIFvmEE>:
{
 8002fca:	b508      	push	{r3, lr}
 8002fcc:	460b      	mov	r3, r1
    startTimeoutManagerTimer(this->tickInterval_);
 8002fce:	6841      	ldr	r1, [r0, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ffed 	bl	8002fb0 <_ZNKSt8functionIFvmEEclEm>
}
 8002fd6:	bd08      	pop	{r3, pc}

08002fd8 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	460c      	mov	r4, r1
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8002fdc:	680d      	ldr	r5, [r1, #0]

      void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }

      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }

      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8002fde:	6883      	ldr	r3, [r0, #8]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	6083      	str	r3, [r0, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	f000 fb5b 	bl	80036a0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002fea:	210c      	movs	r1, #12
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 fb2b 	bl	8003648 <_ZdlPvj>
      _M_erase(__position._M_const_cast());
      return __ret;
    }
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	bd38      	pop	{r3, r4, r5, pc}

08002ff6 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE>:
{
 8002ff6:	b538      	push	{r3, r4, r5, lr}
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460d      	mov	r5, r1
    this->pMutex_->lock();
 8002ffc:	6940      	ldr	r0, [r0, #20]
 8002ffe:	6803      	ldr	r3, [r0, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4798      	blx	r3
    for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 8003004:	68a2      	ldr	r2, [r4, #8]
 8003006:	e000      	b.n	800300a <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x14>
	_M_node = _M_node->_M_next;
 8003008:	6812      	ldr	r2, [r2, #0]
      { return iterator(&this->_M_impl._M_node); }
 800300a:	f104 0308 	add.w	r3, r4, #8
      { return __x._M_node != __y._M_node; }
 800300e:	4611      	mov	r1, r2
 8003010:	429a      	cmp	r2, r3
 8003012:	d007      	beq.n	8003024 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x2e>
        if((*it)->getId()== timeoutId){
 8003014:	6893      	ldr	r3, [r2, #8]
    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	429d      	cmp	r5, r3
 800301a:	d1f5      	bne.n	8003008 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x12>
            it = this->timeouts_.erase(it);// we remove the concerned timeout
 800301c:	f104 0008 	add.w	r0, r4, #8
 8003020:	f7ff ffda 	bl	8002fd8 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
    this->pMutex_->unlock();
 8003024:	6960      	ldr	r0, [r4, #20]
 8003026:	6803      	ldr	r3, [r0, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4798      	blx	r3
}
 800302c:	bd38      	pop	{r3, r4, r5, pc}

0800302e <_ZN16XFTimeoutManager4tickEv>:
{
 800302e:	b570      	push	{r4, r5, r6, lr}
 8003030:	4604      	mov	r4, r0
    this->pMutex_->lock();// lock mutex
 8003032:	6940      	ldr	r0, [r0, #20]
 8003034:	6803      	ldr	r3, [r0, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4798      	blx	r3
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800303a:	4625      	mov	r5, r4
 800303c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    if(!this->timeouts_.empty()){// if there is something in the list
 8003040:	429d      	cmp	r5, r3
 8003042:	d006      	beq.n	8003052 <_ZN16XFTimeoutManager4tickEv+0x24>
        TimeoutList::iterator it = this->timeouts_.begin();
 8003044:	4618      	mov	r0, r3
        if((*it)->getRelTicks() > 0){
 8003046:	689a      	ldr	r2, [r3, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8003048:	6953      	ldr	r3, [r2, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	dd06      	ble.n	800305c <_ZN16XFTimeoutManager4tickEv+0x2e>
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 800304e:	3b01      	subs	r3, #1
 8003050:	6153      	str	r3, [r2, #20]
    this->pMutex_->unlock();// unlock mutex
 8003052:	6960      	ldr	r0, [r4, #20]
 8003054:	6803      	ldr	r3, [r0, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4798      	blx	r3
}
 800305a:	bd70      	pop	{r4, r5, r6, pc}
      { return __x._M_node != __y._M_node; }
 800305c:	4606      	mov	r6, r0
            while(it!=this->timeouts_.end() && (*it)->getRelTicks()== 0 ){
 800305e:	4285      	cmp	r5, r0
 8003060:	d0f7      	beq.n	8003052 <_ZN16XFTimeoutManager4tickEv+0x24>
 8003062:	6881      	ldr	r1, [r0, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8003064:	694b      	ldr	r3, [r1, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f3      	bne.n	8003052 <_ZN16XFTimeoutManager4tickEv+0x24>
                returnTimeout((*it));// we push the event
 800306a:	4620      	mov	r0, r4
 800306c:	f7ff ff9a 	bl	8002fa4 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
                it = this->timeouts_.erase(it);// and we delete the timeout from the list
 8003070:	4631      	mov	r1, r6
 8003072:	f104 0008 	add.w	r0, r4, #8
 8003076:	f7ff ffaf 	bl	8002fd8 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
            while(it!=this->timeouts_.end() && (*it)->getRelTicks()== 0 ){
 800307a:	e7ef      	b.n	800305c <_ZN16XFTimeoutManager4tickEv+0x2e>

0800307c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b083      	sub	sp, #12
 8003080:	4605      	mov	r5, r0
 8003082:	460e      	mov	r6, r1
 8003084:	4617      	mov	r7, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003086:	200c      	movs	r0, #12
 8003088:	f000 faef 	bl	800366a <_Znwj>
 800308c:	4604      	mov	r4, r0
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800308e:	9500      	str	r5, [sp, #0]
 8003090:	9001      	str	r0, [sp, #4]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6083      	str	r3, [r0, #8]

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
 8003096:	2300      	movs	r3, #0
 8003098:	9301      	str	r3, [sp, #4]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 800309a:	4631      	mov	r1, r6
 800309c:	f000 faf9 	bl	8003692 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80030a0:	68ab      	ldr	r3, [r5, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60ab      	str	r3, [r5, #8]
    }
 80030a6:	4620      	mov	r0, r4
 80030a8:	b003      	add	sp, #12
 80030aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ac <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:
{
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	4606      	mov	r6, r0
 80030b2:	9101      	str	r1, [sp, #4]
    this->pMutex_->lock();
 80030b4:	6940      	ldr	r0, [r0, #20]
 80030b6:	6803      	ldr	r3, [r0, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4798      	blx	r3
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80030bc:	4630      	mov	r0, r6
 80030be:	f850 3f08 	ldr.w	r3, [r0, #8]!
    if(!this->timeouts_.empty()){// if there is something in the list
 80030c2:	4298      	cmp	r0, r3
 80030c4:	d02e      	beq.n	8003124 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x78>
      { return __x._M_node != __y._M_node; }
 80030c6:	4619      	mov	r1, r3
        for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 80030c8:	4298      	cmp	r0, r3
 80030ca:	d014      	beq.n	80030f6 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x4a>
            XFTimeout* currentTimeout = (*it);// cast the iterator into a timeout
 80030cc:	689d      	ldr	r5, [r3, #8]
 80030ce:	696c      	ldr	r4, [r5, #20]
                if(currentTimeout->getRelTicks() > pNewTimeout->getRelTicks()){// if the relTicks in current timeout are bigger than the ticks in newTimeout
 80030d0:	9a01      	ldr	r2, [sp, #4]
 80030d2:	6953      	ldr	r3, [r2, #20]
 80030d4:	42a3      	cmp	r3, r4
 80030d6:	db03      	blt.n	80030e0 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x34>
                    pNewTimeout->setRelTicks(pNewTimeout->getRelTicks()-currentTimeout->getRelTicks());
 80030d8:	1b1b      	subs	r3, r3, r4
    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
 80030da:	6153      	str	r3, [r2, #20]
	_M_node = _M_node->_M_next;
 80030dc:	680b      	ldr	r3, [r1, #0]
	return __tmp;
 80030de:	e7f2      	b.n	80030c6 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1a>
                  this->timeouts_.insert(it,pNewTimeout);// insert the timeout in the list
 80030e0:	aa01      	add	r2, sp, #4
 80030e2:	f106 0008 	add.w	r0, r6, #8
 80030e6:	f7ff ffc9 	bl	800307c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 80030ea:	696b      	ldr	r3, [r5, #20]
                    if(it!=this->timeouts_.end()){currentTimeout->setRelTicks(currentTimeout->getRelTicks()-pNewTimeout->getRelTicks());}
 80030ec:	9a01      	ldr	r2, [sp, #4]
 80030ee:	6952      	ldr	r2, [r2, #20]
 80030f0:	1a9b      	subs	r3, r3, r2
    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
 80030f2:	616b      	str	r3, [r5, #20]
        if(!timeoutInserted){// if we didn't inserted the timeout in the list, we push it now in the back
 80030f4:	e010      	b.n	8003118 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x6c>
            this->timeouts_.push_back(pNewTimeout);// add a timeout in the list
 80030f6:	f106 0408 	add.w	r4, r6, #8
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80030fa:	200c      	movs	r0, #12
 80030fc:	f000 fab5 	bl	800366a <_Znwj>
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8003100:	9402      	str	r4, [sp, #8]
 8003102:	9003      	str	r0, [sp, #12]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003104:	9b01      	ldr	r3, [sp, #4]
 8003106:	6083      	str	r3, [r0, #8]
	_M_ptr = nullptr;
 8003108:	2300      	movs	r3, #0
 800310a:	9303      	str	r3, [sp, #12]
	 __tmp->_M_hook(__position._M_node);
 800310c:	4621      	mov	r1, r4
 800310e:	f000 fac0 	bl	8003692 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8003112:	6933      	ldr	r3, [r6, #16]
 8003114:	3301      	adds	r3, #1
 8003116:	6133      	str	r3, [r6, #16]
    this->pMutex_->unlock();
 8003118:	6970      	ldr	r0, [r6, #20]
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	4798      	blx	r3
}
 8003120:	b004      	add	sp, #16
 8003122:	bd70      	pop	{r4, r5, r6, pc}
        this->timeouts_.push_front(pNewTimeout);// add a timeout in the list
 8003124:	f106 0408 	add.w	r4, r6, #8
      { return iterator(this->_M_impl._M_node._M_next); }
 8003128:	68b5      	ldr	r5, [r6, #8]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800312a:	200c      	movs	r0, #12
 800312c:	f000 fa9d 	bl	800366a <_Znwj>
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8003130:	9402      	str	r4, [sp, #8]
 8003132:	9003      	str	r0, [sp, #12]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003134:	9b01      	ldr	r3, [sp, #4]
 8003136:	6083      	str	r3, [r0, #8]
	_M_ptr = nullptr;
 8003138:	2300      	movs	r3, #0
 800313a:	9303      	str	r3, [sp, #12]
	 __tmp->_M_hook(__position._M_node);
 800313c:	4629      	mov	r1, r5
 800313e:	f000 faa8 	bl	8003692 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8003142:	6933      	ldr	r3, [r6, #16]
 8003144:	3301      	adds	r3, #1
 8003146:	6133      	str	r3, [r6, #16]
      { this->_M_insert(begin(), __x); }
 8003148:	e7e6      	b.n	8003118 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x6c>

0800314a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 800314a:	b538      	push	{r3, r4, r5, lr}
 800314c:	4605      	mov	r5, r0
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800314e:	6800      	ldr	r0, [r0, #0]
 8003150:	e004      	b.n	800315c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x12>
	  __cur = __tmp->_M_next;
 8003152:	6804      	ldr	r4, [r0, #0]
	::operator delete(__p
 8003154:	210c      	movs	r1, #12
 8003156:	f000 fa77 	bl	8003648 <_ZdlPvj>
 800315a:	4620      	mov	r0, r4
      while (__cur != &_M_impl._M_node)
 800315c:	4285      	cmp	r5, r0
 800315e:	d1f8      	bne.n	8003152 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x8>
    }
 8003160:	bd38      	pop	{r3, r4, r5, pc}
	...

08003164 <_ZN16XFTimeoutManagerD1Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8003164:	b510      	push	{r4, lr}
 8003166:	4604      	mov	r4, r0
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <_ZN16XFTimeoutManagerD1Ev+0x18>)
 800316a:	f840 3b08 	str.w	r3, [r0], #8
      { _M_clear(); }
 800316e:	f7ff ffec 	bl	800314a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
    virtual ~XFTimeoutManager() = default;
 8003172:	4b03      	ldr	r3, [pc, #12]	; (8003180 <_ZN16XFTimeoutManagerD1Ev+0x1c>)
 8003174:	6023      	str	r3, [r4, #0]
}
 8003176:	4620      	mov	r0, r4
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	08004d70 	.word	0x08004d70
 8003180:	080050b0 	.word	0x080050b0

08003184 <__tcf_0>:
    static ::XFTimeoutManager timeoutManager;
 8003184:	b508      	push	{r3, lr}
 8003186:	4802      	ldr	r0, [pc, #8]	; (8003190 <__tcf_0+0xc>)
 8003188:	f7ff ffec 	bl	8003164 <_ZN16XFTimeoutManagerD1Ev>
 800318c:	bd08      	pop	{r3, pc}
 800318e:	bf00      	nop
 8003190:	2000032c 	.word	0x2000032c

08003194 <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8003194:	b510      	push	{r4, lr}
 8003196:	4604      	mov	r4, r0
}
 8003198:	f7ff ffe4 	bl	8003164 <_ZN16XFTimeoutManagerD1Ev>
 800319c:	2118      	movs	r1, #24
 800319e:	4620      	mov	r0, r4
 80031a0:	f000 fa52 	bl	8003648 <_ZdlPvj>
 80031a4:	4620      	mov	r0, r4
 80031a6:	bd10      	pop	{r4, pc}

080031a8 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 80031a8:	b508      	push	{r3, lr}
	bInISR = true;								// Tell critical section we are in an ISR
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <XF_tick+0x24>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
	if (XF::isRunning())                        // Call tick only if XF is running
 80031b0:	f000 fa44 	bl	800363c <_ZN2XF9isRunningEv>
 80031b4:	b918      	cbnz	r0, 80031be <XF_tick+0x16>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
	}
	bInISR = false;
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <XF_tick+0x24>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	bd08      	pop	{r3, pc}
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 80031be:	f7ff fecf 	bl	8002f60 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80031c2:	6803      	ldr	r3, [r0, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4798      	blx	r3
 80031c8:	e7f5      	b.n	80031b6 <XF_tick+0xe>
 80031ca:	bf00      	nop
 80031cc:	200002d4 	.word	0x200002d4

080031d0 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 80031d0:	b508      	push	{r3, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 80031d2:	f7ff fec5 	bl	8002f60 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80031d6:	6803      	ldr	r3, [r0, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4798      	blx	r3
}
 80031dc:	bd08      	pop	{r3, pc}

080031de <XF_isRunning>:

bool XF_isRunning()
{
 80031de:	b508      	push	{r3, lr}
    return XF::isRunning();
 80031e0:	f000 fa2c 	bl	800363c <_ZN2XF9isRunningEv>
}
 80031e4:	bd08      	pop	{r3, pc}

080031e6 <_ZN12XFEventQueue4pendEv>:
bool XFEventQueue::pend()
{
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
}
 80031e6:	2000      	movs	r0, #0
 80031e8:	4770      	bx	lr

080031ea <_ZNK12XFEventQueue5emptyEv>:
	_M_last = _M_first + difference_type(_S_buffer_size());
      }

      friend bool
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      { return __x._M_cur == __y._M_cur; }
 80031ea:	6a03      	ldr	r3, [r0, #32]
 80031ec:	6900      	ldr	r0, [r0, #16]
XFEventQueue::~XFEventQueue() {
}

bool XFEventQueue::empty() const {
	return this->queue_.empty();
}
 80031ee:	4298      	cmp	r0, r3
 80031f0:	bf14      	ite	ne
 80031f2:	2000      	movne	r0, #0
 80031f4:	2001      	moveq	r0, #1
 80031f6:	4770      	bx	lr

080031f8 <_ZN12XFEventQueue5frontEv>:
		this->mutex_.unlock();
	}
	return true;
}

const XFEvent* XFEventQueue::front() {
 80031f8:	b084      	sub	sp, #16
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80031fa:	6903      	ldr	r3, [r0, #16]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80031fc:	9300      	str	r3, [sp, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80031fe:	6942      	ldr	r2, [r0, #20]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003200:	9201      	str	r2, [sp, #4]
 8003202:	6982      	ldr	r2, [r0, #24]
 8003204:	9202      	str	r2, [sp, #8]
 8003206:	69c2      	ldr	r2, [r0, #28]
 8003208:	9203      	str	r2, [sp, #12]
	return this->queue_.front();
}
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	b004      	add	sp, #16
 800320e:	4770      	bx	lr

08003210 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	460c      	mov	r4, r1
 8003214:	4615      	mov	r5, r2
 8003216:	e005      	b.n	8003224 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x14>
 8003218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800321c:	f854 0b04 	ldr.w	r0, [r4], #4
 8003220:	f000 fa12 	bl	8003648 <_ZdlPvj>
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003224:	42ac      	cmp	r4, r5
 8003226:	d3f7      	bcc.n	8003218 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x8>
	_M_deallocate_node(*__n);
    }
 8003228:	bd38      	pop	{r3, r4, r5, pc}

0800322a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800322a:	b510      	push	{r4, lr}
 800322c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
 800322e:	6803      	ldr	r3, [r0, #0]
 8003230:	b14b      	cbz	r3, 8003246 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x1c>
			   this->_M_impl._M_finish._M_node + 1);
 8003232:	6a42      	ldr	r2, [r0, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003234:	3204      	adds	r2, #4
 8003236:	6941      	ldr	r1, [r0, #20]
 8003238:	f7ff ffea 	bl	8003210 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800323c:	6861      	ldr	r1, [r4, #4]
 800323e:	0089      	lsls	r1, r1, #2
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	f000 fa01 	bl	8003648 <_ZdlPvj>
    }
 8003246:	4620      	mov	r0, r4
 8003248:	bd10      	pop	{r4, pc}
	...

0800324c <_ZN12XFEventQueueD1Ev>:
XFEventQueue::~XFEventQueue() {
 800324c:	b510      	push	{r4, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	4604      	mov	r4, r0
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <_ZN12XFEventQueueD1Ev+0x44>)
 8003254:	f840 3b08 	str.w	r3, [r0], #8
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003258:	6883      	ldr	r3, [r0, #8]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800325a:	9304      	str	r3, [sp, #16]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800325c:	68c3      	ldr	r3, [r0, #12]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800325e:	9305      	str	r3, [sp, #20]
 8003260:	6903      	ldr	r3, [r0, #16]
 8003262:	9306      	str	r3, [sp, #24]
 8003264:	6943      	ldr	r3, [r0, #20]
 8003266:	9307      	str	r3, [sp, #28]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003268:	6983      	ldr	r3, [r0, #24]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800326a:	9300      	str	r3, [sp, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800326c:	69c3      	ldr	r3, [r0, #28]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	6a03      	ldr	r3, [r0, #32]
 8003272:	9302      	str	r3, [sp, #8]
 8003274:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003276:	9303      	str	r3, [sp, #12]
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8003278:	f7ff ffd7 	bl	800322a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 * This class uses `enterCritical()` and `exitCritical()`
 * functions which must be provided by the platform.
 * Therefore, this mutex implementation can be used
 * in Embedded Systems without OS.
 */
class XFMutex : public interface::XFMutex
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <_ZN12XFEventQueueD1Ev+0x48>)
 800327e:	6063      	str	r3, [r4, #4]
 * A non-recursive mutex needs to be implemented.
 */
class XFMutex
{
public:
    virtual ~XFMutex() = default;
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <_ZN12XFEventQueueD1Ev+0x4c>)
 8003282:	6063      	str	r3, [r4, #4]
 * @brief Interface to be implemented by the event queue
 */
class XFEventQueue
{
public:
    virtual ~XFEventQueue() = default;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <_ZN12XFEventQueueD1Ev+0x50>)
 8003286:	6023      	str	r3, [r4, #0]
}
 8003288:	4620      	mov	r0, r4
 800328a:	b008      	add	sp, #32
 800328c:	bd10      	pop	{r4, pc}
 800328e:	bf00      	nop
 8003290:	08004d9c 	.word	0x08004d9c
 8003294:	08004dc0 	.word	0x08004dc0
 8003298:	08005130 	.word	0x08005130
 800329c:	0800510c 	.word	0x0800510c

080032a0 <_ZN12XFEventQueueD0Ev>:
XFEventQueue::~XFEventQueue() {
 80032a0:	b510      	push	{r4, lr}
 80032a2:	4604      	mov	r4, r0
}
 80032a4:	f7ff ffd2 	bl	800324c <_ZN12XFEventQueueD1Ev>
 80032a8:	2130      	movs	r1, #48	; 0x30
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 f9cc 	bl	8003648 <_ZdlPvj>
 80032b0:	4620      	mov	r0, r4
 80032b2:	bd10      	pop	{r4, pc}

080032b4 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80032b4:	b510      	push	{r4, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032bc:	68c0      	ldr	r0, [r0, #12]
 80032be:	f000 f9c3 	bl	8003648 <_ZdlPvj>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80032c2:	6963      	ldr	r3, [r4, #20]
 80032c4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 80032c6:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80032cc:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80032d0:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80032d2:	60a3      	str	r3, [r4, #8]
    }
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <_ZN12XFEventQueue3popEv>:

void XFEventQueue::pop() {
 80032d6:	b508      	push	{r3, lr}
       */
      void
      pop()
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80032d8:	3008      	adds	r0, #8
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 80032da:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80032dc:	6902      	ldr	r2, [r0, #16]
 80032de:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d002      	beq.n	80032ea <_ZN12XFEventQueue3popEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80032e4:	3304      	adds	r3, #4
 80032e6:	6083      	str	r3, [r0, #8]
	this->queue_.pop();
}
 80032e8:	bd08      	pop	{r3, pc}
	  }
	else
	  _M_pop_front_aux();
 80032ea:	f7ff ffe3 	bl	80032b4 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
 80032ee:	e7fb      	b.n	80032e8 <_ZN12XFEventQueue3popEv+0x12>

080032f0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	460c      	mov	r4, r1
 80032f4:	4615      	mov	r5, r2
 80032f6:	e005      	b.n	8003304 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x14>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80032f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032fc:	f000 f9b5 	bl	800366a <_Znwj>
	    *__cur = this->_M_allocate_node();
 8003300:	f844 0b04 	str.w	r0, [r4], #4
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003304:	42ac      	cmp	r4, r5
 8003306:	d3f7      	bcc.n	80032f8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x8>
    }
 8003308:	bd38      	pop	{r3, r4, r5, pc}

0800330a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800330a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800330e:	b083      	sub	sp, #12
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003314:	09cb      	lsrs	r3, r1, #7
 8003316:	1c5e      	adds	r6, r3, #1
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003318:	2208      	movs	r2, #8
 800331a:	9200      	str	r2, [sp, #0]
					   size_t(__num_nodes + 2));
 800331c:	3303      	adds	r3, #3
 800331e:	9301      	str	r3, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003320:	4293      	cmp	r3, r2
 8003322:	d82f      	bhi.n	8003384 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7a>
	return __b;
      return __a;
 8003324:	466b      	mov	r3, sp
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	6060      	str	r0, [r4, #4]
	if (__n > this->_M_max_size())
 800332a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800332e:	d22b      	bcs.n	8003388 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003330:	0080      	lsls	r0, r0, #2
 8003332:	f000 f99a 	bl	800366a <_Znwj>
 8003336:	4680      	mov	r8, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003338:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800333a:	6867      	ldr	r7, [r4, #4]
 800333c:	1bbf      	subs	r7, r7, r6
 800333e:	087f      	lsrs	r7, r7, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003340:	eb00 0987 	add.w	r9, r0, r7, lsl #2
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003344:	eb09 0686 	add.w	r6, r9, r6, lsl #2
	{ _M_create_nodes(__nstart, __nfinish); }
 8003348:	4632      	mov	r2, r6
 800334a:	4649      	mov	r1, r9
 800334c:	4620      	mov	r0, r4
 800334e:	f7ff ffcf 	bl	80032f0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
	_M_node = __new_node;
 8003352:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
 8003356:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 800335a:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800335c:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8003360:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003362:	1f33      	subs	r3, r6, #4
	_M_node = __new_node;
 8003364:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8003366:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800336a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800336c:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8003370:	6221      	str	r1, [r4, #32]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003372:	60a2      	str	r2, [r4, #8]
					% __deque_buf_size(sizeof(_Tp)));
 8003374:	f005 057f 	and.w	r5, r5, #127	; 0x7f
					+ __num_elements
 8003378:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800337c:	61a3      	str	r3, [r4, #24]
    }
 800337e:	b003      	add	sp, #12
 8003380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __b;
 8003384:	ab01      	add	r3, sp, #4
 8003386:	e7ce      	b.n	8003326 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x1c>
	  std::__throw_bad_alloc();
 8003388:	f000 f98f 	bl	80036aa <_ZSt17__throw_bad_allocv>

0800338c <_ZN12XFEventQueueC1Ev>:
XFEventQueue::XFEventQueue() {
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	4605      	mov	r5, r0
    virtual const XFEvent * front() = 0;									///< Returns pointer to next event to pop.
    virtual void pop() = 0;													///< Pops the next event from the queue.
    virtual bool pend() = 0;												///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <_ZN12XFEventQueueC1Ev+0x44>)
 8003392:	6003      	str	r3, [r0, #0]
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <_ZN12XFEventQueueC1Ev+0x48>)
 8003396:	6003      	str	r3, [r0, #0]
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <_ZN12XFEventQueueC1Ev+0x4c>)
 800339a:	6043      	str	r3, [r0, #4]
	void unlock() override;

	bool tryLock(int32_t timeout = 0) override;

protected:
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <_ZN12XFEventQueueC1Ev+0x50>)
 800339e:	6043      	str	r3, [r0, #4]
 80033a0:	f100 0408 	add.w	r4, r0, #8
	: c() { }
 80033a4:	2228      	movs	r2, #40	; 0x28
 80033a6:	2100      	movs	r1, #0
 80033a8:	4620      	mov	r0, r4
 80033aa:	f000 fa3d 	bl	8003828 <memset>
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80033ae:	2100      	movs	r1, #0
 80033b0:	60a9      	str	r1, [r5, #8]
 80033b2:	60e9      	str	r1, [r5, #12]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80033b4:	6129      	str	r1, [r5, #16]
 80033b6:	6169      	str	r1, [r5, #20]
 80033b8:	61a9      	str	r1, [r5, #24]
 80033ba:	61e9      	str	r1, [r5, #28]
 80033bc:	6229      	str	r1, [r5, #32]
 80033be:	6269      	str	r1, [r5, #36]	; 0x24
 80033c0:	62a9      	str	r1, [r5, #40]	; 0x28
 80033c2:	62e9      	str	r1, [r5, #44]	; 0x2c
      { _M_initialize_map(0); }
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff ffa0 	bl	800330a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
}
 80033ca:	4628      	mov	r0, r5
 80033cc:	bd38      	pop	{r3, r4, r5, pc}
 80033ce:	bf00      	nop
 80033d0:	0800510c 	.word	0x0800510c
 80033d4:	08004d9c 	.word	0x08004d9c
 80033d8:	08005130 	.word	0x08005130
 80033dc:	08004dc0 	.word	0x08004dc0

080033e0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	4606      	mov	r6, r0
 80033e8:	9101      	str	r1, [sp, #4]
 80033ea:	4690      	mov	r8, r2
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80033ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80033ee:	6940      	ldr	r0, [r0, #20]
 80033f0:	1a17      	subs	r7, r2, r0
 80033f2:	10bd      	asrs	r5, r7, #2
 80033f4:	3501      	adds	r5, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80033f6:	440d      	add	r5, r1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80033f8:	6873      	ldr	r3, [r6, #4]
 80033fa:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 80033fe:	d922      	bls.n	8003446 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x66>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003400:	f8d6 c000 	ldr.w	ip, [r6]
					 - __new_num_nodes) / 2
 8003404:	1b5c      	subs	r4, r3, r5
 8003406:	0864      	lsrs	r4, r4, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003408:	00a4      	lsls	r4, r4, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800340a:	f1b8 0f00 	cmp.w	r8, #0
 800340e:	d001      	beq.n	8003414 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x34>
 8003410:	0089      	lsls	r1, r1, #2
 8003412:	e000      	b.n	8003416 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x36>
 8003414:	2100      	movs	r1, #0
 8003416:	440c      	add	r4, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003418:	4464      	add	r4, ip
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800341a:	42a0      	cmp	r0, r4
 800341c:	d908      	bls.n	8003430 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
	    std::copy(this->_M_impl._M_start._M_node,
 800341e:	1d13      	adds	r3, r2, #4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8003420:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 8003422:	4298      	cmp	r0, r3
 8003424:	d03b      	beq.n	800349e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003426:	4601      	mov	r1, r0
 8003428:	4620      	mov	r0, r4
 800342a:	f000 f9e3 	bl	80037f4 <memmove>
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800342e:	e036      	b.n	800349e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003430:	1d13      	adds	r3, r2, #4
 8003432:	1d3a      	adds	r2, r7, #4
 8003434:	18a5      	adds	r5, r4, r2
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8003436:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 8003438:	4298      	cmp	r0, r3
 800343a:	d030      	beq.n	800349e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800343c:	4601      	mov	r1, r0
 800343e:	1aa8      	subs	r0, r5, r2
 8003440:	f000 f9d8 	bl	80037f4 <memmove>
	  return __result - _Num;
 8003444:	e02b      	b.n	800349e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
				     + std::max(this->_M_impl._M_map_size,
 8003446:	1d32      	adds	r2, r6, #4
      if (__a < __b)
 8003448:	4299      	cmp	r1, r3
 800344a:	d838      	bhi.n	80034be <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xde>
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003450:	f103 0902 	add.w	r9, r3, #2
	if (__n > this->_M_max_size())
 8003454:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 8003458:	d233      	bcs.n	80034c2 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800345a:	ea4f 0089 	mov.w	r0, r9, lsl #2
 800345e:	f000 f904 	bl	800366a <_Znwj>
 8003462:	4682      	mov	sl, r0
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003464:	eba9 0405 	sub.w	r4, r9, r5
 8003468:	0864      	lsrs	r4, r4, #1
 800346a:	00a4      	lsls	r4, r4, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800346c:	f1b8 0f00 	cmp.w	r8, #0
 8003470:	d029      	beq.n	80034c6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe6>
 8003472:	9d01      	ldr	r5, [sp, #4]
 8003474:	00ad      	lsls	r5, r5, #2
 8003476:	442c      	add	r4, r5
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003478:	4454      	add	r4, sl
	  std::copy(this->_M_impl._M_start._M_node,
 800347a:	6971      	ldr	r1, [r6, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800347c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800347e:	3304      	adds	r3, #4
	  const ptrdiff_t _Num = __last - __first;
 8003480:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 8003482:	4299      	cmp	r1, r3
 8003484:	d002      	beq.n	800348c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xac>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003486:	4620      	mov	r0, r4
 8003488:	f000 f9b4 	bl	80037f4 <memmove>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800348c:	6871      	ldr	r1, [r6, #4]
	::operator delete(__p
 800348e:	0089      	lsls	r1, r1, #2
 8003490:	6830      	ldr	r0, [r6, #0]
 8003492:	f000 f8d9 	bl	8003648 <_ZdlPvj>

	  this->_M_impl._M_map = __new_map;
 8003496:	f8c6 a000 	str.w	sl, [r6]
	  this->_M_impl._M_map_size = __new_map_size;
 800349a:	f8c6 9004 	str.w	r9, [r6, #4]
	_M_node = __new_node;
 800349e:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80034a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034a8:	6133      	str	r3, [r6, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80034aa:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
 80034ac:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
 80034ae:	59e3      	ldr	r3, [r4, r7]
 80034b0:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80034b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034b6:	6233      	str	r3, [r6, #32]
    }
 80034b8:	b002      	add	sp, #8
 80034ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __b;
 80034be:	aa01      	add	r2, sp, #4
 80034c0:	e7c4      	b.n	800344c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x6c>
	  std::__throw_bad_alloc();
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt17__throw_bad_allocv>
			 + (__add_at_front ? __nodes_to_add : 0);
 80034c6:	2500      	movs	r5, #0
 80034c8:	e7d5      	b.n	8003476 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x96>
	...

080034cc <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	4604      	mov	r4, r0
 80034d0:	460d      	mov	r5, r1
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80034d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034d4:	6942      	ldr	r2, [r0, #20]
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	109b      	asrs	r3, r3, #2
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	6983      	ldr	r3, [r0, #24]
 80034de:	69c0      	ldr	r0, [r0, #28]
 80034e0:	1a1b      	subs	r3, r3, r0
 80034e2:	109b      	asrs	r3, r3, #2
 80034e4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
 80034e8:	6922      	ldr	r2, [r4, #16]
 80034ea:	68a1      	ldr	r1, [r4, #8]
 80034ec:	1a52      	subs	r2, r2, r1
 80034ee:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	if (size() == max_size())
 80034f2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01a      	beq.n	8003530 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x64>
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80034fa:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80034fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034fe:	6821      	ldr	r1, [r4, #0]
 8003500:	1a52      	subs	r2, r2, r1
 8003502:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003506:	2b01      	cmp	r3, #1
 8003508:	d915      	bls.n	8003536 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x6a>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800350a:	6a66      	ldr	r6, [r4, #36]	; 0x24
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800350c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003510:	f000 f8ab 	bl	800366a <_Znwj>
 8003514:	6070      	str	r0, [r6, #4]
	    _Alloc_traits::construct(this->_M_impl,
 8003516:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003518:	682a      	ldr	r2, [r5, #0]
 800351a:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800351c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800351e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 8003520:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003526:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800352a:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800352c:	61a3      	str	r3, [r4, #24]
      }
 800352e:	bd70      	pop	{r4, r5, r6, pc}
	  __throw_length_error(
 8003530:	4804      	ldr	r0, [pc, #16]	; (8003544 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x78>)
 8003532:	f000 f8bd 	bl	80036b0 <_ZSt20__throw_length_errorPKc>
	  _M_reallocate_map(__nodes_to_add, false);
 8003536:	2200      	movs	r2, #0
 8003538:	2101      	movs	r1, #1
 800353a:	4620      	mov	r0, r4
 800353c:	f7ff ff50 	bl	80033e0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
 8003540:	e7e3      	b.n	800350a <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x3e>
 8003542:	bf00      	nop
 8003544:	080050d4 	.word	0x080050d4

08003548 <_ZN12XFEventQueue4pushEPK7XFEventb>:
bool XFEventQueue::push(const XFEvent *pEvent, bool fromISR) {
 8003548:	b530      	push	{r4, r5, lr}
 800354a:	b083      	sub	sp, #12
 800354c:	4604      	mov	r4, r0
 800354e:	9101      	str	r1, [sp, #4]
	if(fromISR){
 8003550:	4615      	mov	r5, r2
 8003552:	b97a      	cbnz	r2, 8003574 <_ZN12XFEventQueue4pushEPK7XFEventb+0x2c>
      { c.push_back(__x); }
 8003554:	f104 0008 	add.w	r0, r4, #8
	if (this->_M_impl._M_finish._M_cur
 8003558:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800355a:	6a03      	ldr	r3, [r0, #32]
 800355c:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800355e:	429a      	cmp	r2, r3
 8003560:	d00c      	beq.n	800357c <_ZN12XFEventQueue4pushEPK7XFEventb+0x34>
 8003562:	9b01      	ldr	r3, [sp, #4]
 8003564:	6013      	str	r3, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
 8003566:	6983      	ldr	r3, [r0, #24]
 8003568:	3304      	adds	r3, #4
 800356a:	6183      	str	r3, [r0, #24]
	if(fromISR){
 800356c:	b955      	cbnz	r5, 8003584 <_ZN12XFEventQueue4pushEPK7XFEventb+0x3c>
}
 800356e:	2001      	movs	r0, #1
 8003570:	b003      	add	sp, #12
 8003572:	bd30      	pop	{r4, r5, pc}
		this->mutex_.lock();
 8003574:	3004      	adds	r0, #4
 8003576:	f000 f815 	bl	80035a4 <_ZN7XFMutex4lockEv>
 800357a:	e7eb      	b.n	8003554 <_ZN12XFEventQueue4pushEPK7XFEventb+0xc>
	  _M_push_back_aux(__x);
 800357c:	a901      	add	r1, sp, #4
 800357e:	f7ff ffa5 	bl	80034cc <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
 8003582:	e7f3      	b.n	800356c <_ZN12XFEventQueue4pushEPK7XFEventb+0x24>
		this->mutex_.unlock();
 8003584:	1d20      	adds	r0, r4, #4
 8003586:	f000 f811 	bl	80035ac <_ZN7XFMutex6unlockEv>
 800358a:	e7f0      	b.n	800356e <_ZN12XFEventQueue4pushEPK7XFEventb+0x26>

0800358c <_ZN7XFMutex7tryLockEl>:
	exitCritical();
}

bool XFMutex::tryLock(int32_t timeout) {
	return true;
}
 800358c:	2001      	movs	r0, #1
 800358e:	4770      	bx	lr

08003590 <_ZN7XFMutexD1Ev>:
class XFMutex : public interface::XFMutex
 8003590:	4a02      	ldr	r2, [pc, #8]	; (800359c <_ZN7XFMutexD1Ev+0xc>)
 8003592:	6002      	str	r2, [r0, #0]
    virtual ~XFMutex() = default;
 8003594:	4a02      	ldr	r2, [pc, #8]	; (80035a0 <_ZN7XFMutexD1Ev+0x10>)
 8003596:	6002      	str	r2, [r0, #0]
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	08004dc0 	.word	0x08004dc0
 80035a0:	08005130 	.word	0x08005130

080035a4 <_ZN7XFMutex4lockEv>:
void XFMutex::lock() {
 80035a4:	b508      	push	{r3, lr}
	enterCritical();
 80035a6:	f7ff fa3b 	bl	8002a20 <_Z13enterCriticalv>
}
 80035aa:	bd08      	pop	{r3, pc}

080035ac <_ZN7XFMutex6unlockEv>:
void XFMutex::unlock() {
 80035ac:	b508      	push	{r3, lr}
	exitCritical();
 80035ae:	f7ff fa47 	bl	8002a40 <_Z12exitCriticalv>
}
 80035b2:	bd08      	pop	{r3, pc}

080035b4 <_ZN7XFMutexD0Ev>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	4604      	mov	r4, r0
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <_ZN7XFMutexD0Ev+0x18>)
 80035ba:	6003      	str	r3, [r0, #0]
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <_ZN7XFMutexD0Ev+0x1c>)
 80035be:	6003      	str	r3, [r0, #0]
 80035c0:	2104      	movs	r1, #4
 80035c2:	f000 f841 	bl	8003648 <_ZdlPvj>
 80035c6:	4620      	mov	r0, r4
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	08004dc0 	.word	0x08004dc0
 80035d0:	08005130 	.word	0x08005130

080035d4 <_ZN9interface7XFMutex6createEv>:
{
 80035d4:	b508      	push	{r3, lr}
    return new ::XFMutex;
 80035d6:	2004      	movs	r0, #4
 80035d8:	f000 f847 	bl	800366a <_Znwj>
    XFMutex() = default;
 80035dc:	4a02      	ldr	r2, [pc, #8]	; (80035e8 <_ZN9interface7XFMutex6createEv+0x14>)
 80035de:	6002      	str	r2, [r0, #0]
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 80035e0:	4a02      	ldr	r2, [pc, #8]	; (80035ec <_ZN9interface7XFMutex6createEv+0x18>)
 80035e2:	6002      	str	r2, [r0, #0]
}
 80035e4:	bd08      	pop	{r3, pc}
 80035e6:	bf00      	nop
 80035e8:	08005130 	.word	0x08005130
 80035ec:	08004dc0 	.word	0x08004dc0

080035f0 <_ZN2XF10initializeEiiPPc>:
void XF_execOnce()
{
    XF::execOnce();
}

void XF::initialize(int timeInterval, int argc, char *argv[]) {
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
	XF::isInitialized_=true;
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <_ZN2XF10initializeEiiPPc+0x18>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
	interface::XFTimeoutManager::getInstance()->initialize(timeInterval);
 80035fa:	f7ff fcb1 	bl	8002f60 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80035fe:	6803      	ldr	r3, [r0, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4621      	mov	r1, r4
 8003604:	4798      	blx	r3
}
 8003606:	bd10      	pop	{r4, pc}
 8003608:	20000344 	.word	0x20000344

0800360c <XF_initialize>:
{
 800360c:	b508      	push	{r3, lr}
    XF::initialize(timeInterval);
 800360e:	2200      	movs	r2, #0
 8003610:	4611      	mov	r1, r2
 8003612:	f7ff ffed 	bl	80035f0 <_ZN2XF10initializeEiiPPc>
}
 8003616:	bd08      	pop	{r3, pc}

08003618 <_ZN2XF8execOnceEv>:
int XF::exec() {
	XF::isRunning_ =true;
	return interface::XFDispatcher::getInstance()->execute();
}

int XF::execOnce() {
 8003618:	b508      	push	{r3, lr}
	XF::isRunning_ =true;
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <_ZN2XF8execOnceEv+0x18>)
 800361c:	2201      	movs	r2, #1
 800361e:	705a      	strb	r2, [r3, #1]
	interface::XFDispatcher::getInstance()->executeOnce();
 8003620:	f7ff fc08 	bl	8002e34 <_ZN9interface12XFDispatcher11getInstanceEv>
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	4798      	blx	r3
	return 0;
}
 800362a:	2000      	movs	r0, #0
 800362c:	bd08      	pop	{r3, pc}
 800362e:	bf00      	nop
 8003630:	20000344 	.word	0x20000344

08003634 <XF_execOnce>:
{
 8003634:	b508      	push	{r3, lr}
    XF::execOnce();
 8003636:	f7ff ffef 	bl	8003618 <_ZN2XF8execOnceEv>
}
 800363a:	bd08      	pop	{r3, pc}

0800363c <_ZN2XF9isRunningEv>:

bool XF::isRunning() {
	return XF::isRunning_;
}
 800363c:	4b01      	ldr	r3, [pc, #4]	; (8003644 <_ZN2XF9isRunningEv+0x8>)
 800363e:	7858      	ldrb	r0, [r3, #1]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000344 	.word	0x20000344

08003648 <_ZdlPvj>:
 8003648:	f000 b838 	b.w	80036bc <_ZdlPv>

0800364c <__cxa_guard_acquire>:
 800364c:	6803      	ldr	r3, [r0, #0]
 800364e:	07db      	lsls	r3, r3, #31
 8003650:	d406      	bmi.n	8003660 <__cxa_guard_acquire+0x14>
 8003652:	7843      	ldrb	r3, [r0, #1]
 8003654:	b103      	cbz	r3, 8003658 <__cxa_guard_acquire+0xc>
 8003656:	deff      	udf	#255	; 0xff
 8003658:	2301      	movs	r3, #1
 800365a:	7043      	strb	r3, [r0, #1]
 800365c:	4618      	mov	r0, r3
 800365e:	4770      	bx	lr
 8003660:	2000      	movs	r0, #0
 8003662:	4770      	bx	lr

08003664 <__cxa_guard_release>:
 8003664:	2301      	movs	r3, #1
 8003666:	6003      	str	r3, [r0, #0]
 8003668:	4770      	bx	lr

0800366a <_Znwj>:
 800366a:	2801      	cmp	r0, #1
 800366c:	bf38      	it	cc
 800366e:	2001      	movcc	r0, #1
 8003670:	b510      	push	{r4, lr}
 8003672:	4604      	mov	r4, r0
 8003674:	4620      	mov	r0, r4
 8003676:	f000 f89f 	bl	80037b8 <malloc>
 800367a:	b930      	cbnz	r0, 800368a <_Znwj+0x20>
 800367c:	f000 f832 	bl	80036e4 <_ZSt15get_new_handlerv>
 8003680:	b908      	cbnz	r0, 8003686 <_Znwj+0x1c>
 8003682:	f000 f837 	bl	80036f4 <abort>
 8003686:	4780      	blx	r0
 8003688:	e7f4      	b.n	8003674 <_Znwj+0xa>
 800368a:	bd10      	pop	{r4, pc}

0800368c <__cxa_pure_virtual>:
 800368c:	b508      	push	{r3, lr}
 800368e:	f000 f823 	bl	80036d8 <_ZSt9terminatev>

08003692 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8003692:	684b      	ldr	r3, [r1, #4]
 8003694:	6043      	str	r3, [r0, #4]
 8003696:	684b      	ldr	r3, [r1, #4]
 8003698:	6001      	str	r1, [r0, #0]
 800369a:	6018      	str	r0, [r3, #0]
 800369c:	6048      	str	r0, [r1, #4]
 800369e:	4770      	bx	lr

080036a0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80036a0:	e9d0 3200 	ldrd	r3, r2, [r0]
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	4770      	bx	lr

080036aa <_ZSt17__throw_bad_allocv>:
 80036aa:	b508      	push	{r3, lr}
 80036ac:	f000 f822 	bl	80036f4 <abort>

080036b0 <_ZSt20__throw_length_errorPKc>:
 80036b0:	b508      	push	{r3, lr}
 80036b2:	f000 f81f 	bl	80036f4 <abort>

080036b6 <_ZSt25__throw_bad_function_callv>:
 80036b6:	b508      	push	{r3, lr}
 80036b8:	f000 f81c 	bl	80036f4 <abort>

080036bc <_ZdlPv>:
 80036bc:	f000 b884 	b.w	80037c8 <free>

080036c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80036c0:	b508      	push	{r3, lr}
 80036c2:	4780      	blx	r0
 80036c4:	f000 f816 	bl	80036f4 <abort>

080036c8 <_ZSt13get_terminatev>:
 80036c8:	4b02      	ldr	r3, [pc, #8]	; (80036d4 <_ZSt13get_terminatev+0xc>)
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	f3bf 8f5b 	dmb	ish
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000010 	.word	0x20000010

080036d8 <_ZSt9terminatev>:
 80036d8:	b508      	push	{r3, lr}
 80036da:	f7ff fff5 	bl	80036c8 <_ZSt13get_terminatev>
 80036de:	f7ff ffef 	bl	80036c0 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080036e4 <_ZSt15get_new_handlerv>:
 80036e4:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <_ZSt15get_new_handlerv+0xc>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	f3bf 8f5b 	dmb	ish
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000348 	.word	0x20000348

080036f4 <abort>:
 80036f4:	b508      	push	{r3, lr}
 80036f6:	2006      	movs	r0, #6
 80036f8:	f000 fca4 	bl	8004044 <raise>
 80036fc:	2001      	movs	r0, #1
 80036fe:	f001 fab7 	bl	8004c70 <_exit>
	...

08003704 <__assert_func>:
 8003704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003706:	4614      	mov	r4, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <__assert_func+0x2c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4605      	mov	r5, r0
 8003710:	68d8      	ldr	r0, [r3, #12]
 8003712:	b14c      	cbz	r4, 8003728 <__assert_func+0x24>
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <__assert_func+0x30>)
 8003716:	9100      	str	r1, [sp, #0]
 8003718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800371c:	4906      	ldr	r1, [pc, #24]	; (8003738 <__assert_func+0x34>)
 800371e:	462b      	mov	r3, r5
 8003720:	f000 f814 	bl	800374c <fiprintf>
 8003724:	f7ff ffe6 	bl	80036f4 <abort>
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <__assert_func+0x38>)
 800372a:	461c      	mov	r4, r3
 800372c:	e7f3      	b.n	8003716 <__assert_func+0x12>
 800372e:	bf00      	nop
 8003730:	20000014 	.word	0x20000014
 8003734:	08005144 	.word	0x08005144
 8003738:	08005151 	.word	0x08005151
 800373c:	0800517f 	.word	0x0800517f

08003740 <atexit>:
 8003740:	2300      	movs	r3, #0
 8003742:	4601      	mov	r1, r0
 8003744:	461a      	mov	r2, r3
 8003746:	4618      	mov	r0, r3
 8003748:	f000 bd78 	b.w	800423c <__register_exitproc>

0800374c <fiprintf>:
 800374c:	b40e      	push	{r1, r2, r3}
 800374e:	b503      	push	{r0, r1, lr}
 8003750:	4601      	mov	r1, r0
 8003752:	ab03      	add	r3, sp, #12
 8003754:	4805      	ldr	r0, [pc, #20]	; (800376c <fiprintf+0x20>)
 8003756:	f853 2b04 	ldr.w	r2, [r3], #4
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	f000 f975 	bl	8003a4c <_vfiprintf_r>
 8003762:	b002      	add	sp, #8
 8003764:	f85d eb04 	ldr.w	lr, [sp], #4
 8003768:	b003      	add	sp, #12
 800376a:	4770      	bx	lr
 800376c:	20000014 	.word	0x20000014

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	4d0d      	ldr	r5, [pc, #52]	; (80037a8 <__libc_init_array+0x38>)
 8003774:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	2600      	movs	r6, #0
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	4d0b      	ldr	r5, [pc, #44]	; (80037b0 <__libc_init_array+0x40>)
 8003782:	4c0c      	ldr	r4, [pc, #48]	; (80037b4 <__libc_init_array+0x44>)
 8003784:	f001 fa76 	bl	8004c74 <_init>
 8003788:	1b64      	subs	r4, r4, r5
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	2600      	movs	r6, #0
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	08005220 	.word	0x08005220
 80037ac:	08005220 	.word	0x08005220
 80037b0:	08005220 	.word	0x08005220
 80037b4:	08005228 	.word	0x08005228

080037b8 <malloc>:
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <malloc+0xc>)
 80037ba:	4601      	mov	r1, r0
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	f000 b8a7 	b.w	8003910 <_malloc_r>
 80037c2:	bf00      	nop
 80037c4:	20000014 	.word	0x20000014

080037c8 <free>:
 80037c8:	4b02      	ldr	r3, [pc, #8]	; (80037d4 <free+0xc>)
 80037ca:	4601      	mov	r1, r0
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	f000 b833 	b.w	8003838 <_free_r>
 80037d2:	bf00      	nop
 80037d4:	20000014 	.word	0x20000014

080037d8 <memcpy>:
 80037d8:	440a      	add	r2, r1
 80037da:	4291      	cmp	r1, r2
 80037dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80037e0:	d100      	bne.n	80037e4 <memcpy+0xc>
 80037e2:	4770      	bx	lr
 80037e4:	b510      	push	{r4, lr}
 80037e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ee:	4291      	cmp	r1, r2
 80037f0:	d1f9      	bne.n	80037e6 <memcpy+0xe>
 80037f2:	bd10      	pop	{r4, pc}

080037f4 <memmove>:
 80037f4:	4288      	cmp	r0, r1
 80037f6:	b510      	push	{r4, lr}
 80037f8:	eb01 0402 	add.w	r4, r1, r2
 80037fc:	d902      	bls.n	8003804 <memmove+0x10>
 80037fe:	4284      	cmp	r4, r0
 8003800:	4623      	mov	r3, r4
 8003802:	d807      	bhi.n	8003814 <memmove+0x20>
 8003804:	1e43      	subs	r3, r0, #1
 8003806:	42a1      	cmp	r1, r4
 8003808:	d008      	beq.n	800381c <memmove+0x28>
 800380a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800380e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003812:	e7f8      	b.n	8003806 <memmove+0x12>
 8003814:	4402      	add	r2, r0
 8003816:	4601      	mov	r1, r0
 8003818:	428a      	cmp	r2, r1
 800381a:	d100      	bne.n	800381e <memmove+0x2a>
 800381c:	bd10      	pop	{r4, pc}
 800381e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003826:	e7f7      	b.n	8003818 <memmove+0x24>

08003828 <memset>:
 8003828:	4402      	add	r2, r0
 800382a:	4603      	mov	r3, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	f803 1b01 	strb.w	r1, [r3], #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <_free_r>:
 8003838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800383a:	2900      	cmp	r1, #0
 800383c:	d044      	beq.n	80038c8 <_free_r+0x90>
 800383e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003842:	9001      	str	r0, [sp, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f1a1 0404 	sub.w	r4, r1, #4
 800384a:	bfb8      	it	lt
 800384c:	18e4      	addlt	r4, r4, r3
 800384e:	f000 ff77 	bl	8004740 <__malloc_lock>
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <_free_r+0x94>)
 8003854:	9801      	ldr	r0, [sp, #4]
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	b933      	cbnz	r3, 8003868 <_free_r+0x30>
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	6014      	str	r4, [r2, #0]
 800385e:	b003      	add	sp, #12
 8003860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003864:	f000 bf72 	b.w	800474c <__malloc_unlock>
 8003868:	42a3      	cmp	r3, r4
 800386a:	d908      	bls.n	800387e <_free_r+0x46>
 800386c:	6825      	ldr	r5, [r4, #0]
 800386e:	1961      	adds	r1, r4, r5
 8003870:	428b      	cmp	r3, r1
 8003872:	bf01      	itttt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	1949      	addeq	r1, r1, r5
 800387a:	6021      	streq	r1, [r4, #0]
 800387c:	e7ed      	b.n	800385a <_free_r+0x22>
 800387e:	461a      	mov	r2, r3
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	b10b      	cbz	r3, 8003888 <_free_r+0x50>
 8003884:	42a3      	cmp	r3, r4
 8003886:	d9fa      	bls.n	800387e <_free_r+0x46>
 8003888:	6811      	ldr	r1, [r2, #0]
 800388a:	1855      	adds	r5, r2, r1
 800388c:	42a5      	cmp	r5, r4
 800388e:	d10b      	bne.n	80038a8 <_free_r+0x70>
 8003890:	6824      	ldr	r4, [r4, #0]
 8003892:	4421      	add	r1, r4
 8003894:	1854      	adds	r4, r2, r1
 8003896:	42a3      	cmp	r3, r4
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	d1e0      	bne.n	800385e <_free_r+0x26>
 800389c:	681c      	ldr	r4, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	6053      	str	r3, [r2, #4]
 80038a2:	4421      	add	r1, r4
 80038a4:	6011      	str	r1, [r2, #0]
 80038a6:	e7da      	b.n	800385e <_free_r+0x26>
 80038a8:	d902      	bls.n	80038b0 <_free_r+0x78>
 80038aa:	230c      	movs	r3, #12
 80038ac:	6003      	str	r3, [r0, #0]
 80038ae:	e7d6      	b.n	800385e <_free_r+0x26>
 80038b0:	6825      	ldr	r5, [r4, #0]
 80038b2:	1961      	adds	r1, r4, r5
 80038b4:	428b      	cmp	r3, r1
 80038b6:	bf04      	itt	eq
 80038b8:	6819      	ldreq	r1, [r3, #0]
 80038ba:	685b      	ldreq	r3, [r3, #4]
 80038bc:	6063      	str	r3, [r4, #4]
 80038be:	bf04      	itt	eq
 80038c0:	1949      	addeq	r1, r1, r5
 80038c2:	6021      	streq	r1, [r4, #0]
 80038c4:	6054      	str	r4, [r2, #4]
 80038c6:	e7ca      	b.n	800385e <_free_r+0x26>
 80038c8:	b003      	add	sp, #12
 80038ca:	bd30      	pop	{r4, r5, pc}
 80038cc:	2000034c 	.word	0x2000034c

080038d0 <sbrk_aligned>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4e0e      	ldr	r6, [pc, #56]	; (800390c <sbrk_aligned+0x3c>)
 80038d4:	460c      	mov	r4, r1
 80038d6:	6831      	ldr	r1, [r6, #0]
 80038d8:	4605      	mov	r5, r0
 80038da:	b911      	cbnz	r1, 80038e2 <sbrk_aligned+0x12>
 80038dc:	f000 fb7a 	bl	8003fd4 <_sbrk_r>
 80038e0:	6030      	str	r0, [r6, #0]
 80038e2:	4621      	mov	r1, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 fb75 	bl	8003fd4 <_sbrk_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d00a      	beq.n	8003904 <sbrk_aligned+0x34>
 80038ee:	1cc4      	adds	r4, r0, #3
 80038f0:	f024 0403 	bic.w	r4, r4, #3
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d007      	beq.n	8003908 <sbrk_aligned+0x38>
 80038f8:	1a21      	subs	r1, r4, r0
 80038fa:	4628      	mov	r0, r5
 80038fc:	f000 fb6a 	bl	8003fd4 <_sbrk_r>
 8003900:	3001      	adds	r0, #1
 8003902:	d101      	bne.n	8003908 <sbrk_aligned+0x38>
 8003904:	f04f 34ff 	mov.w	r4, #4294967295
 8003908:	4620      	mov	r0, r4
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	20000350 	.word	0x20000350

08003910 <_malloc_r>:
 8003910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003914:	1ccd      	adds	r5, r1, #3
 8003916:	f025 0503 	bic.w	r5, r5, #3
 800391a:	3508      	adds	r5, #8
 800391c:	2d0c      	cmp	r5, #12
 800391e:	bf38      	it	cc
 8003920:	250c      	movcc	r5, #12
 8003922:	2d00      	cmp	r5, #0
 8003924:	4607      	mov	r7, r0
 8003926:	db01      	blt.n	800392c <_malloc_r+0x1c>
 8003928:	42a9      	cmp	r1, r5
 800392a:	d905      	bls.n	8003938 <_malloc_r+0x28>
 800392c:	230c      	movs	r3, #12
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	2600      	movs	r6, #0
 8003932:	4630      	mov	r0, r6
 8003934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003938:	4e2e      	ldr	r6, [pc, #184]	; (80039f4 <_malloc_r+0xe4>)
 800393a:	f000 ff01 	bl	8004740 <__malloc_lock>
 800393e:	6833      	ldr	r3, [r6, #0]
 8003940:	461c      	mov	r4, r3
 8003942:	bb34      	cbnz	r4, 8003992 <_malloc_r+0x82>
 8003944:	4629      	mov	r1, r5
 8003946:	4638      	mov	r0, r7
 8003948:	f7ff ffc2 	bl	80038d0 <sbrk_aligned>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	4604      	mov	r4, r0
 8003950:	d14d      	bne.n	80039ee <_malloc_r+0xde>
 8003952:	6834      	ldr	r4, [r6, #0]
 8003954:	4626      	mov	r6, r4
 8003956:	2e00      	cmp	r6, #0
 8003958:	d140      	bne.n	80039dc <_malloc_r+0xcc>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	4631      	mov	r1, r6
 800395e:	4638      	mov	r0, r7
 8003960:	eb04 0803 	add.w	r8, r4, r3
 8003964:	f000 fb36 	bl	8003fd4 <_sbrk_r>
 8003968:	4580      	cmp	r8, r0
 800396a:	d13a      	bne.n	80039e2 <_malloc_r+0xd2>
 800396c:	6821      	ldr	r1, [r4, #0]
 800396e:	3503      	adds	r5, #3
 8003970:	1a6d      	subs	r5, r5, r1
 8003972:	f025 0503 	bic.w	r5, r5, #3
 8003976:	3508      	adds	r5, #8
 8003978:	2d0c      	cmp	r5, #12
 800397a:	bf38      	it	cc
 800397c:	250c      	movcc	r5, #12
 800397e:	4629      	mov	r1, r5
 8003980:	4638      	mov	r0, r7
 8003982:	f7ff ffa5 	bl	80038d0 <sbrk_aligned>
 8003986:	3001      	adds	r0, #1
 8003988:	d02b      	beq.n	80039e2 <_malloc_r+0xd2>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	442b      	add	r3, r5
 800398e:	6023      	str	r3, [r4, #0]
 8003990:	e00e      	b.n	80039b0 <_malloc_r+0xa0>
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	1b52      	subs	r2, r2, r5
 8003996:	d41e      	bmi.n	80039d6 <_malloc_r+0xc6>
 8003998:	2a0b      	cmp	r2, #11
 800399a:	d916      	bls.n	80039ca <_malloc_r+0xba>
 800399c:	1961      	adds	r1, r4, r5
 800399e:	42a3      	cmp	r3, r4
 80039a0:	6025      	str	r5, [r4, #0]
 80039a2:	bf18      	it	ne
 80039a4:	6059      	strne	r1, [r3, #4]
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	bf08      	it	eq
 80039aa:	6031      	streq	r1, [r6, #0]
 80039ac:	5162      	str	r2, [r4, r5]
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	4638      	mov	r0, r7
 80039b2:	f104 060b 	add.w	r6, r4, #11
 80039b6:	f000 fec9 	bl	800474c <__malloc_unlock>
 80039ba:	f026 0607 	bic.w	r6, r6, #7
 80039be:	1d23      	adds	r3, r4, #4
 80039c0:	1af2      	subs	r2, r6, r3
 80039c2:	d0b6      	beq.n	8003932 <_malloc_r+0x22>
 80039c4:	1b9b      	subs	r3, r3, r6
 80039c6:	50a3      	str	r3, [r4, r2]
 80039c8:	e7b3      	b.n	8003932 <_malloc_r+0x22>
 80039ca:	6862      	ldr	r2, [r4, #4]
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	bf0c      	ite	eq
 80039d0:	6032      	streq	r2, [r6, #0]
 80039d2:	605a      	strne	r2, [r3, #4]
 80039d4:	e7ec      	b.n	80039b0 <_malloc_r+0xa0>
 80039d6:	4623      	mov	r3, r4
 80039d8:	6864      	ldr	r4, [r4, #4]
 80039da:	e7b2      	b.n	8003942 <_malloc_r+0x32>
 80039dc:	4634      	mov	r4, r6
 80039de:	6876      	ldr	r6, [r6, #4]
 80039e0:	e7b9      	b.n	8003956 <_malloc_r+0x46>
 80039e2:	230c      	movs	r3, #12
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4638      	mov	r0, r7
 80039e8:	f000 feb0 	bl	800474c <__malloc_unlock>
 80039ec:	e7a1      	b.n	8003932 <_malloc_r+0x22>
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	e7de      	b.n	80039b0 <_malloc_r+0xa0>
 80039f2:	bf00      	nop
 80039f4:	2000034c 	.word	0x2000034c

080039f8 <__sfputc_r>:
 80039f8:	6893      	ldr	r3, [r2, #8]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	b410      	push	{r4}
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	da08      	bge.n	8003a16 <__sfputc_r+0x1e>
 8003a04:	6994      	ldr	r4, [r2, #24]
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	db01      	blt.n	8003a0e <__sfputc_r+0x16>
 8003a0a:	290a      	cmp	r1, #10
 8003a0c:	d103      	bne.n	8003a16 <__sfputc_r+0x1e>
 8003a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a12:	f000 bb53 	b.w	80040bc <__swbuf_r>
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	1c58      	adds	r0, r3, #1
 8003a1a:	6010      	str	r0, [r2, #0]
 8003a1c:	7019      	strb	r1, [r3, #0]
 8003a1e:	4608      	mov	r0, r1
 8003a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <__sfputs_r>:
 8003a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a28:	4606      	mov	r6, r0
 8003a2a:	460f      	mov	r7, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	18d5      	adds	r5, r2, r3
 8003a30:	42ac      	cmp	r4, r5
 8003a32:	d101      	bne.n	8003a38 <__sfputs_r+0x12>
 8003a34:	2000      	movs	r0, #0
 8003a36:	e007      	b.n	8003a48 <__sfputs_r+0x22>
 8003a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a3c:	463a      	mov	r2, r7
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7ff ffda 	bl	80039f8 <__sfputc_r>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d1f3      	bne.n	8003a30 <__sfputs_r+0xa>
 8003a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a4c <_vfiprintf_r>:
 8003a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a50:	460d      	mov	r5, r1
 8003a52:	b09d      	sub	sp, #116	; 0x74
 8003a54:	4614      	mov	r4, r2
 8003a56:	4698      	mov	r8, r3
 8003a58:	4606      	mov	r6, r0
 8003a5a:	b118      	cbz	r0, 8003a64 <_vfiprintf_r+0x18>
 8003a5c:	6983      	ldr	r3, [r0, #24]
 8003a5e:	b90b      	cbnz	r3, 8003a64 <_vfiprintf_r+0x18>
 8003a60:	f000 fd68 	bl	8004534 <__sinit>
 8003a64:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <_vfiprintf_r+0x240>)
 8003a66:	429d      	cmp	r5, r3
 8003a68:	d11b      	bne.n	8003aa2 <_vfiprintf_r+0x56>
 8003a6a:	6875      	ldr	r5, [r6, #4]
 8003a6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a6e:	07d9      	lsls	r1, r3, #31
 8003a70:	d405      	bmi.n	8003a7e <_vfiprintf_r+0x32>
 8003a72:	89ab      	ldrh	r3, [r5, #12]
 8003a74:	059a      	lsls	r2, r3, #22
 8003a76:	d402      	bmi.n	8003a7e <_vfiprintf_r+0x32>
 8003a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a7a:	f000 fdf9 	bl	8004670 <__retarget_lock_acquire_recursive>
 8003a7e:	89ab      	ldrh	r3, [r5, #12]
 8003a80:	071b      	lsls	r3, r3, #28
 8003a82:	d501      	bpl.n	8003a88 <_vfiprintf_r+0x3c>
 8003a84:	692b      	ldr	r3, [r5, #16]
 8003a86:	b9eb      	cbnz	r3, 8003ac4 <_vfiprintf_r+0x78>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 fb68 	bl	8004160 <__swsetup_r>
 8003a90:	b1c0      	cbz	r0, 8003ac4 <_vfiprintf_r+0x78>
 8003a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a94:	07dc      	lsls	r4, r3, #31
 8003a96:	d50e      	bpl.n	8003ab6 <_vfiprintf_r+0x6a>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	b01d      	add	sp, #116	; 0x74
 8003a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa2:	4b7b      	ldr	r3, [pc, #492]	; (8003c90 <_vfiprintf_r+0x244>)
 8003aa4:	429d      	cmp	r5, r3
 8003aa6:	d101      	bne.n	8003aac <_vfiprintf_r+0x60>
 8003aa8:	68b5      	ldr	r5, [r6, #8]
 8003aaa:	e7df      	b.n	8003a6c <_vfiprintf_r+0x20>
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <_vfiprintf_r+0x248>)
 8003aae:	429d      	cmp	r5, r3
 8003ab0:	bf08      	it	eq
 8003ab2:	68f5      	ldreq	r5, [r6, #12]
 8003ab4:	e7da      	b.n	8003a6c <_vfiprintf_r+0x20>
 8003ab6:	89ab      	ldrh	r3, [r5, #12]
 8003ab8:	0598      	lsls	r0, r3, #22
 8003aba:	d4ed      	bmi.n	8003a98 <_vfiprintf_r+0x4c>
 8003abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003abe:	f000 fdd9 	bl	8004674 <__retarget_lock_release_recursive>
 8003ac2:	e7e9      	b.n	8003a98 <_vfiprintf_r+0x4c>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac8:	2320      	movs	r3, #32
 8003aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ad2:	2330      	movs	r3, #48	; 0x30
 8003ad4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c98 <_vfiprintf_r+0x24c>
 8003ad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003adc:	f04f 0901 	mov.w	r9, #1
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	469a      	mov	sl, r3
 8003ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae8:	b10a      	cbz	r2, 8003aee <_vfiprintf_r+0xa2>
 8003aea:	2a25      	cmp	r2, #37	; 0x25
 8003aec:	d1f9      	bne.n	8003ae2 <_vfiprintf_r+0x96>
 8003aee:	ebba 0b04 	subs.w	fp, sl, r4
 8003af2:	d00b      	beq.n	8003b0c <_vfiprintf_r+0xc0>
 8003af4:	465b      	mov	r3, fp
 8003af6:	4622      	mov	r2, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	4630      	mov	r0, r6
 8003afc:	f7ff ff93 	bl	8003a26 <__sfputs_r>
 8003b00:	3001      	adds	r0, #1
 8003b02:	f000 80aa 	beq.w	8003c5a <_vfiprintf_r+0x20e>
 8003b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b08:	445a      	add	r2, fp
 8003b0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80a2 	beq.w	8003c5a <_vfiprintf_r+0x20e>
 8003b16:	2300      	movs	r3, #0
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b20:	f10a 0a01 	add.w	sl, sl, #1
 8003b24:	9304      	str	r3, [sp, #16]
 8003b26:	9307      	str	r3, [sp, #28]
 8003b28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b2e:	4654      	mov	r4, sl
 8003b30:	2205      	movs	r2, #5
 8003b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b36:	4858      	ldr	r0, [pc, #352]	; (8003c98 <_vfiprintf_r+0x24c>)
 8003b38:	f7fc fb6a 	bl	8000210 <memchr>
 8003b3c:	9a04      	ldr	r2, [sp, #16]
 8003b3e:	b9d8      	cbnz	r0, 8003b78 <_vfiprintf_r+0x12c>
 8003b40:	06d1      	lsls	r1, r2, #27
 8003b42:	bf44      	itt	mi
 8003b44:	2320      	movmi	r3, #32
 8003b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b4a:	0713      	lsls	r3, r2, #28
 8003b4c:	bf44      	itt	mi
 8003b4e:	232b      	movmi	r3, #43	; 0x2b
 8003b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b54:	f89a 3000 	ldrb.w	r3, [sl]
 8003b58:	2b2a      	cmp	r3, #42	; 0x2a
 8003b5a:	d015      	beq.n	8003b88 <_vfiprintf_r+0x13c>
 8003b5c:	9a07      	ldr	r2, [sp, #28]
 8003b5e:	4654      	mov	r4, sl
 8003b60:	2000      	movs	r0, #0
 8003b62:	f04f 0c0a 	mov.w	ip, #10
 8003b66:	4621      	mov	r1, r4
 8003b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b6c:	3b30      	subs	r3, #48	; 0x30
 8003b6e:	2b09      	cmp	r3, #9
 8003b70:	d94e      	bls.n	8003c10 <_vfiprintf_r+0x1c4>
 8003b72:	b1b0      	cbz	r0, 8003ba2 <_vfiprintf_r+0x156>
 8003b74:	9207      	str	r2, [sp, #28]
 8003b76:	e014      	b.n	8003ba2 <_vfiprintf_r+0x156>
 8003b78:	eba0 0308 	sub.w	r3, r0, r8
 8003b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8003b80:	4313      	orrs	r3, r2
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	46a2      	mov	sl, r4
 8003b86:	e7d2      	b.n	8003b2e <_vfiprintf_r+0xe2>
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	1d19      	adds	r1, r3, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	9103      	str	r1, [sp, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bfbb      	ittet	lt
 8003b94:	425b      	neglt	r3, r3
 8003b96:	f042 0202 	orrlt.w	r2, r2, #2
 8003b9a:	9307      	strge	r3, [sp, #28]
 8003b9c:	9307      	strlt	r3, [sp, #28]
 8003b9e:	bfb8      	it	lt
 8003ba0:	9204      	strlt	r2, [sp, #16]
 8003ba2:	7823      	ldrb	r3, [r4, #0]
 8003ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ba6:	d10c      	bne.n	8003bc2 <_vfiprintf_r+0x176>
 8003ba8:	7863      	ldrb	r3, [r4, #1]
 8003baa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bac:	d135      	bne.n	8003c1a <_vfiprintf_r+0x1ce>
 8003bae:	9b03      	ldr	r3, [sp, #12]
 8003bb0:	1d1a      	adds	r2, r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	9203      	str	r2, [sp, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfb8      	it	lt
 8003bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bbe:	3402      	adds	r4, #2
 8003bc0:	9305      	str	r3, [sp, #20]
 8003bc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ca8 <_vfiprintf_r+0x25c>
 8003bc6:	7821      	ldrb	r1, [r4, #0]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	4650      	mov	r0, sl
 8003bcc:	f7fc fb20 	bl	8000210 <memchr>
 8003bd0:	b140      	cbz	r0, 8003be4 <_vfiprintf_r+0x198>
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	eba0 000a 	sub.w	r0, r0, sl
 8003bd8:	fa03 f000 	lsl.w	r0, r3, r0
 8003bdc:	9b04      	ldr	r3, [sp, #16]
 8003bde:	4303      	orrs	r3, r0
 8003be0:	3401      	adds	r4, #1
 8003be2:	9304      	str	r3, [sp, #16]
 8003be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be8:	482c      	ldr	r0, [pc, #176]	; (8003c9c <_vfiprintf_r+0x250>)
 8003bea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bee:	2206      	movs	r2, #6
 8003bf0:	f7fc fb0e 	bl	8000210 <memchr>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d03f      	beq.n	8003c78 <_vfiprintf_r+0x22c>
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <_vfiprintf_r+0x254>)
 8003bfa:	bb1b      	cbnz	r3, 8003c44 <_vfiprintf_r+0x1f8>
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	3307      	adds	r3, #7
 8003c00:	f023 0307 	bic.w	r3, r3, #7
 8003c04:	3308      	adds	r3, #8
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0a:	443b      	add	r3, r7
 8003c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c0e:	e767      	b.n	8003ae0 <_vfiprintf_r+0x94>
 8003c10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c14:	460c      	mov	r4, r1
 8003c16:	2001      	movs	r0, #1
 8003c18:	e7a5      	b.n	8003b66 <_vfiprintf_r+0x11a>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	3401      	adds	r4, #1
 8003c1e:	9305      	str	r3, [sp, #20]
 8003c20:	4619      	mov	r1, r3
 8003c22:	f04f 0c0a 	mov.w	ip, #10
 8003c26:	4620      	mov	r0, r4
 8003c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c2c:	3a30      	subs	r2, #48	; 0x30
 8003c2e:	2a09      	cmp	r2, #9
 8003c30:	d903      	bls.n	8003c3a <_vfiprintf_r+0x1ee>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0c5      	beq.n	8003bc2 <_vfiprintf_r+0x176>
 8003c36:	9105      	str	r1, [sp, #20]
 8003c38:	e7c3      	b.n	8003bc2 <_vfiprintf_r+0x176>
 8003c3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c3e:	4604      	mov	r4, r0
 8003c40:	2301      	movs	r3, #1
 8003c42:	e7f0      	b.n	8003c26 <_vfiprintf_r+0x1da>
 8003c44:	ab03      	add	r3, sp, #12
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	462a      	mov	r2, r5
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <_vfiprintf_r+0x258>)
 8003c4c:	a904      	add	r1, sp, #16
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f3af 8000 	nop.w
 8003c54:	4607      	mov	r7, r0
 8003c56:	1c78      	adds	r0, r7, #1
 8003c58:	d1d6      	bne.n	8003c08 <_vfiprintf_r+0x1bc>
 8003c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c5c:	07d9      	lsls	r1, r3, #31
 8003c5e:	d405      	bmi.n	8003c6c <_vfiprintf_r+0x220>
 8003c60:	89ab      	ldrh	r3, [r5, #12]
 8003c62:	059a      	lsls	r2, r3, #22
 8003c64:	d402      	bmi.n	8003c6c <_vfiprintf_r+0x220>
 8003c66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c68:	f000 fd04 	bl	8004674 <__retarget_lock_release_recursive>
 8003c6c:	89ab      	ldrh	r3, [r5, #12]
 8003c6e:	065b      	lsls	r3, r3, #25
 8003c70:	f53f af12 	bmi.w	8003a98 <_vfiprintf_r+0x4c>
 8003c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c76:	e711      	b.n	8003a9c <_vfiprintf_r+0x50>
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <_vfiprintf_r+0x258>)
 8003c80:	a904      	add	r1, sp, #16
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 f880 	bl	8003d88 <_printf_i>
 8003c88:	e7e4      	b.n	8003c54 <_vfiprintf_r+0x208>
 8003c8a:	bf00      	nop
 8003c8c:	080051d8 	.word	0x080051d8
 8003c90:	080051f8 	.word	0x080051f8
 8003c94:	080051b8 	.word	0x080051b8
 8003c98:	08005184 	.word	0x08005184
 8003c9c:	0800518e 	.word	0x0800518e
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	08003a27 	.word	0x08003a27
 8003ca8:	0800518a 	.word	0x0800518a

08003cac <_printf_common>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_printf_common+0x26>
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	0699      	lsls	r1, r3, #26
 8003cd6:	bf42      	ittt	mi
 8003cd8:	6833      	ldrmi	r3, [r6, #0]
 8003cda:	3302      	addmi	r3, #2
 8003cdc:	6033      	strmi	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d106      	bne.n	8003cf4 <_printf_common+0x48>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dc26      	bgt.n	8003d42 <_printf_common+0x96>
 8003cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cf8:	1e13      	subs	r3, r2, #0
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	bf18      	it	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	0692      	lsls	r2, r2, #26
 8003d02:	d42b      	bmi.n	8003d5c <_printf_common+0xb0>
 8003d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d08:	4649      	mov	r1, r9
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c0      	blx	r8
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d01e      	beq.n	8003d50 <_printf_common+0xa4>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	68e5      	ldr	r5, [r4, #12]
 8003d16:	6832      	ldr	r2, [r6, #0]
 8003d18:	f003 0306 	and.w	r3, r3, #6
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	bf08      	it	eq
 8003d20:	1aad      	subeq	r5, r5, r2
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	6922      	ldr	r2, [r4, #16]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	2600      	movs	r6, #0
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xc8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xa8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4649      	mov	r1, r9
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c0      	blx	r8
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xac>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c6      	b.n	8003cea <_printf_common+0x3e>
 8003d5c:	18e1      	adds	r1, r4, r3
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	2030      	movs	r0, #48	; 0x30
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d66:	4422      	add	r2, r4
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d70:	3302      	adds	r3, #2
 8003d72:	e7c7      	b.n	8003d04 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa4>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x8e>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d90:	2f78      	cmp	r7, #120	; 0x78
 8003d92:	4691      	mov	r9, r2
 8003d94:	4680      	mov	r8, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	; 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d8 	beq.w	8003f5a <_printf_i+0x1d2>
 8003daa:	2f58      	cmp	r7, #88	; 0x58
 8003dac:	f000 80a3 	beq.w	8003ef6 <_printf_i+0x16e>
 8003db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	; (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f41 	.word	0x08003f41
 8003df8:	08003e65 	.word	0x08003e65
 8003dfc:	08003f23 	.word	0x08003f23
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f63 	.word	0x08003f63
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003f2b 	.word	0x08003f2b
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	602a      	str	r2, [r5, #0]
 8003e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0a3      	b.n	8003f7c <_printf_i+0x1f4>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	6829      	ldr	r1, [r5, #0]
 8003e38:	0606      	lsls	r6, r0, #24
 8003e3a:	f101 0304 	add.w	r3, r1, #4
 8003e3e:	d50a      	bpl.n	8003e56 <_printf_i+0xce>
 8003e40:	680e      	ldr	r6, [r1, #0]
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	2e00      	cmp	r6, #0
 8003e46:	da03      	bge.n	8003e50 <_printf_i+0xc8>
 8003e48:	232d      	movs	r3, #45	; 0x2d
 8003e4a:	4276      	negs	r6, r6
 8003e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e50:	485e      	ldr	r0, [pc, #376]	; (8003fcc <_printf_i+0x244>)
 8003e52:	230a      	movs	r3, #10
 8003e54:	e019      	b.n	8003e8a <_printf_i+0x102>
 8003e56:	680e      	ldr	r6, [r1, #0]
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e5e:	bf18      	it	ne
 8003e60:	b236      	sxthne	r6, r6
 8003e62:	e7ef      	b.n	8003e44 <_printf_i+0xbc>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1d19      	adds	r1, r3, #4
 8003e6a:	6029      	str	r1, [r5, #0]
 8003e6c:	0601      	lsls	r1, r0, #24
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0xec>
 8003e70:	681e      	ldr	r6, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <_printf_i+0xf2>
 8003e74:	0646      	lsls	r6, r0, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0xe8>
 8003e78:	881e      	ldrh	r6, [r3, #0]
 8003e7a:	4854      	ldr	r0, [pc, #336]	; (8003fcc <_printf_i+0x244>)
 8003e7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003e7e:	bf0c      	ite	eq
 8003e80:	2308      	moveq	r3, #8
 8003e82:	230a      	movne	r3, #10
 8003e84:	2100      	movs	r1, #0
 8003e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e8a:	6865      	ldr	r5, [r4, #4]
 8003e8c:	60a5      	str	r5, [r4, #8]
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	bfa2      	ittt	ge
 8003e92:	6821      	ldrge	r1, [r4, #0]
 8003e94:	f021 0104 	bicge.w	r1, r1, #4
 8003e98:	6021      	strge	r1, [r4, #0]
 8003e9a:	b90e      	cbnz	r6, 8003ea0 <_printf_i+0x118>
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	d04d      	beq.n	8003f3c <_printf_i+0x1b4>
 8003ea0:	4615      	mov	r5, r2
 8003ea2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea6:	fb03 6711 	mls	r7, r3, r1, r6
 8003eaa:	5dc7      	ldrb	r7, [r0, r7]
 8003eac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eb0:	4637      	mov	r7, r6
 8003eb2:	42bb      	cmp	r3, r7
 8003eb4:	460e      	mov	r6, r1
 8003eb6:	d9f4      	bls.n	8003ea2 <_printf_i+0x11a>
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d10b      	bne.n	8003ed4 <_printf_i+0x14c>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	07de      	lsls	r6, r3, #31
 8003ec0:	d508      	bpl.n	8003ed4 <_printf_i+0x14c>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	6861      	ldr	r1, [r4, #4]
 8003ec6:	4299      	cmp	r1, r3
 8003ec8:	bfde      	ittt	le
 8003eca:	2330      	movle	r3, #48	; 0x30
 8003ecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ed0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ed4:	1b52      	subs	r2, r2, r5
 8003ed6:	6122      	str	r2, [r4, #16]
 8003ed8:	f8cd a000 	str.w	sl, [sp]
 8003edc:	464b      	mov	r3, r9
 8003ede:	aa03      	add	r2, sp, #12
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f7ff fee2 	bl	8003cac <_printf_common>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d14c      	bne.n	8003f86 <_printf_i+0x1fe>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	b004      	add	sp, #16
 8003ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef6:	4835      	ldr	r0, [pc, #212]	; (8003fcc <_printf_i+0x244>)
 8003ef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003efc:	6829      	ldr	r1, [r5, #0]
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f04:	6029      	str	r1, [r5, #0]
 8003f06:	061d      	lsls	r5, r3, #24
 8003f08:	d514      	bpl.n	8003f34 <_printf_i+0x1ac>
 8003f0a:	07df      	lsls	r7, r3, #31
 8003f0c:	bf44      	itt	mi
 8003f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003f12:	6023      	strmi	r3, [r4, #0]
 8003f14:	b91e      	cbnz	r6, 8003f1e <_printf_i+0x196>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f023 0320 	bic.w	r3, r3, #32
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	2310      	movs	r3, #16
 8003f20:	e7b0      	b.n	8003e84 <_printf_i+0xfc>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f043 0320 	orr.w	r3, r3, #32
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	2378      	movs	r3, #120	; 0x78
 8003f2c:	4828      	ldr	r0, [pc, #160]	; (8003fd0 <_printf_i+0x248>)
 8003f2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f32:	e7e3      	b.n	8003efc <_printf_i+0x174>
 8003f34:	0659      	lsls	r1, r3, #25
 8003f36:	bf48      	it	mi
 8003f38:	b2b6      	uxthmi	r6, r6
 8003f3a:	e7e6      	b.n	8003f0a <_printf_i+0x182>
 8003f3c:	4615      	mov	r5, r2
 8003f3e:	e7bb      	b.n	8003eb8 <_printf_i+0x130>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	6826      	ldr	r6, [r4, #0]
 8003f44:	6961      	ldr	r1, [r4, #20]
 8003f46:	1d18      	adds	r0, r3, #4
 8003f48:	6028      	str	r0, [r5, #0]
 8003f4a:	0635      	lsls	r5, r6, #24
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	d501      	bpl.n	8003f54 <_printf_i+0x1cc>
 8003f50:	6019      	str	r1, [r3, #0]
 8003f52:	e002      	b.n	8003f5a <_printf_i+0x1d2>
 8003f54:	0670      	lsls	r0, r6, #25
 8003f56:	d5fb      	bpl.n	8003f50 <_printf_i+0x1c8>
 8003f58:	8019      	strh	r1, [r3, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	4615      	mov	r5, r2
 8003f60:	e7ba      	b.n	8003ed8 <_printf_i+0x150>
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	1d1a      	adds	r2, r3, #4
 8003f66:	602a      	str	r2, [r5, #0]
 8003f68:	681d      	ldr	r5, [r3, #0]
 8003f6a:	6862      	ldr	r2, [r4, #4]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f7fc f94e 	bl	8000210 <memchr>
 8003f74:	b108      	cbz	r0, 8003f7a <_printf_i+0x1f2>
 8003f76:	1b40      	subs	r0, r0, r5
 8003f78:	6060      	str	r0, [r4, #4]
 8003f7a:	6863      	ldr	r3, [r4, #4]
 8003f7c:	6123      	str	r3, [r4, #16]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f84:	e7a8      	b.n	8003ed8 <_printf_i+0x150>
 8003f86:	6923      	ldr	r3, [r4, #16]
 8003f88:	462a      	mov	r2, r5
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	47d0      	blx	sl
 8003f90:	3001      	adds	r0, #1
 8003f92:	d0ab      	beq.n	8003eec <_printf_i+0x164>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	079b      	lsls	r3, r3, #30
 8003f98:	d413      	bmi.n	8003fc2 <_printf_i+0x23a>
 8003f9a:	68e0      	ldr	r0, [r4, #12]
 8003f9c:	9b03      	ldr	r3, [sp, #12]
 8003f9e:	4298      	cmp	r0, r3
 8003fa0:	bfb8      	it	lt
 8003fa2:	4618      	movlt	r0, r3
 8003fa4:	e7a4      	b.n	8003ef0 <_printf_i+0x168>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4632      	mov	r2, r6
 8003faa:	4649      	mov	r1, r9
 8003fac:	4640      	mov	r0, r8
 8003fae:	47d0      	blx	sl
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d09b      	beq.n	8003eec <_printf_i+0x164>
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	68e3      	ldr	r3, [r4, #12]
 8003fb8:	9903      	ldr	r1, [sp, #12]
 8003fba:	1a5b      	subs	r3, r3, r1
 8003fbc:	42ab      	cmp	r3, r5
 8003fbe:	dcf2      	bgt.n	8003fa6 <_printf_i+0x21e>
 8003fc0:	e7eb      	b.n	8003f9a <_printf_i+0x212>
 8003fc2:	2500      	movs	r5, #0
 8003fc4:	f104 0619 	add.w	r6, r4, #25
 8003fc8:	e7f5      	b.n	8003fb6 <_printf_i+0x22e>
 8003fca:	bf00      	nop
 8003fcc:	08005195 	.word	0x08005195
 8003fd0:	080051a6 	.word	0x080051a6

08003fd4 <_sbrk_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d06      	ldr	r5, [pc, #24]	; (8003ff0 <_sbrk_r+0x1c>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f000 fe30 	bl	8004c44 <_sbrk>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_sbrk_r+0x1a>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_sbrk_r+0x1a>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	200003e8 	.word	0x200003e8

08003ff4 <_raise_r>:
 8003ff4:	291f      	cmp	r1, #31
 8003ff6:	b538      	push	{r3, r4, r5, lr}
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	d904      	bls.n	8004008 <_raise_r+0x14>
 8003ffe:	2316      	movs	r3, #22
 8004000:	6003      	str	r3, [r0, #0]
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800400a:	b112      	cbz	r2, 8004012 <_raise_r+0x1e>
 800400c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004010:	b94b      	cbnz	r3, 8004026 <_raise_r+0x32>
 8004012:	4620      	mov	r0, r4
 8004014:	f000 f830 	bl	8004078 <_getpid_r>
 8004018:	462a      	mov	r2, r5
 800401a:	4601      	mov	r1, r0
 800401c:	4620      	mov	r0, r4
 800401e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004022:	f000 b817 	b.w	8004054 <_kill_r>
 8004026:	2b01      	cmp	r3, #1
 8004028:	d00a      	beq.n	8004040 <_raise_r+0x4c>
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	d103      	bne.n	8004036 <_raise_r+0x42>
 800402e:	2316      	movs	r3, #22
 8004030:	6003      	str	r3, [r0, #0]
 8004032:	2001      	movs	r0, #1
 8004034:	e7e7      	b.n	8004006 <_raise_r+0x12>
 8004036:	2400      	movs	r4, #0
 8004038:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800403c:	4628      	mov	r0, r5
 800403e:	4798      	blx	r3
 8004040:	2000      	movs	r0, #0
 8004042:	e7e0      	b.n	8004006 <_raise_r+0x12>

08004044 <raise>:
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <raise+0xc>)
 8004046:	4601      	mov	r1, r0
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	f7ff bfd3 	b.w	8003ff4 <_raise_r>
 800404e:	bf00      	nop
 8004050:	20000014 	.word	0x20000014

08004054 <_kill_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d07      	ldr	r5, [pc, #28]	; (8004074 <_kill_r+0x20>)
 8004058:	2300      	movs	r3, #0
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	602b      	str	r3, [r5, #0]
 8004062:	f000 fdd7 	bl	8004c14 <_kill>
 8004066:	1c43      	adds	r3, r0, #1
 8004068:	d102      	bne.n	8004070 <_kill_r+0x1c>
 800406a:	682b      	ldr	r3, [r5, #0]
 800406c:	b103      	cbz	r3, 8004070 <_kill_r+0x1c>
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	bd38      	pop	{r3, r4, r5, pc}
 8004072:	bf00      	nop
 8004074:	200003e8 	.word	0x200003e8

08004078 <_getpid_r>:
 8004078:	f000 bdbc 	b.w	8004bf4 <_getpid>

0800407c <_vsiprintf_r>:
 800407c:	b500      	push	{lr}
 800407e:	b09b      	sub	sp, #108	; 0x6c
 8004080:	9100      	str	r1, [sp, #0]
 8004082:	9104      	str	r1, [sp, #16]
 8004084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004088:	9105      	str	r1, [sp, #20]
 800408a:	9102      	str	r1, [sp, #8]
 800408c:	4905      	ldr	r1, [pc, #20]	; (80040a4 <_vsiprintf_r+0x28>)
 800408e:	9103      	str	r1, [sp, #12]
 8004090:	4669      	mov	r1, sp
 8004092:	f000 fbeb 	bl	800486c <_svfiprintf_r>
 8004096:	9b00      	ldr	r3, [sp, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	b01b      	add	sp, #108	; 0x6c
 800409e:	f85d fb04 	ldr.w	pc, [sp], #4
 80040a2:	bf00      	nop
 80040a4:	ffff0208 	.word	0xffff0208

080040a8 <vsiprintf>:
 80040a8:	4613      	mov	r3, r2
 80040aa:	460a      	mov	r2, r1
 80040ac:	4601      	mov	r1, r0
 80040ae:	4802      	ldr	r0, [pc, #8]	; (80040b8 <vsiprintf+0x10>)
 80040b0:	6800      	ldr	r0, [r0, #0]
 80040b2:	f7ff bfe3 	b.w	800407c <_vsiprintf_r>
 80040b6:	bf00      	nop
 80040b8:	20000014 	.word	0x20000014

080040bc <__swbuf_r>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	460e      	mov	r6, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	4605      	mov	r5, r0
 80040c4:	b118      	cbz	r0, 80040ce <__swbuf_r+0x12>
 80040c6:	6983      	ldr	r3, [r0, #24]
 80040c8:	b90b      	cbnz	r3, 80040ce <__swbuf_r+0x12>
 80040ca:	f000 fa33 	bl	8004534 <__sinit>
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <__swbuf_r+0x98>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d12b      	bne.n	800412c <__swbuf_r+0x70>
 80040d4:	686c      	ldr	r4, [r5, #4]
 80040d6:	69a3      	ldr	r3, [r4, #24]
 80040d8:	60a3      	str	r3, [r4, #8]
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	071a      	lsls	r2, r3, #28
 80040de:	d52f      	bpl.n	8004140 <__swbuf_r+0x84>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	b36b      	cbz	r3, 8004140 <__swbuf_r+0x84>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	1ac0      	subs	r0, r0, r3
 80040ea:	6963      	ldr	r3, [r4, #20]
 80040ec:	b2f6      	uxtb	r6, r6
 80040ee:	4283      	cmp	r3, r0
 80040f0:	4637      	mov	r7, r6
 80040f2:	dc04      	bgt.n	80040fe <__swbuf_r+0x42>
 80040f4:	4621      	mov	r1, r4
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 f988 	bl	800440c <_fflush_r>
 80040fc:	bb30      	cbnz	r0, 800414c <__swbuf_r+0x90>
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	3b01      	subs	r3, #1
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	6022      	str	r2, [r4, #0]
 800410a:	701e      	strb	r6, [r3, #0]
 800410c:	6963      	ldr	r3, [r4, #20]
 800410e:	3001      	adds	r0, #1
 8004110:	4283      	cmp	r3, r0
 8004112:	d004      	beq.n	800411e <__swbuf_r+0x62>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	07db      	lsls	r3, r3, #31
 8004118:	d506      	bpl.n	8004128 <__swbuf_r+0x6c>
 800411a:	2e0a      	cmp	r6, #10
 800411c:	d104      	bne.n	8004128 <__swbuf_r+0x6c>
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f973 	bl	800440c <_fflush_r>
 8004126:	b988      	cbnz	r0, 800414c <__swbuf_r+0x90>
 8004128:	4638      	mov	r0, r7
 800412a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <__swbuf_r+0x9c>)
 800412e:	429c      	cmp	r4, r3
 8004130:	d101      	bne.n	8004136 <__swbuf_r+0x7a>
 8004132:	68ac      	ldr	r4, [r5, #8]
 8004134:	e7cf      	b.n	80040d6 <__swbuf_r+0x1a>
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <__swbuf_r+0xa0>)
 8004138:	429c      	cmp	r4, r3
 800413a:	bf08      	it	eq
 800413c:	68ec      	ldreq	r4, [r5, #12]
 800413e:	e7ca      	b.n	80040d6 <__swbuf_r+0x1a>
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	f000 f80c 	bl	8004160 <__swsetup_r>
 8004148:	2800      	cmp	r0, #0
 800414a:	d0cb      	beq.n	80040e4 <__swbuf_r+0x28>
 800414c:	f04f 37ff 	mov.w	r7, #4294967295
 8004150:	e7ea      	b.n	8004128 <__swbuf_r+0x6c>
 8004152:	bf00      	nop
 8004154:	080051d8 	.word	0x080051d8
 8004158:	080051f8 	.word	0x080051f8
 800415c:	080051b8 	.word	0x080051b8

08004160 <__swsetup_r>:
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <__swsetup_r+0xcc>)
 8004162:	b570      	push	{r4, r5, r6, lr}
 8004164:	681d      	ldr	r5, [r3, #0]
 8004166:	4606      	mov	r6, r0
 8004168:	460c      	mov	r4, r1
 800416a:	b125      	cbz	r5, 8004176 <__swsetup_r+0x16>
 800416c:	69ab      	ldr	r3, [r5, #24]
 800416e:	b913      	cbnz	r3, 8004176 <__swsetup_r+0x16>
 8004170:	4628      	mov	r0, r5
 8004172:	f000 f9df 	bl	8004534 <__sinit>
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <__swsetup_r+0xd0>)
 8004178:	429c      	cmp	r4, r3
 800417a:	d10f      	bne.n	800419c <__swsetup_r+0x3c>
 800417c:	686c      	ldr	r4, [r5, #4]
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004184:	0719      	lsls	r1, r3, #28
 8004186:	d42c      	bmi.n	80041e2 <__swsetup_r+0x82>
 8004188:	06dd      	lsls	r5, r3, #27
 800418a:	d411      	bmi.n	80041b0 <__swsetup_r+0x50>
 800418c:	2309      	movs	r3, #9
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	f04f 30ff 	mov.w	r0, #4294967295
 800419a:	e03e      	b.n	800421a <__swsetup_r+0xba>
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <__swsetup_r+0xd4>)
 800419e:	429c      	cmp	r4, r3
 80041a0:	d101      	bne.n	80041a6 <__swsetup_r+0x46>
 80041a2:	68ac      	ldr	r4, [r5, #8]
 80041a4:	e7eb      	b.n	800417e <__swsetup_r+0x1e>
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <__swsetup_r+0xd8>)
 80041a8:	429c      	cmp	r4, r3
 80041aa:	bf08      	it	eq
 80041ac:	68ec      	ldreq	r4, [r5, #12]
 80041ae:	e7e6      	b.n	800417e <__swsetup_r+0x1e>
 80041b0:	0758      	lsls	r0, r3, #29
 80041b2:	d512      	bpl.n	80041da <__swsetup_r+0x7a>
 80041b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041b6:	b141      	cbz	r1, 80041ca <__swsetup_r+0x6a>
 80041b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041bc:	4299      	cmp	r1, r3
 80041be:	d002      	beq.n	80041c6 <__swsetup_r+0x66>
 80041c0:	4630      	mov	r0, r6
 80041c2:	f7ff fb39 	bl	8003838 <_free_r>
 80041c6:	2300      	movs	r3, #0
 80041c8:	6363      	str	r3, [r4, #52]	; 0x34
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	2300      	movs	r3, #0
 80041d4:	6063      	str	r3, [r4, #4]
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	b94b      	cbnz	r3, 80041fa <__swsetup_r+0x9a>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d003      	beq.n	80041fa <__swsetup_r+0x9a>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 fa63 	bl	80046c0 <__smakebuf_r>
 80041fa:	89a0      	ldrh	r0, [r4, #12]
 80041fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004200:	f010 0301 	ands.w	r3, r0, #1
 8004204:	d00a      	beq.n	800421c <__swsetup_r+0xbc>
 8004206:	2300      	movs	r3, #0
 8004208:	60a3      	str	r3, [r4, #8]
 800420a:	6963      	ldr	r3, [r4, #20]
 800420c:	425b      	negs	r3, r3
 800420e:	61a3      	str	r3, [r4, #24]
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	b943      	cbnz	r3, 8004226 <__swsetup_r+0xc6>
 8004214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004218:	d1ba      	bne.n	8004190 <__swsetup_r+0x30>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	0781      	lsls	r1, r0, #30
 800421e:	bf58      	it	pl
 8004220:	6963      	ldrpl	r3, [r4, #20]
 8004222:	60a3      	str	r3, [r4, #8]
 8004224:	e7f4      	b.n	8004210 <__swsetup_r+0xb0>
 8004226:	2000      	movs	r0, #0
 8004228:	e7f7      	b.n	800421a <__swsetup_r+0xba>
 800422a:	bf00      	nop
 800422c:	20000014 	.word	0x20000014
 8004230:	080051d8 	.word	0x080051d8
 8004234:	080051f8 	.word	0x080051f8
 8004238:	080051b8 	.word	0x080051b8

0800423c <__register_exitproc>:
 800423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004240:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80042fc <__register_exitproc+0xc0>
 8004244:	4606      	mov	r6, r0
 8004246:	f8d8 0000 	ldr.w	r0, [r8]
 800424a:	461f      	mov	r7, r3
 800424c:	460d      	mov	r5, r1
 800424e:	4691      	mov	r9, r2
 8004250:	f000 fa0e 	bl	8004670 <__retarget_lock_acquire_recursive>
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <__register_exitproc+0xb0>)
 8004256:	681c      	ldr	r4, [r3, #0]
 8004258:	b934      	cbnz	r4, 8004268 <__register_exitproc+0x2c>
 800425a:	4c25      	ldr	r4, [pc, #148]	; (80042f0 <__register_exitproc+0xb4>)
 800425c:	601c      	str	r4, [r3, #0]
 800425e:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <__register_exitproc+0xb8>)
 8004260:	b113      	cbz	r3, 8004268 <__register_exitproc+0x2c>
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	2b1f      	cmp	r3, #31
 800426c:	dd07      	ble.n	800427e <__register_exitproc+0x42>
 800426e:	f8d8 0000 	ldr.w	r0, [r8]
 8004272:	f000 f9ff 	bl	8004674 <__retarget_lock_release_recursive>
 8004276:	f04f 30ff 	mov.w	r0, #4294967295
 800427a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427e:	b34e      	cbz	r6, 80042d4 <__register_exitproc+0x98>
 8004280:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004284:	b988      	cbnz	r0, 80042aa <__register_exitproc+0x6e>
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <__register_exitproc+0xbc>)
 8004288:	b923      	cbnz	r3, 8004294 <__register_exitproc+0x58>
 800428a:	f8d8 0000 	ldr.w	r0, [r8]
 800428e:	f000 f9f0 	bl	8004672 <__retarget_lock_release>
 8004292:	e7f0      	b.n	8004276 <__register_exitproc+0x3a>
 8004294:	f44f 7084 	mov.w	r0, #264	; 0x108
 8004298:	f7ff fa8e 	bl	80037b8 <malloc>
 800429c:	2800      	cmp	r0, #0
 800429e:	d0f4      	beq.n	800428a <__register_exitproc+0x4e>
 80042a0:	2300      	movs	r3, #0
 80042a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80042a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80042b0:	2201      	movs	r2, #1
 80042b2:	409a      	lsls	r2, r3
 80042b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80042b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80042c2:	2e02      	cmp	r6, #2
 80042c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80042c8:	bf02      	ittt	eq
 80042ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80042ce:	4313      	orreq	r3, r2
 80042d0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80042d4:	6863      	ldr	r3, [r4, #4]
 80042d6:	f8d8 0000 	ldr.w	r0, [r8]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	3302      	adds	r3, #2
 80042de:	6062      	str	r2, [r4, #4]
 80042e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80042e4:	f000 f9c6 	bl	8004674 <__retarget_lock_release_recursive>
 80042e8:	2000      	movs	r0, #0
 80042ea:	e7c6      	b.n	800427a <__register_exitproc+0x3e>
 80042ec:	200003e0 	.word	0x200003e0
 80042f0:	20000354 	.word	0x20000354
 80042f4:	00000000 	.word	0x00000000
 80042f8:	080037b9 	.word	0x080037b9
 80042fc:	20000078 	.word	0x20000078

08004300 <__sflush_r>:
 8004300:	898a      	ldrh	r2, [r1, #12]
 8004302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004306:	4605      	mov	r5, r0
 8004308:	0710      	lsls	r0, r2, #28
 800430a:	460c      	mov	r4, r1
 800430c:	d458      	bmi.n	80043c0 <__sflush_r+0xc0>
 800430e:	684b      	ldr	r3, [r1, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	dc05      	bgt.n	8004320 <__sflush_r+0x20>
 8004314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	dc02      	bgt.n	8004320 <__sflush_r+0x20>
 800431a:	2000      	movs	r0, #0
 800431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004322:	2e00      	cmp	r6, #0
 8004324:	d0f9      	beq.n	800431a <__sflush_r+0x1a>
 8004326:	2300      	movs	r3, #0
 8004328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800432c:	682f      	ldr	r7, [r5, #0]
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	d032      	beq.n	8004398 <__sflush_r+0x98>
 8004332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	075a      	lsls	r2, r3, #29
 8004338:	d505      	bpl.n	8004346 <__sflush_r+0x46>
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	1ac0      	subs	r0, r0, r3
 800433e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004340:	b10b      	cbz	r3, 8004346 <__sflush_r+0x46>
 8004342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004344:	1ac0      	subs	r0, r0, r3
 8004346:	2300      	movs	r3, #0
 8004348:	4602      	mov	r2, r0
 800434a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800434c:	6a21      	ldr	r1, [r4, #32]
 800434e:	4628      	mov	r0, r5
 8004350:	47b0      	blx	r6
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	d106      	bne.n	8004366 <__sflush_r+0x66>
 8004358:	6829      	ldr	r1, [r5, #0]
 800435a:	291d      	cmp	r1, #29
 800435c:	d82c      	bhi.n	80043b8 <__sflush_r+0xb8>
 800435e:	4a2a      	ldr	r2, [pc, #168]	; (8004408 <__sflush_r+0x108>)
 8004360:	40ca      	lsrs	r2, r1
 8004362:	07d6      	lsls	r6, r2, #31
 8004364:	d528      	bpl.n	80043b8 <__sflush_r+0xb8>
 8004366:	2200      	movs	r2, #0
 8004368:	6062      	str	r2, [r4, #4]
 800436a:	04d9      	lsls	r1, r3, #19
 800436c:	6922      	ldr	r2, [r4, #16]
 800436e:	6022      	str	r2, [r4, #0]
 8004370:	d504      	bpl.n	800437c <__sflush_r+0x7c>
 8004372:	1c42      	adds	r2, r0, #1
 8004374:	d101      	bne.n	800437a <__sflush_r+0x7a>
 8004376:	682b      	ldr	r3, [r5, #0]
 8004378:	b903      	cbnz	r3, 800437c <__sflush_r+0x7c>
 800437a:	6560      	str	r0, [r4, #84]	; 0x54
 800437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800437e:	602f      	str	r7, [r5, #0]
 8004380:	2900      	cmp	r1, #0
 8004382:	d0ca      	beq.n	800431a <__sflush_r+0x1a>
 8004384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004388:	4299      	cmp	r1, r3
 800438a:	d002      	beq.n	8004392 <__sflush_r+0x92>
 800438c:	4628      	mov	r0, r5
 800438e:	f7ff fa53 	bl	8003838 <_free_r>
 8004392:	2000      	movs	r0, #0
 8004394:	6360      	str	r0, [r4, #52]	; 0x34
 8004396:	e7c1      	b.n	800431c <__sflush_r+0x1c>
 8004398:	6a21      	ldr	r1, [r4, #32]
 800439a:	2301      	movs	r3, #1
 800439c:	4628      	mov	r0, r5
 800439e:	47b0      	blx	r6
 80043a0:	1c41      	adds	r1, r0, #1
 80043a2:	d1c7      	bne.n	8004334 <__sflush_r+0x34>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0c4      	beq.n	8004334 <__sflush_r+0x34>
 80043aa:	2b1d      	cmp	r3, #29
 80043ac:	d001      	beq.n	80043b2 <__sflush_r+0xb2>
 80043ae:	2b16      	cmp	r3, #22
 80043b0:	d101      	bne.n	80043b6 <__sflush_r+0xb6>
 80043b2:	602f      	str	r7, [r5, #0]
 80043b4:	e7b1      	b.n	800431a <__sflush_r+0x1a>
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043bc:	81a3      	strh	r3, [r4, #12]
 80043be:	e7ad      	b.n	800431c <__sflush_r+0x1c>
 80043c0:	690f      	ldr	r7, [r1, #16]
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	d0a9      	beq.n	800431a <__sflush_r+0x1a>
 80043c6:	0793      	lsls	r3, r2, #30
 80043c8:	680e      	ldr	r6, [r1, #0]
 80043ca:	bf08      	it	eq
 80043cc:	694b      	ldreq	r3, [r1, #20]
 80043ce:	600f      	str	r7, [r1, #0]
 80043d0:	bf18      	it	ne
 80043d2:	2300      	movne	r3, #0
 80043d4:	eba6 0807 	sub.w	r8, r6, r7
 80043d8:	608b      	str	r3, [r1, #8]
 80043da:	f1b8 0f00 	cmp.w	r8, #0
 80043de:	dd9c      	ble.n	800431a <__sflush_r+0x1a>
 80043e0:	6a21      	ldr	r1, [r4, #32]
 80043e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043e4:	4643      	mov	r3, r8
 80043e6:	463a      	mov	r2, r7
 80043e8:	4628      	mov	r0, r5
 80043ea:	47b0      	blx	r6
 80043ec:	2800      	cmp	r0, #0
 80043ee:	dc06      	bgt.n	80043fe <__sflush_r+0xfe>
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e78e      	b.n	800431c <__sflush_r+0x1c>
 80043fe:	4407      	add	r7, r0
 8004400:	eba8 0800 	sub.w	r8, r8, r0
 8004404:	e7e9      	b.n	80043da <__sflush_r+0xda>
 8004406:	bf00      	nop
 8004408:	20400001 	.word	0x20400001

0800440c <_fflush_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	690b      	ldr	r3, [r1, #16]
 8004410:	4605      	mov	r5, r0
 8004412:	460c      	mov	r4, r1
 8004414:	b913      	cbnz	r3, 800441c <_fflush_r+0x10>
 8004416:	2500      	movs	r5, #0
 8004418:	4628      	mov	r0, r5
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	b118      	cbz	r0, 8004426 <_fflush_r+0x1a>
 800441e:	6983      	ldr	r3, [r0, #24]
 8004420:	b90b      	cbnz	r3, 8004426 <_fflush_r+0x1a>
 8004422:	f000 f887 	bl	8004534 <__sinit>
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <_fflush_r+0x6c>)
 8004428:	429c      	cmp	r4, r3
 800442a:	d11b      	bne.n	8004464 <_fflush_r+0x58>
 800442c:	686c      	ldr	r4, [r5, #4]
 800442e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ef      	beq.n	8004416 <_fflush_r+0xa>
 8004436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004438:	07d0      	lsls	r0, r2, #31
 800443a:	d404      	bmi.n	8004446 <_fflush_r+0x3a>
 800443c:	0599      	lsls	r1, r3, #22
 800443e:	d402      	bmi.n	8004446 <_fflush_r+0x3a>
 8004440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004442:	f000 f915 	bl	8004670 <__retarget_lock_acquire_recursive>
 8004446:	4628      	mov	r0, r5
 8004448:	4621      	mov	r1, r4
 800444a:	f7ff ff59 	bl	8004300 <__sflush_r>
 800444e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004450:	07da      	lsls	r2, r3, #31
 8004452:	4605      	mov	r5, r0
 8004454:	d4e0      	bmi.n	8004418 <_fflush_r+0xc>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	059b      	lsls	r3, r3, #22
 800445a:	d4dd      	bmi.n	8004418 <_fflush_r+0xc>
 800445c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800445e:	f000 f909 	bl	8004674 <__retarget_lock_release_recursive>
 8004462:	e7d9      	b.n	8004418 <_fflush_r+0xc>
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <_fflush_r+0x70>)
 8004466:	429c      	cmp	r4, r3
 8004468:	d101      	bne.n	800446e <_fflush_r+0x62>
 800446a:	68ac      	ldr	r4, [r5, #8]
 800446c:	e7df      	b.n	800442e <_fflush_r+0x22>
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <_fflush_r+0x74>)
 8004470:	429c      	cmp	r4, r3
 8004472:	bf08      	it	eq
 8004474:	68ec      	ldreq	r4, [r5, #12]
 8004476:	e7da      	b.n	800442e <_fflush_r+0x22>
 8004478:	080051d8 	.word	0x080051d8
 800447c:	080051f8 	.word	0x080051f8
 8004480:	080051b8 	.word	0x080051b8

08004484 <std>:
 8004484:	2300      	movs	r3, #0
 8004486:	b510      	push	{r4, lr}
 8004488:	4604      	mov	r4, r0
 800448a:	e9c0 3300 	strd	r3, r3, [r0]
 800448e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004492:	6083      	str	r3, [r0, #8]
 8004494:	8181      	strh	r1, [r0, #12]
 8004496:	6643      	str	r3, [r0, #100]	; 0x64
 8004498:	81c2      	strh	r2, [r0, #14]
 800449a:	6183      	str	r3, [r0, #24]
 800449c:	4619      	mov	r1, r3
 800449e:	2208      	movs	r2, #8
 80044a0:	305c      	adds	r0, #92	; 0x5c
 80044a2:	f7ff f9c1 	bl	8003828 <memset>
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <std+0x38>)
 80044a8:	6263      	str	r3, [r4, #36]	; 0x24
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <std+0x3c>)
 80044ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <std+0x40>)
 80044b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <std+0x44>)
 80044b4:	6224      	str	r4, [r4, #32]
 80044b6:	6323      	str	r3, [r4, #48]	; 0x30
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop
 80044bc:	08004a6d 	.word	0x08004a6d
 80044c0:	08004a8f 	.word	0x08004a8f
 80044c4:	08004ac7 	.word	0x08004ac7
 80044c8:	08004aeb 	.word	0x08004aeb

080044cc <_cleanup_r>:
 80044cc:	4901      	ldr	r1, [pc, #4]	; (80044d4 <_cleanup_r+0x8>)
 80044ce:	f000 b8af 	b.w	8004630 <_fwalk_reent>
 80044d2:	bf00      	nop
 80044d4:	0800440d 	.word	0x0800440d

080044d8 <__sfmoreglue>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2268      	movs	r2, #104	; 0x68
 80044dc:	1e4d      	subs	r5, r1, #1
 80044de:	4355      	muls	r5, r2
 80044e0:	460e      	mov	r6, r1
 80044e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044e6:	f7ff fa13 	bl	8003910 <_malloc_r>
 80044ea:	4604      	mov	r4, r0
 80044ec:	b140      	cbz	r0, 8004500 <__sfmoreglue+0x28>
 80044ee:	2100      	movs	r1, #0
 80044f0:	e9c0 1600 	strd	r1, r6, [r0]
 80044f4:	300c      	adds	r0, #12
 80044f6:	60a0      	str	r0, [r4, #8]
 80044f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044fc:	f7ff f994 	bl	8003828 <memset>
 8004500:	4620      	mov	r0, r4
 8004502:	bd70      	pop	{r4, r5, r6, pc}

08004504 <__sfp_lock_acquire>:
 8004504:	4801      	ldr	r0, [pc, #4]	; (800450c <__sfp_lock_acquire+0x8>)
 8004506:	f000 b8b3 	b.w	8004670 <__retarget_lock_acquire_recursive>
 800450a:	bf00      	nop
 800450c:	200003e6 	.word	0x200003e6

08004510 <__sfp_lock_release>:
 8004510:	4801      	ldr	r0, [pc, #4]	; (8004518 <__sfp_lock_release+0x8>)
 8004512:	f000 b8af 	b.w	8004674 <__retarget_lock_release_recursive>
 8004516:	bf00      	nop
 8004518:	200003e6 	.word	0x200003e6

0800451c <__sinit_lock_acquire>:
 800451c:	4801      	ldr	r0, [pc, #4]	; (8004524 <__sinit_lock_acquire+0x8>)
 800451e:	f000 b8a7 	b.w	8004670 <__retarget_lock_acquire_recursive>
 8004522:	bf00      	nop
 8004524:	200003e7 	.word	0x200003e7

08004528 <__sinit_lock_release>:
 8004528:	4801      	ldr	r0, [pc, #4]	; (8004530 <__sinit_lock_release+0x8>)
 800452a:	f000 b8a3 	b.w	8004674 <__retarget_lock_release_recursive>
 800452e:	bf00      	nop
 8004530:	200003e7 	.word	0x200003e7

08004534 <__sinit>:
 8004534:	b510      	push	{r4, lr}
 8004536:	4604      	mov	r4, r0
 8004538:	f7ff fff0 	bl	800451c <__sinit_lock_acquire>
 800453c:	69a3      	ldr	r3, [r4, #24]
 800453e:	b11b      	cbz	r3, 8004548 <__sinit+0x14>
 8004540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004544:	f7ff bff0 	b.w	8004528 <__sinit_lock_release>
 8004548:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800454c:	6523      	str	r3, [r4, #80]	; 0x50
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <__sinit+0x68>)
 8004550:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <__sinit+0x6c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	62a2      	str	r2, [r4, #40]	; 0x28
 8004556:	42a3      	cmp	r3, r4
 8004558:	bf04      	itt	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	61a3      	streq	r3, [r4, #24]
 800455e:	4620      	mov	r0, r4
 8004560:	f000 f820 	bl	80045a4 <__sfp>
 8004564:	6060      	str	r0, [r4, #4]
 8004566:	4620      	mov	r0, r4
 8004568:	f000 f81c 	bl	80045a4 <__sfp>
 800456c:	60a0      	str	r0, [r4, #8]
 800456e:	4620      	mov	r0, r4
 8004570:	f000 f818 	bl	80045a4 <__sfp>
 8004574:	2200      	movs	r2, #0
 8004576:	60e0      	str	r0, [r4, #12]
 8004578:	2104      	movs	r1, #4
 800457a:	6860      	ldr	r0, [r4, #4]
 800457c:	f7ff ff82 	bl	8004484 <std>
 8004580:	68a0      	ldr	r0, [r4, #8]
 8004582:	2201      	movs	r2, #1
 8004584:	2109      	movs	r1, #9
 8004586:	f7ff ff7d 	bl	8004484 <std>
 800458a:	68e0      	ldr	r0, [r4, #12]
 800458c:	2202      	movs	r2, #2
 800458e:	2112      	movs	r1, #18
 8004590:	f7ff ff78 	bl	8004484 <std>
 8004594:	2301      	movs	r3, #1
 8004596:	61a3      	str	r3, [r4, #24]
 8004598:	e7d2      	b.n	8004540 <__sinit+0xc>
 800459a:	bf00      	nop
 800459c:	08005180 	.word	0x08005180
 80045a0:	080044cd 	.word	0x080044cd

080045a4 <__sfp>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	4607      	mov	r7, r0
 80045a8:	f7ff ffac 	bl	8004504 <__sfp_lock_acquire>
 80045ac:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <__sfp+0x84>)
 80045ae:	681e      	ldr	r6, [r3, #0]
 80045b0:	69b3      	ldr	r3, [r6, #24]
 80045b2:	b913      	cbnz	r3, 80045ba <__sfp+0x16>
 80045b4:	4630      	mov	r0, r6
 80045b6:	f7ff ffbd 	bl	8004534 <__sinit>
 80045ba:	3648      	adds	r6, #72	; 0x48
 80045bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	d503      	bpl.n	80045cc <__sfp+0x28>
 80045c4:	6833      	ldr	r3, [r6, #0]
 80045c6:	b30b      	cbz	r3, 800460c <__sfp+0x68>
 80045c8:	6836      	ldr	r6, [r6, #0]
 80045ca:	e7f7      	b.n	80045bc <__sfp+0x18>
 80045cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045d0:	b9d5      	cbnz	r5, 8004608 <__sfp+0x64>
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <__sfp+0x88>)
 80045d4:	60e3      	str	r3, [r4, #12]
 80045d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045da:	6665      	str	r5, [r4, #100]	; 0x64
 80045dc:	f000 f847 	bl	800466e <__retarget_lock_init_recursive>
 80045e0:	f7ff ff96 	bl	8004510 <__sfp_lock_release>
 80045e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045ec:	6025      	str	r5, [r4, #0]
 80045ee:	61a5      	str	r5, [r4, #24]
 80045f0:	2208      	movs	r2, #8
 80045f2:	4629      	mov	r1, r5
 80045f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045f8:	f7ff f916 	bl	8003828 <memset>
 80045fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004604:	4620      	mov	r0, r4
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004608:	3468      	adds	r4, #104	; 0x68
 800460a:	e7d9      	b.n	80045c0 <__sfp+0x1c>
 800460c:	2104      	movs	r1, #4
 800460e:	4638      	mov	r0, r7
 8004610:	f7ff ff62 	bl	80044d8 <__sfmoreglue>
 8004614:	4604      	mov	r4, r0
 8004616:	6030      	str	r0, [r6, #0]
 8004618:	2800      	cmp	r0, #0
 800461a:	d1d5      	bne.n	80045c8 <__sfp+0x24>
 800461c:	f7ff ff78 	bl	8004510 <__sfp_lock_release>
 8004620:	230c      	movs	r3, #12
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	e7ee      	b.n	8004604 <__sfp+0x60>
 8004626:	bf00      	nop
 8004628:	08005180 	.word	0x08005180
 800462c:	ffff0001 	.word	0xffff0001

08004630 <_fwalk_reent>:
 8004630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004634:	4606      	mov	r6, r0
 8004636:	4688      	mov	r8, r1
 8004638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800463c:	2700      	movs	r7, #0
 800463e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004642:	f1b9 0901 	subs.w	r9, r9, #1
 8004646:	d505      	bpl.n	8004654 <_fwalk_reent+0x24>
 8004648:	6824      	ldr	r4, [r4, #0]
 800464a:	2c00      	cmp	r4, #0
 800464c:	d1f7      	bne.n	800463e <_fwalk_reent+0xe>
 800464e:	4638      	mov	r0, r7
 8004650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004654:	89ab      	ldrh	r3, [r5, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d907      	bls.n	800466a <_fwalk_reent+0x3a>
 800465a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800465e:	3301      	adds	r3, #1
 8004660:	d003      	beq.n	800466a <_fwalk_reent+0x3a>
 8004662:	4629      	mov	r1, r5
 8004664:	4630      	mov	r0, r6
 8004666:	47c0      	blx	r8
 8004668:	4307      	orrs	r7, r0
 800466a:	3568      	adds	r5, #104	; 0x68
 800466c:	e7e9      	b.n	8004642 <_fwalk_reent+0x12>

0800466e <__retarget_lock_init_recursive>:
 800466e:	4770      	bx	lr

08004670 <__retarget_lock_acquire_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_release>:
 8004672:	4770      	bx	lr

08004674 <__retarget_lock_release_recursive>:
 8004674:	4770      	bx	lr

08004676 <__swhatbuf_r>:
 8004676:	b570      	push	{r4, r5, r6, lr}
 8004678:	460e      	mov	r6, r1
 800467a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467e:	2900      	cmp	r1, #0
 8004680:	b096      	sub	sp, #88	; 0x58
 8004682:	4614      	mov	r4, r2
 8004684:	461d      	mov	r5, r3
 8004686:	da08      	bge.n	800469a <__swhatbuf_r+0x24>
 8004688:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	602a      	str	r2, [r5, #0]
 8004690:	061a      	lsls	r2, r3, #24
 8004692:	d410      	bmi.n	80046b6 <__swhatbuf_r+0x40>
 8004694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004698:	e00e      	b.n	80046b8 <__swhatbuf_r+0x42>
 800469a:	466a      	mov	r2, sp
 800469c:	f000 fa4c 	bl	8004b38 <_fstat_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	dbf1      	blt.n	8004688 <__swhatbuf_r+0x12>
 80046a4:	9a01      	ldr	r2, [sp, #4]
 80046a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046ae:	425a      	negs	r2, r3
 80046b0:	415a      	adcs	r2, r3
 80046b2:	602a      	str	r2, [r5, #0]
 80046b4:	e7ee      	b.n	8004694 <__swhatbuf_r+0x1e>
 80046b6:	2340      	movs	r3, #64	; 0x40
 80046b8:	2000      	movs	r0, #0
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	b016      	add	sp, #88	; 0x58
 80046be:	bd70      	pop	{r4, r5, r6, pc}

080046c0 <__smakebuf_r>:
 80046c0:	898b      	ldrh	r3, [r1, #12]
 80046c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046c4:	079d      	lsls	r5, r3, #30
 80046c6:	4606      	mov	r6, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	d507      	bpl.n	80046dc <__smakebuf_r+0x1c>
 80046cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	2301      	movs	r3, #1
 80046d6:	6163      	str	r3, [r4, #20]
 80046d8:	b002      	add	sp, #8
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	ab01      	add	r3, sp, #4
 80046de:	466a      	mov	r2, sp
 80046e0:	f7ff ffc9 	bl	8004676 <__swhatbuf_r>
 80046e4:	9900      	ldr	r1, [sp, #0]
 80046e6:	4605      	mov	r5, r0
 80046e8:	4630      	mov	r0, r6
 80046ea:	f7ff f911 	bl	8003910 <_malloc_r>
 80046ee:	b948      	cbnz	r0, 8004704 <__smakebuf_r+0x44>
 80046f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f4:	059a      	lsls	r2, r3, #22
 80046f6:	d4ef      	bmi.n	80046d8 <__smakebuf_r+0x18>
 80046f8:	f023 0303 	bic.w	r3, r3, #3
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	e7e3      	b.n	80046cc <__smakebuf_r+0xc>
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <__smakebuf_r+0x7c>)
 8004706:	62b3      	str	r3, [r6, #40]	; 0x28
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	6020      	str	r0, [r4, #0]
 800470c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	9b00      	ldr	r3, [sp, #0]
 8004714:	6163      	str	r3, [r4, #20]
 8004716:	9b01      	ldr	r3, [sp, #4]
 8004718:	6120      	str	r0, [r4, #16]
 800471a:	b15b      	cbz	r3, 8004734 <__smakebuf_r+0x74>
 800471c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004720:	4630      	mov	r0, r6
 8004722:	f000 fa1b 	bl	8004b5c <_isatty_r>
 8004726:	b128      	cbz	r0, 8004734 <__smakebuf_r+0x74>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	89a0      	ldrh	r0, [r4, #12]
 8004736:	4305      	orrs	r5, r0
 8004738:	81a5      	strh	r5, [r4, #12]
 800473a:	e7cd      	b.n	80046d8 <__smakebuf_r+0x18>
 800473c:	080044cd 	.word	0x080044cd

08004740 <__malloc_lock>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__malloc_lock+0x8>)
 8004742:	f7ff bf95 	b.w	8004670 <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	200003e5 	.word	0x200003e5

0800474c <__malloc_unlock>:
 800474c:	4801      	ldr	r0, [pc, #4]	; (8004754 <__malloc_unlock+0x8>)
 800474e:	f7ff bf91 	b.w	8004674 <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	200003e5 	.word	0x200003e5

08004758 <_realloc_r>:
 8004758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475c:	4680      	mov	r8, r0
 800475e:	4614      	mov	r4, r2
 8004760:	460e      	mov	r6, r1
 8004762:	b921      	cbnz	r1, 800476e <_realloc_r+0x16>
 8004764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	4611      	mov	r1, r2
 800476a:	f7ff b8d1 	b.w	8003910 <_malloc_r>
 800476e:	b92a      	cbnz	r2, 800477c <_realloc_r+0x24>
 8004770:	f7ff f862 	bl	8003838 <_free_r>
 8004774:	4625      	mov	r5, r4
 8004776:	4628      	mov	r0, r5
 8004778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800477c:	f000 fa10 	bl	8004ba0 <_malloc_usable_size_r>
 8004780:	4284      	cmp	r4, r0
 8004782:	4607      	mov	r7, r0
 8004784:	d802      	bhi.n	800478c <_realloc_r+0x34>
 8004786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800478a:	d812      	bhi.n	80047b2 <_realloc_r+0x5a>
 800478c:	4621      	mov	r1, r4
 800478e:	4640      	mov	r0, r8
 8004790:	f7ff f8be 	bl	8003910 <_malloc_r>
 8004794:	4605      	mov	r5, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d0ed      	beq.n	8004776 <_realloc_r+0x1e>
 800479a:	42bc      	cmp	r4, r7
 800479c:	4622      	mov	r2, r4
 800479e:	4631      	mov	r1, r6
 80047a0:	bf28      	it	cs
 80047a2:	463a      	movcs	r2, r7
 80047a4:	f7ff f818 	bl	80037d8 <memcpy>
 80047a8:	4631      	mov	r1, r6
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff f844 	bl	8003838 <_free_r>
 80047b0:	e7e1      	b.n	8004776 <_realloc_r+0x1e>
 80047b2:	4635      	mov	r5, r6
 80047b4:	e7df      	b.n	8004776 <_realloc_r+0x1e>

080047b6 <__ssputs_r>:
 80047b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ba:	688e      	ldr	r6, [r1, #8]
 80047bc:	429e      	cmp	r6, r3
 80047be:	4682      	mov	sl, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	4690      	mov	r8, r2
 80047c4:	461f      	mov	r7, r3
 80047c6:	d838      	bhi.n	800483a <__ssputs_r+0x84>
 80047c8:	898a      	ldrh	r2, [r1, #12]
 80047ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047ce:	d032      	beq.n	8004836 <__ssputs_r+0x80>
 80047d0:	6825      	ldr	r5, [r4, #0]
 80047d2:	6909      	ldr	r1, [r1, #16]
 80047d4:	eba5 0901 	sub.w	r9, r5, r1
 80047d8:	6965      	ldr	r5, [r4, #20]
 80047da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047e2:	3301      	adds	r3, #1
 80047e4:	444b      	add	r3, r9
 80047e6:	106d      	asrs	r5, r5, #1
 80047e8:	429d      	cmp	r5, r3
 80047ea:	bf38      	it	cc
 80047ec:	461d      	movcc	r5, r3
 80047ee:	0553      	lsls	r3, r2, #21
 80047f0:	d531      	bpl.n	8004856 <__ssputs_r+0xa0>
 80047f2:	4629      	mov	r1, r5
 80047f4:	f7ff f88c 	bl	8003910 <_malloc_r>
 80047f8:	4606      	mov	r6, r0
 80047fa:	b950      	cbnz	r0, 8004812 <__ssputs_r+0x5c>
 80047fc:	230c      	movs	r3, #12
 80047fe:	f8ca 3000 	str.w	r3, [sl]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004812:	6921      	ldr	r1, [r4, #16]
 8004814:	464a      	mov	r2, r9
 8004816:	f7fe ffdf 	bl	80037d8 <memcpy>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	6126      	str	r6, [r4, #16]
 8004828:	6165      	str	r5, [r4, #20]
 800482a:	444e      	add	r6, r9
 800482c:	eba5 0509 	sub.w	r5, r5, r9
 8004830:	6026      	str	r6, [r4, #0]
 8004832:	60a5      	str	r5, [r4, #8]
 8004834:	463e      	mov	r6, r7
 8004836:	42be      	cmp	r6, r7
 8004838:	d900      	bls.n	800483c <__ssputs_r+0x86>
 800483a:	463e      	mov	r6, r7
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	4632      	mov	r2, r6
 8004840:	4641      	mov	r1, r8
 8004842:	f7fe ffd7 	bl	80037f4 <memmove>
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	1b9b      	subs	r3, r3, r6
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	4433      	add	r3, r6
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	2000      	movs	r0, #0
 8004854:	e7db      	b.n	800480e <__ssputs_r+0x58>
 8004856:	462a      	mov	r2, r5
 8004858:	f7ff ff7e 	bl	8004758 <_realloc_r>
 800485c:	4606      	mov	r6, r0
 800485e:	2800      	cmp	r0, #0
 8004860:	d1e1      	bne.n	8004826 <__ssputs_r+0x70>
 8004862:	6921      	ldr	r1, [r4, #16]
 8004864:	4650      	mov	r0, sl
 8004866:	f7fe ffe7 	bl	8003838 <_free_r>
 800486a:	e7c7      	b.n	80047fc <__ssputs_r+0x46>

0800486c <_svfiprintf_r>:
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	4698      	mov	r8, r3
 8004872:	898b      	ldrh	r3, [r1, #12]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	b09d      	sub	sp, #116	; 0x74
 8004878:	4607      	mov	r7, r0
 800487a:	460d      	mov	r5, r1
 800487c:	4614      	mov	r4, r2
 800487e:	d50e      	bpl.n	800489e <_svfiprintf_r+0x32>
 8004880:	690b      	ldr	r3, [r1, #16]
 8004882:	b963      	cbnz	r3, 800489e <_svfiprintf_r+0x32>
 8004884:	2140      	movs	r1, #64	; 0x40
 8004886:	f7ff f843 	bl	8003910 <_malloc_r>
 800488a:	6028      	str	r0, [r5, #0]
 800488c:	6128      	str	r0, [r5, #16]
 800488e:	b920      	cbnz	r0, 800489a <_svfiprintf_r+0x2e>
 8004890:	230c      	movs	r3, #12
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e0d1      	b.n	8004a3e <_svfiprintf_r+0x1d2>
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	616b      	str	r3, [r5, #20]
 800489e:	2300      	movs	r3, #0
 80048a0:	9309      	str	r3, [sp, #36]	; 0x24
 80048a2:	2320      	movs	r3, #32
 80048a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ac:	2330      	movs	r3, #48	; 0x30
 80048ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a58 <_svfiprintf_r+0x1ec>
 80048b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048b6:	f04f 0901 	mov.w	r9, #1
 80048ba:	4623      	mov	r3, r4
 80048bc:	469a      	mov	sl, r3
 80048be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c2:	b10a      	cbz	r2, 80048c8 <_svfiprintf_r+0x5c>
 80048c4:	2a25      	cmp	r2, #37	; 0x25
 80048c6:	d1f9      	bne.n	80048bc <_svfiprintf_r+0x50>
 80048c8:	ebba 0b04 	subs.w	fp, sl, r4
 80048cc:	d00b      	beq.n	80048e6 <_svfiprintf_r+0x7a>
 80048ce:	465b      	mov	r3, fp
 80048d0:	4622      	mov	r2, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ff6e 	bl	80047b6 <__ssputs_r>
 80048da:	3001      	adds	r0, #1
 80048dc:	f000 80aa 	beq.w	8004a34 <_svfiprintf_r+0x1c8>
 80048e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e2:	445a      	add	r2, fp
 80048e4:	9209      	str	r2, [sp, #36]	; 0x24
 80048e6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80a2 	beq.w	8004a34 <_svfiprintf_r+0x1c8>
 80048f0:	2300      	movs	r3, #0
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295
 80048f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048fa:	f10a 0a01 	add.w	sl, sl, #1
 80048fe:	9304      	str	r3, [sp, #16]
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004906:	931a      	str	r3, [sp, #104]	; 0x68
 8004908:	4654      	mov	r4, sl
 800490a:	2205      	movs	r2, #5
 800490c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004910:	4851      	ldr	r0, [pc, #324]	; (8004a58 <_svfiprintf_r+0x1ec>)
 8004912:	f7fb fc7d 	bl	8000210 <memchr>
 8004916:	9a04      	ldr	r2, [sp, #16]
 8004918:	b9d8      	cbnz	r0, 8004952 <_svfiprintf_r+0xe6>
 800491a:	06d0      	lsls	r0, r2, #27
 800491c:	bf44      	itt	mi
 800491e:	2320      	movmi	r3, #32
 8004920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004924:	0711      	lsls	r1, r2, #28
 8004926:	bf44      	itt	mi
 8004928:	232b      	movmi	r3, #43	; 0x2b
 800492a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800492e:	f89a 3000 	ldrb.w	r3, [sl]
 8004932:	2b2a      	cmp	r3, #42	; 0x2a
 8004934:	d015      	beq.n	8004962 <_svfiprintf_r+0xf6>
 8004936:	9a07      	ldr	r2, [sp, #28]
 8004938:	4654      	mov	r4, sl
 800493a:	2000      	movs	r0, #0
 800493c:	f04f 0c0a 	mov.w	ip, #10
 8004940:	4621      	mov	r1, r4
 8004942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004946:	3b30      	subs	r3, #48	; 0x30
 8004948:	2b09      	cmp	r3, #9
 800494a:	d94e      	bls.n	80049ea <_svfiprintf_r+0x17e>
 800494c:	b1b0      	cbz	r0, 800497c <_svfiprintf_r+0x110>
 800494e:	9207      	str	r2, [sp, #28]
 8004950:	e014      	b.n	800497c <_svfiprintf_r+0x110>
 8004952:	eba0 0308 	sub.w	r3, r0, r8
 8004956:	fa09 f303 	lsl.w	r3, r9, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	9304      	str	r3, [sp, #16]
 800495e:	46a2      	mov	sl, r4
 8004960:	e7d2      	b.n	8004908 <_svfiprintf_r+0x9c>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	1d19      	adds	r1, r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	9103      	str	r1, [sp, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfbb      	ittet	lt
 800496e:	425b      	neglt	r3, r3
 8004970:	f042 0202 	orrlt.w	r2, r2, #2
 8004974:	9307      	strge	r3, [sp, #28]
 8004976:	9307      	strlt	r3, [sp, #28]
 8004978:	bfb8      	it	lt
 800497a:	9204      	strlt	r2, [sp, #16]
 800497c:	7823      	ldrb	r3, [r4, #0]
 800497e:	2b2e      	cmp	r3, #46	; 0x2e
 8004980:	d10c      	bne.n	800499c <_svfiprintf_r+0x130>
 8004982:	7863      	ldrb	r3, [r4, #1]
 8004984:	2b2a      	cmp	r3, #42	; 0x2a
 8004986:	d135      	bne.n	80049f4 <_svfiprintf_r+0x188>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	1d1a      	adds	r2, r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	9203      	str	r2, [sp, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	bfb8      	it	lt
 8004994:	f04f 33ff 	movlt.w	r3, #4294967295
 8004998:	3402      	adds	r4, #2
 800499a:	9305      	str	r3, [sp, #20]
 800499c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a68 <_svfiprintf_r+0x1fc>
 80049a0:	7821      	ldrb	r1, [r4, #0]
 80049a2:	2203      	movs	r2, #3
 80049a4:	4650      	mov	r0, sl
 80049a6:	f7fb fc33 	bl	8000210 <memchr>
 80049aa:	b140      	cbz	r0, 80049be <_svfiprintf_r+0x152>
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	eba0 000a 	sub.w	r0, r0, sl
 80049b2:	fa03 f000 	lsl.w	r0, r3, r0
 80049b6:	9b04      	ldr	r3, [sp, #16]
 80049b8:	4303      	orrs	r3, r0
 80049ba:	3401      	adds	r4, #1
 80049bc:	9304      	str	r3, [sp, #16]
 80049be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c2:	4826      	ldr	r0, [pc, #152]	; (8004a5c <_svfiprintf_r+0x1f0>)
 80049c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c8:	2206      	movs	r2, #6
 80049ca:	f7fb fc21 	bl	8000210 <memchr>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d038      	beq.n	8004a44 <_svfiprintf_r+0x1d8>
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <_svfiprintf_r+0x1f4>)
 80049d4:	bb1b      	cbnz	r3, 8004a1e <_svfiprintf_r+0x1b2>
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	3307      	adds	r3, #7
 80049da:	f023 0307 	bic.w	r3, r3, #7
 80049de:	3308      	adds	r3, #8
 80049e0:	9303      	str	r3, [sp, #12]
 80049e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e4:	4433      	add	r3, r6
 80049e6:	9309      	str	r3, [sp, #36]	; 0x24
 80049e8:	e767      	b.n	80048ba <_svfiprintf_r+0x4e>
 80049ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ee:	460c      	mov	r4, r1
 80049f0:	2001      	movs	r0, #1
 80049f2:	e7a5      	b.n	8004940 <_svfiprintf_r+0xd4>
 80049f4:	2300      	movs	r3, #0
 80049f6:	3401      	adds	r4, #1
 80049f8:	9305      	str	r3, [sp, #20]
 80049fa:	4619      	mov	r1, r3
 80049fc:	f04f 0c0a 	mov.w	ip, #10
 8004a00:	4620      	mov	r0, r4
 8004a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a06:	3a30      	subs	r2, #48	; 0x30
 8004a08:	2a09      	cmp	r2, #9
 8004a0a:	d903      	bls.n	8004a14 <_svfiprintf_r+0x1a8>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0c5      	beq.n	800499c <_svfiprintf_r+0x130>
 8004a10:	9105      	str	r1, [sp, #20]
 8004a12:	e7c3      	b.n	800499c <_svfiprintf_r+0x130>
 8004a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a18:	4604      	mov	r4, r0
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e7f0      	b.n	8004a00 <_svfiprintf_r+0x194>
 8004a1e:	ab03      	add	r3, sp, #12
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	462a      	mov	r2, r5
 8004a24:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <_svfiprintf_r+0x1f8>)
 8004a26:	a904      	add	r1, sp, #16
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f3af 8000 	nop.w
 8004a2e:	1c42      	adds	r2, r0, #1
 8004a30:	4606      	mov	r6, r0
 8004a32:	d1d6      	bne.n	80049e2 <_svfiprintf_r+0x176>
 8004a34:	89ab      	ldrh	r3, [r5, #12]
 8004a36:	065b      	lsls	r3, r3, #25
 8004a38:	f53f af2c 	bmi.w	8004894 <_svfiprintf_r+0x28>
 8004a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a3e:	b01d      	add	sp, #116	; 0x74
 8004a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a44:	ab03      	add	r3, sp, #12
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	462a      	mov	r2, r5
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <_svfiprintf_r+0x1f8>)
 8004a4c:	a904      	add	r1, sp, #16
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f7ff f99a 	bl	8003d88 <_printf_i>
 8004a54:	e7eb      	b.n	8004a2e <_svfiprintf_r+0x1c2>
 8004a56:	bf00      	nop
 8004a58:	08005184 	.word	0x08005184
 8004a5c:	0800518e 	.word	0x0800518e
 8004a60:	00000000 	.word	0x00000000
 8004a64:	080047b7 	.word	0x080047b7
 8004a68:	0800518a 	.word	0x0800518a

08004a6c <__sread>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	f000 f89c 	bl	8004bb0 <_read_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	bfab      	itete	ge
 8004a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a80:	181b      	addge	r3, r3, r0
 8004a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a86:	bfac      	ite	ge
 8004a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a8a:	81a3      	strhlt	r3, [r4, #12]
 8004a8c:	bd10      	pop	{r4, pc}

08004a8e <__swrite>:
 8004a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a92:	461f      	mov	r7, r3
 8004a94:	898b      	ldrh	r3, [r1, #12]
 8004a96:	05db      	lsls	r3, r3, #23
 8004a98:	4605      	mov	r5, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	d505      	bpl.n	8004aac <__swrite+0x1e>
 8004aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f000 f868 	bl	8004b7c <_lseek_r>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab6:	81a3      	strh	r3, [r4, #12]
 8004ab8:	4632      	mov	r2, r6
 8004aba:	463b      	mov	r3, r7
 8004abc:	4628      	mov	r0, r5
 8004abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac2:	f000 b817 	b.w	8004af4 <_write_r>

08004ac6 <__sseek>:
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	460c      	mov	r4, r1
 8004aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ace:	f000 f855 	bl	8004b7c <_lseek_r>
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	bf15      	itete	ne
 8004ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ae2:	81a3      	strheq	r3, [r4, #12]
 8004ae4:	bf18      	it	ne
 8004ae6:	81a3      	strhne	r3, [r4, #12]
 8004ae8:	bd10      	pop	{r4, pc}

08004aea <__sclose>:
 8004aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aee:	f000 b813 	b.w	8004b18 <_close_r>
	...

08004af4 <_write_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d07      	ldr	r5, [pc, #28]	; (8004b14 <_write_r+0x20>)
 8004af8:	4604      	mov	r4, r0
 8004afa:	4608      	mov	r0, r1
 8004afc:	4611      	mov	r1, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 f8ac 	bl	8004c60 <_write>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_write_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_write_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	200003e8 	.word	0x200003e8

08004b18 <_close_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d06      	ldr	r5, [pc, #24]	; (8004b34 <_close_r+0x1c>)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	f000 f856 	bl	8004bd4 <_close>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_close_r+0x1a>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_close_r+0x1a>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	200003e8 	.word	0x200003e8

08004b38 <_fstat_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d07      	ldr	r5, [pc, #28]	; (8004b58 <_fstat_r+0x20>)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	f000 f84d 	bl	8004be4 <_fstat>
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	d102      	bne.n	8004b54 <_fstat_r+0x1c>
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	b103      	cbz	r3, 8004b54 <_fstat_r+0x1c>
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	bd38      	pop	{r3, r4, r5, pc}
 8004b56:	bf00      	nop
 8004b58:	200003e8 	.word	0x200003e8

08004b5c <_isatty_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d06      	ldr	r5, [pc, #24]	; (8004b78 <_isatty_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	f000 f84c 	bl	8004c04 <_isatty>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_isatty_r+0x1a>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_isatty_r+0x1a>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	200003e8 	.word	0x200003e8

08004b7c <_lseek_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	; (8004b9c <_lseek_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f000 f84a 	bl	8004c24 <_lseek>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_lseek_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_lseek_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	200003e8 	.word	0x200003e8

08004ba0 <_malloc_usable_size_r>:
 8004ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba4:	1f18      	subs	r0, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bfbc      	itt	lt
 8004baa:	580b      	ldrlt	r3, [r1, r0]
 8004bac:	18c0      	addlt	r0, r0, r3
 8004bae:	4770      	bx	lr

08004bb0 <_read_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4d07      	ldr	r5, [pc, #28]	; (8004bd0 <_read_r+0x20>)
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	602a      	str	r2, [r5, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 f838 	bl	8004c34 <_read>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_read_r+0x1e>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_read_r+0x1e>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200003e8 	.word	0x200003e8

08004bd4 <_close>:
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <_close+0xc>)
 8004bd6:	2258      	movs	r2, #88	; 0x58
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f04f 30ff 	mov.w	r0, #4294967295
 8004bde:	4770      	bx	lr
 8004be0:	200003e8 	.word	0x200003e8

08004be4 <_fstat>:
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <_fstat+0xc>)
 8004be6:	2258      	movs	r2, #88	; 0x58
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f04f 30ff 	mov.w	r0, #4294967295
 8004bee:	4770      	bx	lr
 8004bf0:	200003e8 	.word	0x200003e8

08004bf4 <_getpid>:
 8004bf4:	4b02      	ldr	r3, [pc, #8]	; (8004c00 <_getpid+0xc>)
 8004bf6:	2258      	movs	r2, #88	; 0x58
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfe:	4770      	bx	lr
 8004c00:	200003e8 	.word	0x200003e8

08004c04 <_isatty>:
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <_isatty+0xc>)
 8004c06:	2258      	movs	r2, #88	; 0x58
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	200003e8 	.word	0x200003e8

08004c14 <_kill>:
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <_kill+0xc>)
 8004c16:	2258      	movs	r2, #88	; 0x58
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	4770      	bx	lr
 8004c20:	200003e8 	.word	0x200003e8

08004c24 <_lseek>:
 8004c24:	4b02      	ldr	r3, [pc, #8]	; (8004c30 <_lseek+0xc>)
 8004c26:	2258      	movs	r2, #88	; 0x58
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	4770      	bx	lr
 8004c30:	200003e8 	.word	0x200003e8

08004c34 <_read>:
 8004c34:	4b02      	ldr	r3, [pc, #8]	; (8004c40 <_read+0xc>)
 8004c36:	2258      	movs	r2, #88	; 0x58
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3e:	4770      	bx	lr
 8004c40:	200003e8 	.word	0x200003e8

08004c44 <_sbrk>:
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <_sbrk+0x14>)
 8004c46:	6811      	ldr	r1, [r2, #0]
 8004c48:	4603      	mov	r3, r0
 8004c4a:	b909      	cbnz	r1, 8004c50 <_sbrk+0xc>
 8004c4c:	4903      	ldr	r1, [pc, #12]	; (8004c5c <_sbrk+0x18>)
 8004c4e:	6011      	str	r1, [r2, #0]
 8004c50:	6810      	ldr	r0, [r2, #0]
 8004c52:	4403      	add	r3, r0
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4770      	bx	lr
 8004c58:	200003ec 	.word	0x200003ec
 8004c5c:	200003f0 	.word	0x200003f0

08004c60 <_write>:
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <_write+0xc>)
 8004c62:	2258      	movs	r2, #88	; 0x58
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	4770      	bx	lr
 8004c6c:	200003e8 	.word	0x200003e8

08004c70 <_exit>:
 8004c70:	e7fe      	b.n	8004c70 <_exit>
	...

08004c74 <_init>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr

08004c80 <_fini>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr
